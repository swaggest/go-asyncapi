// Code generated by github.com/swaggest/json-cli v1.9.1, DO NOT EDIT.

// Package spec contains JSON mapping structures.
package spec

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"regexp"
)

// AsyncAPI structure is generated from "#".
//
// AsyncAPI 2.4.0 schema.
//
// !!Auto generated!!
//  Do not manually edit. .
type AsyncAPI struct {
	// A unique id representing the application.
	// Format: uri.
	ID string `json:"id,omitempty"`
	// General information about the API.
	// Required.
	Info               Info                   `json:"info"`
	Servers            map[string]Servers     `json:"servers,omitempty"` // An object representing multiple servers.
	DefaultContentType string                 `json:"defaultContentType,omitempty"`
	Channels           map[string]ChannelItem `json:"channels"`             // Required.
	Components         *Components            `json:"components,omitempty"` // An object to hold a set of reusable objects for different aspects of the AsyncAPI Specification.
	Tags               []Tag                  `json:"tags,omitempty"`
	ExternalDocs       *ExternalDocs          `json:"externalDocs,omitempty"` // Information about external documentation.
	MapOfAnything      map[string]interface{} `json:"-"`                      // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

// WithID sets ID value.
func (a *AsyncAPI) WithID(val string) *AsyncAPI {
	a.ID = val
	return a
}

// WithInfo sets Info value.
func (a *AsyncAPI) WithInfo(val Info) *AsyncAPI {
	a.Info = val
	return a
}

// WithServers sets Servers value.
func (a *AsyncAPI) WithServers(val map[string]Servers) *AsyncAPI {
	a.Servers = val
	return a
}

// WithServersItem sets Servers item value.
func (a *AsyncAPI) WithServersItem(key string, val Servers) *AsyncAPI {
	if a.Servers == nil {
		a.Servers = make(map[string]Servers, 1)
	}

	a.Servers[key] = val

	return a
}

// WithDefaultContentType sets DefaultContentType value.
func (a *AsyncAPI) WithDefaultContentType(val string) *AsyncAPI {
	a.DefaultContentType = val
	return a
}

// WithChannels sets Channels value.
func (a *AsyncAPI) WithChannels(val map[string]ChannelItem) *AsyncAPI {
	a.Channels = val
	return a
}

// WithChannelsItem sets Channels item value.
func (a *AsyncAPI) WithChannelsItem(key string, val ChannelItem) *AsyncAPI {
	if a.Channels == nil {
		a.Channels = make(map[string]ChannelItem, 1)
	}

	a.Channels[key] = val

	return a
}

// WithComponents sets Components value.
func (a *AsyncAPI) WithComponents(val Components) *AsyncAPI {
	a.Components = &val
	return a
}

// ComponentsEns ensures returned Components is not nil.
func (a *AsyncAPI) ComponentsEns() *Components {
	if a.Components == nil {
		a.Components = new(Components)
	}

	return a.Components
}

// WithTags sets Tags value.
func (a *AsyncAPI) WithTags(val ...Tag) *AsyncAPI {
	a.Tags = val
	return a
}

// WithExternalDocs sets ExternalDocs value.
func (a *AsyncAPI) WithExternalDocs(val ExternalDocs) *AsyncAPI {
	a.ExternalDocs = &val
	return a
}

// ExternalDocsEns ensures returned ExternalDocs is not nil.
func (a *AsyncAPI) ExternalDocsEns() *ExternalDocs {
	if a.ExternalDocs == nil {
		a.ExternalDocs = new(ExternalDocs)
	}

	return a.ExternalDocs
}

// WithMapOfAnything sets MapOfAnything value.
func (a *AsyncAPI) WithMapOfAnything(val map[string]interface{}) *AsyncAPI {
	a.MapOfAnything = val
	return a
}

// WithMapOfAnythingItem sets MapOfAnything item value.
func (a *AsyncAPI) WithMapOfAnythingItem(key string, val interface{}) *AsyncAPI {
	if a.MapOfAnything == nil {
		a.MapOfAnything = make(map[string]interface{}, 1)
	}

	a.MapOfAnything[key] = val

	return a
}

type marshalAsyncAPI AsyncAPI

var knownKeysAsyncAPI = []string{
	"id",
	"info",
	"servers",
	"defaultContentType",
	"channels",
	"components",
	"tags",
	"externalDocs",
	"asyncapi",
}

var requireKeysAsyncAPI = []string{
	"asyncapi",
	"info",
	"channels",
}

// UnmarshalJSON decodes JSON.
func (a *AsyncAPI) UnmarshalJSON(data []byte) error {
	var err error

	ma := marshalAsyncAPI(*a)

	err = json.Unmarshal(data, &ma)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range requireKeysAsyncAPI {
		if _, found := rawMap[key]; !found {
			return errors.New("required key missing: " + key)
		}
	}

	if v, exists := rawMap["asyncapi"]; exists && string(v) != `"2.4.0"` {
		return fmt.Errorf(`bad const value for "asyncapi" ("2.4.0" expected, %s received)`, v)
	}

	delete(rawMap, "asyncapi")

	for _, key := range knownKeysAsyncAPI {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if ma.MapOfAnything == nil {
				ma.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			ma.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in AsyncAPI: %v", offendingKeys)
	}

	*a = AsyncAPI(ma)

	return nil
}

// constAsyncAPI is unconditionally added to JSON.
var constAsyncAPI = json.RawMessage(`{"asyncapi":"2.4.0"}`)

// MarshalJSON encodes JSON.
func (a AsyncAPI) MarshalJSON() ([]byte, error) {
	return marshalUnion(constAsyncAPI, marshalAsyncAPI(a), a.MapOfAnything)
}

// Info structure is generated from "http://asyncapi.com/definitions/2.4.0/info.json".
//
// General information about the API.
type Info struct {
	// A unique and precise title of the API.
	// Required.
	Title string `json:"title"`
	// A semantic version number of the API.
	// Required.
	Version     string `json:"version"`
	Description string `json:"description,omitempty"` // A longer description of the API. Should be different from the title. CommonMark is allowed.
	// A URL to the Terms of Service for the API. MUST be in the format of a URL.
	// Format: uri.
	TermsOfService string                 `json:"termsOfService,omitempty"`
	Contact        *Contact               `json:"contact,omitempty"` // Contact information for the owners of the API.
	License        *License               `json:"license,omitempty"`
	MapOfAnything  map[string]interface{} `json:"-"` // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

// WithTitle sets Title value.
func (i *Info) WithTitle(val string) *Info {
	i.Title = val
	return i
}

// WithVersion sets Version value.
func (i *Info) WithVersion(val string) *Info {
	i.Version = val
	return i
}

// WithDescription sets Description value.
func (i *Info) WithDescription(val string) *Info {
	i.Description = val
	return i
}

// WithTermsOfService sets TermsOfService value.
func (i *Info) WithTermsOfService(val string) *Info {
	i.TermsOfService = val
	return i
}

// WithContact sets Contact value.
func (i *Info) WithContact(val Contact) *Info {
	i.Contact = &val
	return i
}

// ContactEns ensures returned Contact is not nil.
func (i *Info) ContactEns() *Contact {
	if i.Contact == nil {
		i.Contact = new(Contact)
	}

	return i.Contact
}

// WithLicense sets License value.
func (i *Info) WithLicense(val License) *Info {
	i.License = &val
	return i
}

// LicenseEns ensures returned License is not nil.
func (i *Info) LicenseEns() *License {
	if i.License == nil {
		i.License = new(License)
	}

	return i.License
}

// WithMapOfAnything sets MapOfAnything value.
func (i *Info) WithMapOfAnything(val map[string]interface{}) *Info {
	i.MapOfAnything = val
	return i
}

// WithMapOfAnythingItem sets MapOfAnything item value.
func (i *Info) WithMapOfAnythingItem(key string, val interface{}) *Info {
	if i.MapOfAnything == nil {
		i.MapOfAnything = make(map[string]interface{}, 1)
	}

	i.MapOfAnything[key] = val

	return i
}

type marshalInfo Info

var knownKeysInfo = []string{
	"title",
	"version",
	"description",
	"termsOfService",
	"contact",
	"license",
}

var requireKeysInfo = []string{
	"version",
	"title",
}

// UnmarshalJSON decodes JSON.
func (i *Info) UnmarshalJSON(data []byte) error {
	var err error

	mi := marshalInfo(*i)

	err = json.Unmarshal(data, &mi)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range requireKeysInfo {
		if _, found := rawMap[key]; !found {
			return errors.New("required key missing: " + key)
		}
	}

	for _, key := range knownKeysInfo {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if mi.MapOfAnything == nil {
				mi.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			mi.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in Info: %v", offendingKeys)
	}

	*i = Info(mi)

	return nil
}

// MarshalJSON encodes JSON.
func (i Info) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalInfo(i), i.MapOfAnything)
}

// Contact structure is generated from "http://asyncapi.com/definitions/2.4.0/contact.json".
//
// Contact information for the owners of the API.
type Contact struct {
	Name string `json:"name,omitempty"` // The identifying name of the contact person/organization.
	// The URL pointing to the contact information.
	// Format: uri.
	URL string `json:"url,omitempty"`
	// The email address of the contact person/organization.
	// Format: email.
	Email         string                 `json:"email,omitempty"`
	MapOfAnything map[string]interface{} `json:"-"` // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

// WithName sets Name value.
func (c *Contact) WithName(val string) *Contact {
	c.Name = val
	return c
}

// WithURL sets URL value.
func (c *Contact) WithURL(val string) *Contact {
	c.URL = val
	return c
}

// WithEmail sets Email value.
func (c *Contact) WithEmail(val string) *Contact {
	c.Email = val
	return c
}

// WithMapOfAnything sets MapOfAnything value.
func (c *Contact) WithMapOfAnything(val map[string]interface{}) *Contact {
	c.MapOfAnything = val
	return c
}

// WithMapOfAnythingItem sets MapOfAnything item value.
func (c *Contact) WithMapOfAnythingItem(key string, val interface{}) *Contact {
	if c.MapOfAnything == nil {
		c.MapOfAnything = make(map[string]interface{}, 1)
	}

	c.MapOfAnything[key] = val

	return c
}

type marshalContact Contact

var knownKeysContact = []string{
	"name",
	"url",
	"email",
}

// UnmarshalJSON decodes JSON.
func (c *Contact) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalContact(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysContact {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if mc.MapOfAnything == nil {
				mc.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			mc.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in Contact: %v", offendingKeys)
	}

	*c = Contact(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c Contact) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalContact(c), c.MapOfAnything)
}

// License structure is generated from "http://asyncapi.com/definitions/2.4.0/license.json".
type License struct {
	// The name of the license type. It's encouraged to use an OSI compatible license.
	// Required.
	Name string `json:"name"`
	// The URL pointing to the license.
	// Format: uri.
	URL           string                 `json:"url,omitempty"`
	MapOfAnything map[string]interface{} `json:"-"` // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

// WithName sets Name value.
func (l *License) WithName(val string) *License {
	l.Name = val
	return l
}

// WithURL sets URL value.
func (l *License) WithURL(val string) *License {
	l.URL = val
	return l
}

// WithMapOfAnything sets MapOfAnything value.
func (l *License) WithMapOfAnything(val map[string]interface{}) *License {
	l.MapOfAnything = val
	return l
}

// WithMapOfAnythingItem sets MapOfAnything item value.
func (l *License) WithMapOfAnythingItem(key string, val interface{}) *License {
	if l.MapOfAnything == nil {
		l.MapOfAnything = make(map[string]interface{}, 1)
	}

	l.MapOfAnything[key] = val

	return l
}

type marshalLicense License

var knownKeysLicense = []string{
	"name",
	"url",
}

var requireKeysLicense = []string{
	"name",
}

// UnmarshalJSON decodes JSON.
func (l *License) UnmarshalJSON(data []byte) error {
	var err error

	ml := marshalLicense(*l)

	err = json.Unmarshal(data, &ml)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range requireKeysLicense {
		if _, found := rawMap[key]; !found {
			return errors.New("required key missing: " + key)
		}
	}

	for _, key := range knownKeysLicense {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if ml.MapOfAnything == nil {
				ml.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			ml.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in License: %v", offendingKeys)
	}

	*l = License(ml)

	return nil
}

// MarshalJSON encodes JSON.
func (l License) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalLicense(l), l.MapOfAnything)
}

// Reference structure is generated from "http://asyncapi.com/definitions/2.4.0/Reference.json".
type Reference struct {
	// Format: uri-reference.
	// Required.
	Ref string `json:"$ref"`
}

// WithRef sets Ref value.
func (r *Reference) WithRef(val string) *Reference {
	r.Ref = val
	return r
}

type marshalReference Reference

var requireKeysReference = []string{
	"$ref",
}

// UnmarshalJSON decodes JSON.
func (r *Reference) UnmarshalJSON(data []byte) error {
	var err error

	mr := marshalReference(*r)

	err = json.Unmarshal(data, &mr)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range requireKeysReference {
		if _, found := rawMap[key]; !found {
			return errors.New("required key missing: " + key)
		}
	}

	*r = Reference(mr)

	return nil
}

// Server structure is generated from "http://asyncapi.com/definitions/2.4.0/server.json".
//
// An object representing a Server.
type Server struct {
	URL         string `json:"url"` // Required.
	Description string `json:"description,omitempty"`
	// The transfer protocol.
	// Required.
	Protocol        string                    `json:"protocol"`
	ProtocolVersion string                    `json:"protocolVersion,omitempty"`
	Variables       map[string]ServerVariable `json:"variables,omitempty"`
	Security        []map[string][]string     `json:"security,omitempty"`
	Bindings        *ServerBindingsObject     `json:"bindings,omitempty"`
	MapOfAnything   map[string]interface{}    `json:"-"` // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

// WithURL sets URL value.
func (s *Server) WithURL(val string) *Server {
	s.URL = val
	return s
}

// WithDescription sets Description value.
func (s *Server) WithDescription(val string) *Server {
	s.Description = val
	return s
}

// WithProtocol sets Protocol value.
func (s *Server) WithProtocol(val string) *Server {
	s.Protocol = val
	return s
}

// WithProtocolVersion sets ProtocolVersion value.
func (s *Server) WithProtocolVersion(val string) *Server {
	s.ProtocolVersion = val
	return s
}

// WithVariables sets Variables value.
func (s *Server) WithVariables(val map[string]ServerVariable) *Server {
	s.Variables = val
	return s
}

// WithVariablesItem sets Variables item value.
func (s *Server) WithVariablesItem(key string, val ServerVariable) *Server {
	if s.Variables == nil {
		s.Variables = make(map[string]ServerVariable, 1)
	}

	s.Variables[key] = val

	return s
}

// WithSecurity sets Security value.
func (s *Server) WithSecurity(val ...map[string][]string) *Server {
	s.Security = val
	return s
}

// WithBindings sets Bindings value.
func (s *Server) WithBindings(val ServerBindingsObject) *Server {
	s.Bindings = &val
	return s
}

// BindingsEns ensures returned Bindings is not nil.
func (s *Server) BindingsEns() *ServerBindingsObject {
	if s.Bindings == nil {
		s.Bindings = new(ServerBindingsObject)
	}

	return s.Bindings
}

// WithMapOfAnything sets MapOfAnything value.
func (s *Server) WithMapOfAnything(val map[string]interface{}) *Server {
	s.MapOfAnything = val
	return s
}

// WithMapOfAnythingItem sets MapOfAnything item value.
func (s *Server) WithMapOfAnythingItem(key string, val interface{}) *Server {
	if s.MapOfAnything == nil {
		s.MapOfAnything = make(map[string]interface{}, 1)
	}

	s.MapOfAnything[key] = val

	return s
}

type marshalServer Server

var knownKeysServer = []string{
	"url",
	"description",
	"protocol",
	"protocolVersion",
	"variables",
	"security",
	"bindings",
}

var requireKeysServer = []string{
	"url",
	"protocol",
}

// UnmarshalJSON decodes JSON.
func (s *Server) UnmarshalJSON(data []byte) error {
	var err error

	ms := marshalServer(*s)

	err = json.Unmarshal(data, &ms)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range requireKeysServer {
		if _, found := rawMap[key]; !found {
			return errors.New("required key missing: " + key)
		}
	}

	for _, key := range knownKeysServer {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if ms.MapOfAnything == nil {
				ms.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			ms.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in Server: %v", offendingKeys)
	}

	*s = Server(ms)

	return nil
}

// MarshalJSON encodes JSON.
func (s Server) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalServer(s), s.MapOfAnything)
}

// ServerVariable structure is generated from "http://asyncapi.com/definitions/2.4.0/serverVariable.json".
//
// An object representing a Server Variable for server URL template substitution.
type ServerVariable struct {
	Enum          []string               `json:"enum,omitempty"`
	Default       string                 `json:"default,omitempty"`
	Description   string                 `json:"description,omitempty"`
	Examples      []string               `json:"examples,omitempty"`
	MapOfAnything map[string]interface{} `json:"-"` // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

// WithEnum sets Enum value.
func (s *ServerVariable) WithEnum(val ...string) *ServerVariable {
	s.Enum = val
	return s
}

// WithDefault sets Default value.
func (s *ServerVariable) WithDefault(val string) *ServerVariable {
	s.Default = val
	return s
}

// WithDescription sets Description value.
func (s *ServerVariable) WithDescription(val string) *ServerVariable {
	s.Description = val
	return s
}

// WithExamples sets Examples value.
func (s *ServerVariable) WithExamples(val ...string) *ServerVariable {
	s.Examples = val
	return s
}

// WithMapOfAnything sets MapOfAnything value.
func (s *ServerVariable) WithMapOfAnything(val map[string]interface{}) *ServerVariable {
	s.MapOfAnything = val
	return s
}

// WithMapOfAnythingItem sets MapOfAnything item value.
func (s *ServerVariable) WithMapOfAnythingItem(key string, val interface{}) *ServerVariable {
	if s.MapOfAnything == nil {
		s.MapOfAnything = make(map[string]interface{}, 1)
	}

	s.MapOfAnything[key] = val

	return s
}

type marshalServerVariable ServerVariable

var knownKeysServerVariable = []string{
	"enum",
	"default",
	"description",
	"examples",
}

// UnmarshalJSON decodes JSON.
func (s *ServerVariable) UnmarshalJSON(data []byte) error {
	var err error

	ms := marshalServerVariable(*s)

	err = json.Unmarshal(data, &ms)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysServerVariable {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if ms.MapOfAnything == nil {
				ms.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			ms.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in ServerVariable: %v", offendingKeys)
	}

	*s = ServerVariable(ms)

	return nil
}

// MarshalJSON encodes JSON.
func (s ServerVariable) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalServerVariable(s), s.MapOfAnything)
}

// ServerBindingsObject structure is generated from "http://asyncapi.com/definitions/2.4.0/bindingsObject.json".
type ServerBindingsObject struct {
	HTTP                 *interface{}           `json:"http,omitempty"`
	Ws                   *interface{}           `json:"ws,omitempty"`
	Amqp                 *interface{}           `json:"amqp,omitempty"`
	Amqp1                *interface{}           `json:"amqp1,omitempty"`
	Mqtt                 *interface{}           `json:"mqtt,omitempty"`
	Mqtt5                *interface{}           `json:"mqtt5,omitempty"`
	Kafka                *interface{}           `json:"kafka,omitempty"`
	Anypointmq           *interface{}           `json:"anypointmq,omitempty"`
	Nats                 *interface{}           `json:"nats,omitempty"`
	Jms                  *interface{}           `json:"jms,omitempty"`
	Sns                  *interface{}           `json:"sns,omitempty"`
	Sqs                  *interface{}           `json:"sqs,omitempty"`
	Stomp                *interface{}           `json:"stomp,omitempty"`
	Redis                *interface{}           `json:"redis,omitempty"`
	Ibmmq                *interface{}           `json:"ibmmq,omitempty"`
	Solace               *interface{}           `json:"solace,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"` // All unmatched properties.
}

// WithHTTP sets HTTP value.
func (s *ServerBindingsObject) WithHTTP(val interface{}) *ServerBindingsObject {
	s.HTTP = &val
	return s
}

// WithWs sets Ws value.
func (s *ServerBindingsObject) WithWs(val interface{}) *ServerBindingsObject {
	s.Ws = &val
	return s
}

// WithAmqp sets Amqp value.
func (s *ServerBindingsObject) WithAmqp(val interface{}) *ServerBindingsObject {
	s.Amqp = &val
	return s
}

// WithAmqp1 sets Amqp1 value.
func (s *ServerBindingsObject) WithAmqp1(val interface{}) *ServerBindingsObject {
	s.Amqp1 = &val
	return s
}

// WithMqtt sets Mqtt value.
func (s *ServerBindingsObject) WithMqtt(val interface{}) *ServerBindingsObject {
	s.Mqtt = &val
	return s
}

// WithMqtt5 sets Mqtt5 value.
func (s *ServerBindingsObject) WithMqtt5(val interface{}) *ServerBindingsObject {
	s.Mqtt5 = &val
	return s
}

// WithKafka sets Kafka value.
func (s *ServerBindingsObject) WithKafka(val interface{}) *ServerBindingsObject {
	s.Kafka = &val
	return s
}

// WithAnypointmq sets Anypointmq value.
func (s *ServerBindingsObject) WithAnypointmq(val interface{}) *ServerBindingsObject {
	s.Anypointmq = &val
	return s
}

// WithNats sets Nats value.
func (s *ServerBindingsObject) WithNats(val interface{}) *ServerBindingsObject {
	s.Nats = &val
	return s
}

// WithJms sets Jms value.
func (s *ServerBindingsObject) WithJms(val interface{}) *ServerBindingsObject {
	s.Jms = &val
	return s
}

// WithSns sets Sns value.
func (s *ServerBindingsObject) WithSns(val interface{}) *ServerBindingsObject {
	s.Sns = &val
	return s
}

// WithSqs sets Sqs value.
func (s *ServerBindingsObject) WithSqs(val interface{}) *ServerBindingsObject {
	s.Sqs = &val
	return s
}

// WithStomp sets Stomp value.
func (s *ServerBindingsObject) WithStomp(val interface{}) *ServerBindingsObject {
	s.Stomp = &val
	return s
}

// WithRedis sets Redis value.
func (s *ServerBindingsObject) WithRedis(val interface{}) *ServerBindingsObject {
	s.Redis = &val
	return s
}

// WithIbmmq sets Ibmmq value.
func (s *ServerBindingsObject) WithIbmmq(val interface{}) *ServerBindingsObject {
	s.Ibmmq = &val
	return s
}

// WithSolace sets Solace value.
func (s *ServerBindingsObject) WithSolace(val interface{}) *ServerBindingsObject {
	s.Solace = &val
	return s
}

// WithAdditionalProperties sets AdditionalProperties value.
func (s *ServerBindingsObject) WithAdditionalProperties(val map[string]interface{}) *ServerBindingsObject {
	s.AdditionalProperties = val
	return s
}

// WithAdditionalPropertiesItem sets AdditionalProperties item value.
func (s *ServerBindingsObject) WithAdditionalPropertiesItem(key string, val interface{}) *ServerBindingsObject {
	if s.AdditionalProperties == nil {
		s.AdditionalProperties = make(map[string]interface{}, 1)
	}

	s.AdditionalProperties[key] = val

	return s
}

type marshalServerBindingsObject ServerBindingsObject

var knownKeysServerBindingsObject = []string{
	"http",
	"ws",
	"amqp",
	"amqp1",
	"mqtt",
	"mqtt5",
	"kafka",
	"anypointmq",
	"nats",
	"jms",
	"sns",
	"sqs",
	"stomp",
	"redis",
	"ibmmq",
	"solace",
}

// UnmarshalJSON decodes JSON.
func (s *ServerBindingsObject) UnmarshalJSON(data []byte) error {
	var err error

	ms := marshalServerBindingsObject(*s)

	err = json.Unmarshal(data, &ms)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	if ms.HTTP == nil {
		if _, ok := rawMap["http"]; ok {
			var v interface{}
			ms.HTTP = &v
		}
	}

	if ms.Ws == nil {
		if _, ok := rawMap["ws"]; ok {
			var v interface{}
			ms.Ws = &v
		}
	}

	if ms.Amqp == nil {
		if _, ok := rawMap["amqp"]; ok {
			var v interface{}
			ms.Amqp = &v
		}
	}

	if ms.Amqp1 == nil {
		if _, ok := rawMap["amqp1"]; ok {
			var v interface{}
			ms.Amqp1 = &v
		}
	}

	if ms.Mqtt == nil {
		if _, ok := rawMap["mqtt"]; ok {
			var v interface{}
			ms.Mqtt = &v
		}
	}

	if ms.Mqtt5 == nil {
		if _, ok := rawMap["mqtt5"]; ok {
			var v interface{}
			ms.Mqtt5 = &v
		}
	}

	if ms.Kafka == nil {
		if _, ok := rawMap["kafka"]; ok {
			var v interface{}
			ms.Kafka = &v
		}
	}

	if ms.Anypointmq == nil {
		if _, ok := rawMap["anypointmq"]; ok {
			var v interface{}
			ms.Anypointmq = &v
		}
	}

	if ms.Nats == nil {
		if _, ok := rawMap["nats"]; ok {
			var v interface{}
			ms.Nats = &v
		}
	}

	if ms.Jms == nil {
		if _, ok := rawMap["jms"]; ok {
			var v interface{}
			ms.Jms = &v
		}
	}

	if ms.Sns == nil {
		if _, ok := rawMap["sns"]; ok {
			var v interface{}
			ms.Sns = &v
		}
	}

	if ms.Sqs == nil {
		if _, ok := rawMap["sqs"]; ok {
			var v interface{}
			ms.Sqs = &v
		}
	}

	if ms.Stomp == nil {
		if _, ok := rawMap["stomp"]; ok {
			var v interface{}
			ms.Stomp = &v
		}
	}

	if ms.Redis == nil {
		if _, ok := rawMap["redis"]; ok {
			var v interface{}
			ms.Redis = &v
		}
	}

	if ms.Ibmmq == nil {
		if _, ok := rawMap["ibmmq"]; ok {
			var v interface{}
			ms.Ibmmq = &v
		}
	}

	if ms.Solace == nil {
		if _, ok := rawMap["solace"]; ok {
			var v interface{}
			ms.Solace = &v
		}
	}

	for _, key := range knownKeysServerBindingsObject {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if ms.AdditionalProperties == nil {
			ms.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ms.AdditionalProperties[key] = val
	}

	*s = ServerBindingsObject(ms)

	return nil
}

// MarshalJSON encodes JSON.
func (s ServerBindingsObject) MarshalJSON() ([]byte, error) {
	if len(s.AdditionalProperties) == 0 {
		return json.Marshal(marshalServerBindingsObject(s))
	}

	return marshalUnion(marshalServerBindingsObject(s), s.AdditionalProperties)
}

// Servers structure is generated from "http://asyncapi.com/definitions/2.4.0/servers.json->additionalProperties".
type Servers struct {
	HTTPAsyncapiComDefinitions240ReferenceJSON *Reference `json:"-"`
	HTTPAsyncapiComDefinitions240ServerJSON    *Server    `json:"-"`
}

// WithHTTPAsyncapiComDefinitions240ReferenceJSON sets HTTPAsyncapiComDefinitions240ReferenceJSON value.
func (s *Servers) WithHTTPAsyncapiComDefinitions240ReferenceJSON(val Reference) *Servers {
	s.HTTPAsyncapiComDefinitions240ReferenceJSON = &val
	return s
}

// HTTPAsyncapiComDefinitions240ReferenceJSONEns ensures returned HTTPAsyncapiComDefinitions240ReferenceJSON is not nil.
func (s *Servers) HTTPAsyncapiComDefinitions240ReferenceJSONEns() *Reference {
	if s.HTTPAsyncapiComDefinitions240ReferenceJSON == nil {
		s.HTTPAsyncapiComDefinitions240ReferenceJSON = new(Reference)
	}

	return s.HTTPAsyncapiComDefinitions240ReferenceJSON
}

// WithHTTPAsyncapiComDefinitions240ServerJSON sets HTTPAsyncapiComDefinitions240ServerJSON value.
func (s *Servers) WithHTTPAsyncapiComDefinitions240ServerJSON(val Server) *Servers {
	s.HTTPAsyncapiComDefinitions240ServerJSON = &val
	return s
}

// HTTPAsyncapiComDefinitions240ServerJSONEns ensures returned HTTPAsyncapiComDefinitions240ServerJSON is not nil.
func (s *Servers) HTTPAsyncapiComDefinitions240ServerJSONEns() *Server {
	if s.HTTPAsyncapiComDefinitions240ServerJSON == nil {
		s.HTTPAsyncapiComDefinitions240ServerJSON = new(Server)
	}

	return s.HTTPAsyncapiComDefinitions240ServerJSON
}

// UnmarshalJSON decodes JSON.
func (s *Servers) UnmarshalJSON(data []byte) error {
	var err error

	oneOfErrors := make(map[string]error, 2)
	oneOfValid := 0

	err = json.Unmarshal(data, &s.HTTPAsyncapiComDefinitions240ReferenceJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240ReferenceJSON"] = err
		s.HTTPAsyncapiComDefinitions240ReferenceJSON = nil
	} else {
		oneOfValid++
	}

	err = json.Unmarshal(data, &s.HTTPAsyncapiComDefinitions240ServerJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240ServerJSON"] = err
		s.HTTPAsyncapiComDefinitions240ServerJSON = nil
	} else {
		oneOfValid++
	}

	if oneOfValid != 1 {
		return fmt.Errorf("oneOf constraint failed for Servers with %d valid results: %v", oneOfValid, oneOfErrors)
	}

	return nil
}

// MarshalJSON encodes JSON.
func (s Servers) MarshalJSON() ([]byte, error) {
	return marshalUnion(s.HTTPAsyncapiComDefinitions240ReferenceJSON, s.HTTPAsyncapiComDefinitions240ServerJSON)
}

// ChannelItem structure is generated from "http://asyncapi.com/definitions/2.4.0/channelItem.json".
type ChannelItem struct {
	Ref           string                 `json:"$ref,omitempty"` // Format: uri-reference.
	Parameters    map[string]Parameter   `json:"parameters,omitempty"`
	Description   string                 `json:"description,omitempty"` // A description of the channel.
	Servers       []string               `json:"servers,omitempty"`     // The names of the servers on which this channel is available. If absent or empty then this channel must be available on all servers.
	Publish       *Operation             `json:"publish,omitempty"`
	Subscribe     *Operation             `json:"subscribe,omitempty"`
	Deprecated    bool                   `json:"deprecated,omitempty"`
	Bindings      *ServerBindingsObject  `json:"bindings,omitempty"`
	MapOfAnything map[string]interface{} `json:"-"` // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

// WithRef sets Ref value.
func (c *ChannelItem) WithRef(val string) *ChannelItem {
	c.Ref = val
	return c
}

// WithParameters sets Parameters value.
func (c *ChannelItem) WithParameters(val map[string]Parameter) *ChannelItem {
	c.Parameters = val
	return c
}

// WithParametersItem sets Parameters item value.
func (c *ChannelItem) WithParametersItem(key string, val Parameter) *ChannelItem {
	if c.Parameters == nil {
		c.Parameters = make(map[string]Parameter, 1)
	}

	c.Parameters[key] = val

	return c
}

// WithDescription sets Description value.
func (c *ChannelItem) WithDescription(val string) *ChannelItem {
	c.Description = val
	return c
}

// WithServers sets Servers value.
func (c *ChannelItem) WithServers(val ...string) *ChannelItem {
	c.Servers = val
	return c
}

// WithPublish sets Publish value.
func (c *ChannelItem) WithPublish(val Operation) *ChannelItem {
	c.Publish = &val
	return c
}

// PublishEns ensures returned Publish is not nil.
func (c *ChannelItem) PublishEns() *Operation {
	if c.Publish == nil {
		c.Publish = new(Operation)
	}

	return c.Publish
}

// WithSubscribe sets Subscribe value.
func (c *ChannelItem) WithSubscribe(val Operation) *ChannelItem {
	c.Subscribe = &val
	return c
}

// SubscribeEns ensures returned Subscribe is not nil.
func (c *ChannelItem) SubscribeEns() *Operation {
	if c.Subscribe == nil {
		c.Subscribe = new(Operation)
	}

	return c.Subscribe
}

// WithDeprecated sets Deprecated value.
func (c *ChannelItem) WithDeprecated(val bool) *ChannelItem {
	c.Deprecated = val
	return c
}

// WithBindings sets Bindings value.
func (c *ChannelItem) WithBindings(val ServerBindingsObject) *ChannelItem {
	c.Bindings = &val
	return c
}

// BindingsEns ensures returned Bindings is not nil.
func (c *ChannelItem) BindingsEns() *ServerBindingsObject {
	if c.Bindings == nil {
		c.Bindings = new(ServerBindingsObject)
	}

	return c.Bindings
}

// WithMapOfAnything sets MapOfAnything value.
func (c *ChannelItem) WithMapOfAnything(val map[string]interface{}) *ChannelItem {
	c.MapOfAnything = val
	return c
}

// WithMapOfAnythingItem sets MapOfAnything item value.
func (c *ChannelItem) WithMapOfAnythingItem(key string, val interface{}) *ChannelItem {
	if c.MapOfAnything == nil {
		c.MapOfAnything = make(map[string]interface{}, 1)
	}

	c.MapOfAnything[key] = val

	return c
}

type marshalChannelItem ChannelItem

var knownKeysChannelItem = []string{
	"$ref",
	"parameters",
	"description",
	"servers",
	"publish",
	"subscribe",
	"deprecated",
	"bindings",
}

// UnmarshalJSON decodes JSON.
func (c *ChannelItem) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalChannelItem(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysChannelItem {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if mc.MapOfAnything == nil {
				mc.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			mc.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in ChannelItem: %v", offendingKeys)
	}

	*c = ChannelItem(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c ChannelItem) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalChannelItem(c), c.MapOfAnything)
}

// Parameter structure is generated from "http://asyncapi.com/definitions/2.4.0/parameter.json".
type Parameter struct {
	Description string                 `json:"description,omitempty"` // A brief description of the parameter. This could contain examples of use. GitHub Flavored Markdown is allowed.
	Schema      map[string]interface{} `json:"schema,omitempty"`
	// A runtime expression that specifies the location of the parameter value.
	// Value must match pattern: `^\$message\.(header|payload)#(\/(([^\/~])|(~[01]))*)*`.
	Location      string                 `json:"location,omitempty"`
	Ref           string                 `json:"$ref,omitempty"` // Format: uri-reference.
	MapOfAnything map[string]interface{} `json:"-"`              // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

// WithDescription sets Description value.
func (p *Parameter) WithDescription(val string) *Parameter {
	p.Description = val
	return p
}

// WithSchema sets Schema value.
func (p *Parameter) WithSchema(val map[string]interface{}) *Parameter {
	p.Schema = val
	return p
}

// WithSchemaItem sets Schema item value.
func (p *Parameter) WithSchemaItem(key string, val interface{}) *Parameter {
	if p.Schema == nil {
		p.Schema = make(map[string]interface{}, 1)
	}

	p.Schema[key] = val

	return p
}

// WithLocation sets Location value.
func (p *Parameter) WithLocation(val string) *Parameter {
	p.Location = val
	return p
}

// WithRef sets Ref value.
func (p *Parameter) WithRef(val string) *Parameter {
	p.Ref = val
	return p
}

// WithMapOfAnything sets MapOfAnything value.
func (p *Parameter) WithMapOfAnything(val map[string]interface{}) *Parameter {
	p.MapOfAnything = val
	return p
}

// WithMapOfAnythingItem sets MapOfAnything item value.
func (p *Parameter) WithMapOfAnythingItem(key string, val interface{}) *Parameter {
	if p.MapOfAnything == nil {
		p.MapOfAnything = make(map[string]interface{}, 1)
	}

	p.MapOfAnything[key] = val

	return p
}

type marshalParameter Parameter

var knownKeysParameter = []string{
	"description",
	"schema",
	"location",
	"$ref",
}

// UnmarshalJSON decodes JSON.
func (p *Parameter) UnmarshalJSON(data []byte) error {
	var err error

	mp := marshalParameter(*p)

	err = json.Unmarshal(data, &mp)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysParameter {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if mp.MapOfAnything == nil {
				mp.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			mp.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in Parameter: %v", offendingKeys)
	}

	*p = Parameter(mp)

	return nil
}

// MarshalJSON encodes JSON.
func (p Parameter) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalParameter(p), p.MapOfAnything)
}

// Operation structure is generated from "http://asyncapi.com/definitions/2.4.0/operation.json".
type Operation struct {
	Traits        []OperationTraitsItems `json:"traits,omitempty"`
	Summary       string                 `json:"summary,omitempty"`
	Description   string                 `json:"description,omitempty"`
	Security      []map[string][]string  `json:"security,omitempty"`
	Tags          []Tag                  `json:"tags,omitempty"`
	ExternalDocs  *ExternalDocs          `json:"externalDocs,omitempty"` // Information about external documentation.
	ID            string                 `json:"operationId,omitempty"`
	Bindings      *ServerBindingsObject  `json:"bindings,omitempty"`
	Message       *Message               `json:"message,omitempty"`
	MapOfAnything map[string]interface{} `json:"-"` // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

// WithTraits sets Traits value.
func (o *Operation) WithTraits(val ...OperationTraitsItems) *Operation {
	o.Traits = val
	return o
}

// WithSummary sets Summary value.
func (o *Operation) WithSummary(val string) *Operation {
	o.Summary = val
	return o
}

// WithDescription sets Description value.
func (o *Operation) WithDescription(val string) *Operation {
	o.Description = val
	return o
}

// WithSecurity sets Security value.
func (o *Operation) WithSecurity(val ...map[string][]string) *Operation {
	o.Security = val
	return o
}

// WithTags sets Tags value.
func (o *Operation) WithTags(val ...Tag) *Operation {
	o.Tags = val
	return o
}

// WithExternalDocs sets ExternalDocs value.
func (o *Operation) WithExternalDocs(val ExternalDocs) *Operation {
	o.ExternalDocs = &val
	return o
}

// ExternalDocsEns ensures returned ExternalDocs is not nil.
func (o *Operation) ExternalDocsEns() *ExternalDocs {
	if o.ExternalDocs == nil {
		o.ExternalDocs = new(ExternalDocs)
	}

	return o.ExternalDocs
}

// WithID sets ID value.
func (o *Operation) WithID(val string) *Operation {
	o.ID = val
	return o
}

// WithBindings sets Bindings value.
func (o *Operation) WithBindings(val ServerBindingsObject) *Operation {
	o.Bindings = &val
	return o
}

// BindingsEns ensures returned Bindings is not nil.
func (o *Operation) BindingsEns() *ServerBindingsObject {
	if o.Bindings == nil {
		o.Bindings = new(ServerBindingsObject)
	}

	return o.Bindings
}

// WithMessage sets Message value.
func (o *Operation) WithMessage(val Message) *Operation {
	o.Message = &val
	return o
}

// MessageEns ensures returned Message is not nil.
func (o *Operation) MessageEns() *Message {
	if o.Message == nil {
		o.Message = new(Message)
	}

	return o.Message
}

// WithMapOfAnything sets MapOfAnything value.
func (o *Operation) WithMapOfAnything(val map[string]interface{}) *Operation {
	o.MapOfAnything = val
	return o
}

// WithMapOfAnythingItem sets MapOfAnything item value.
func (o *Operation) WithMapOfAnythingItem(key string, val interface{}) *Operation {
	if o.MapOfAnything == nil {
		o.MapOfAnything = make(map[string]interface{}, 1)
	}

	o.MapOfAnything[key] = val

	return o
}

type marshalOperation Operation

var knownKeysOperation = []string{
	"traits",
	"summary",
	"description",
	"security",
	"tags",
	"externalDocs",
	"operationId",
	"bindings",
	"message",
}

// UnmarshalJSON decodes JSON.
func (o *Operation) UnmarshalJSON(data []byte) error {
	var err error

	mo := marshalOperation(*o)

	err = json.Unmarshal(data, &mo)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysOperation {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if mo.MapOfAnything == nil {
				mo.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			mo.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in Operation: %v", offendingKeys)
	}

	*o = Operation(mo)

	return nil
}

// MarshalJSON encodes JSON.
func (o Operation) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalOperation(o), o.MapOfAnything)
}

// OperationTrait structure is generated from "http://asyncapi.com/definitions/2.4.0/operationTrait.json".
type OperationTrait struct {
	Summary       string                 `json:"summary,omitempty"`
	Description   string                 `json:"description,omitempty"`
	Tags          []Tag                  `json:"tags,omitempty"`
	ExternalDocs  *ExternalDocs          `json:"externalDocs,omitempty"` // Information about external documentation.
	OperationID   string                 `json:"operationId,omitempty"`
	Security      []map[string][]string  `json:"security,omitempty"`
	Bindings      *ServerBindingsObject  `json:"bindings,omitempty"`
	MapOfAnything map[string]interface{} `json:"-"` // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

// WithSummary sets Summary value.
func (o *OperationTrait) WithSummary(val string) *OperationTrait {
	o.Summary = val
	return o
}

// WithDescription sets Description value.
func (o *OperationTrait) WithDescription(val string) *OperationTrait {
	o.Description = val
	return o
}

// WithTags sets Tags value.
func (o *OperationTrait) WithTags(val ...Tag) *OperationTrait {
	o.Tags = val
	return o
}

// WithExternalDocs sets ExternalDocs value.
func (o *OperationTrait) WithExternalDocs(val ExternalDocs) *OperationTrait {
	o.ExternalDocs = &val
	return o
}

// ExternalDocsEns ensures returned ExternalDocs is not nil.
func (o *OperationTrait) ExternalDocsEns() *ExternalDocs {
	if o.ExternalDocs == nil {
		o.ExternalDocs = new(ExternalDocs)
	}

	return o.ExternalDocs
}

// WithOperationID sets OperationID value.
func (o *OperationTrait) WithOperationID(val string) *OperationTrait {
	o.OperationID = val
	return o
}

// WithSecurity sets Security value.
func (o *OperationTrait) WithSecurity(val ...map[string][]string) *OperationTrait {
	o.Security = val
	return o
}

// WithBindings sets Bindings value.
func (o *OperationTrait) WithBindings(val ServerBindingsObject) *OperationTrait {
	o.Bindings = &val
	return o
}

// BindingsEns ensures returned Bindings is not nil.
func (o *OperationTrait) BindingsEns() *ServerBindingsObject {
	if o.Bindings == nil {
		o.Bindings = new(ServerBindingsObject)
	}

	return o.Bindings
}

// WithMapOfAnything sets MapOfAnything value.
func (o *OperationTrait) WithMapOfAnything(val map[string]interface{}) *OperationTrait {
	o.MapOfAnything = val
	return o
}

// WithMapOfAnythingItem sets MapOfAnything item value.
func (o *OperationTrait) WithMapOfAnythingItem(key string, val interface{}) *OperationTrait {
	if o.MapOfAnything == nil {
		o.MapOfAnything = make(map[string]interface{}, 1)
	}

	o.MapOfAnything[key] = val

	return o
}

type marshalOperationTrait OperationTrait

var knownKeysOperationTrait = []string{
	"summary",
	"description",
	"tags",
	"externalDocs",
	"operationId",
	"security",
	"bindings",
}

// UnmarshalJSON decodes JSON.
func (o *OperationTrait) UnmarshalJSON(data []byte) error {
	var err error

	mo := marshalOperationTrait(*o)

	err = json.Unmarshal(data, &mo)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysOperationTrait {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if mo.MapOfAnything == nil {
				mo.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			mo.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in OperationTrait: %v", offendingKeys)
	}

	*o = OperationTrait(mo)

	return nil
}

// MarshalJSON encodes JSON.
func (o OperationTrait) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalOperationTrait(o), o.MapOfAnything)
}

// Tag structure is generated from "http://asyncapi.com/definitions/2.4.0/tag.json".
type Tag struct {
	Name          string                 `json:"name"` // Required.
	Description   string                 `json:"description,omitempty"`
	ExternalDocs  *ExternalDocs          `json:"externalDocs,omitempty"` // Information about external documentation.
	MapOfAnything map[string]interface{} `json:"-"`                      // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

// WithName sets Name value.
func (t *Tag) WithName(val string) *Tag {
	t.Name = val
	return t
}

// WithDescription sets Description value.
func (t *Tag) WithDescription(val string) *Tag {
	t.Description = val
	return t
}

// WithExternalDocs sets ExternalDocs value.
func (t *Tag) WithExternalDocs(val ExternalDocs) *Tag {
	t.ExternalDocs = &val
	return t
}

// ExternalDocsEns ensures returned ExternalDocs is not nil.
func (t *Tag) ExternalDocsEns() *ExternalDocs {
	if t.ExternalDocs == nil {
		t.ExternalDocs = new(ExternalDocs)
	}

	return t.ExternalDocs
}

// WithMapOfAnything sets MapOfAnything value.
func (t *Tag) WithMapOfAnything(val map[string]interface{}) *Tag {
	t.MapOfAnything = val
	return t
}

// WithMapOfAnythingItem sets MapOfAnything item value.
func (t *Tag) WithMapOfAnythingItem(key string, val interface{}) *Tag {
	if t.MapOfAnything == nil {
		t.MapOfAnything = make(map[string]interface{}, 1)
	}

	t.MapOfAnything[key] = val

	return t
}

type marshalTag Tag

var knownKeysTag = []string{
	"name",
	"description",
	"externalDocs",
}

var requireKeysTag = []string{
	"name",
}

// UnmarshalJSON decodes JSON.
func (t *Tag) UnmarshalJSON(data []byte) error {
	var err error

	mt := marshalTag(*t)

	err = json.Unmarshal(data, &mt)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range requireKeysTag {
		if _, found := rawMap[key]; !found {
			return errors.New("required key missing: " + key)
		}
	}

	for _, key := range knownKeysTag {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if mt.MapOfAnything == nil {
				mt.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			mt.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in Tag: %v", offendingKeys)
	}

	*t = Tag(mt)

	return nil
}

// MarshalJSON encodes JSON.
func (t Tag) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalTag(t), t.MapOfAnything)
}

// ExternalDocs structure is generated from "http://asyncapi.com/definitions/2.4.0/externalDocs.json".
//
// information about external documentation.
type ExternalDocs struct {
	Description string `json:"description,omitempty"`
	// Format: uri.
	// Required.
	URL           string                 `json:"url"`
	MapOfAnything map[string]interface{} `json:"-"` // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

// WithDescription sets Description value.
func (e *ExternalDocs) WithDescription(val string) *ExternalDocs {
	e.Description = val
	return e
}

// WithURL sets URL value.
func (e *ExternalDocs) WithURL(val string) *ExternalDocs {
	e.URL = val
	return e
}

// WithMapOfAnything sets MapOfAnything value.
func (e *ExternalDocs) WithMapOfAnything(val map[string]interface{}) *ExternalDocs {
	e.MapOfAnything = val
	return e
}

// WithMapOfAnythingItem sets MapOfAnything item value.
func (e *ExternalDocs) WithMapOfAnythingItem(key string, val interface{}) *ExternalDocs {
	if e.MapOfAnything == nil {
		e.MapOfAnything = make(map[string]interface{}, 1)
	}

	e.MapOfAnything[key] = val

	return e
}

type marshalExternalDocs ExternalDocs

var knownKeysExternalDocs = []string{
	"description",
	"url",
}

var requireKeysExternalDocs = []string{
	"url",
}

// UnmarshalJSON decodes JSON.
func (e *ExternalDocs) UnmarshalJSON(data []byte) error {
	var err error

	me := marshalExternalDocs(*e)

	err = json.Unmarshal(data, &me)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range requireKeysExternalDocs {
		if _, found := rawMap[key]; !found {
			return errors.New("required key missing: " + key)
		}
	}

	for _, key := range knownKeysExternalDocs {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if me.MapOfAnything == nil {
				me.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			me.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in ExternalDocs: %v", offendingKeys)
	}

	*e = ExternalDocs(me)

	return nil
}

// MarshalJSON encodes JSON.
func (e ExternalDocs) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalExternalDocs(e), e.MapOfAnything)
}

// OperationTraitsItems structure is generated from "http://asyncapi.com/definitions/2.4.0/operation.json->traits->items".
type OperationTraitsItems struct {
	HTTPAsyncapiComDefinitions240ReferenceJSON      *Reference      `json:"-"`
	HTTPAsyncapiComDefinitions240OperationTraitJSON *OperationTrait `json:"-"`
	SliceOfAnything                                 []interface{}   `json:"-"`
}

// WithHTTPAsyncapiComDefinitions240ReferenceJSON sets HTTPAsyncapiComDefinitions240ReferenceJSON value.
func (o *OperationTraitsItems) WithHTTPAsyncapiComDefinitions240ReferenceJSON(val Reference) *OperationTraitsItems {
	o.HTTPAsyncapiComDefinitions240ReferenceJSON = &val
	return o
}

// HTTPAsyncapiComDefinitions240ReferenceJSONEns ensures returned HTTPAsyncapiComDefinitions240ReferenceJSON is not nil.
func (o *OperationTraitsItems) HTTPAsyncapiComDefinitions240ReferenceJSONEns() *Reference {
	if o.HTTPAsyncapiComDefinitions240ReferenceJSON == nil {
		o.HTTPAsyncapiComDefinitions240ReferenceJSON = new(Reference)
	}

	return o.HTTPAsyncapiComDefinitions240ReferenceJSON
}

// WithHTTPAsyncapiComDefinitions240OperationTraitJSON sets HTTPAsyncapiComDefinitions240OperationTraitJSON value.
func (o *OperationTraitsItems) WithHTTPAsyncapiComDefinitions240OperationTraitJSON(val OperationTrait) *OperationTraitsItems {
	o.HTTPAsyncapiComDefinitions240OperationTraitJSON = &val
	return o
}

// HTTPAsyncapiComDefinitions240OperationTraitJSONEns ensures returned HTTPAsyncapiComDefinitions240OperationTraitJSON is not nil.
func (o *OperationTraitsItems) HTTPAsyncapiComDefinitions240OperationTraitJSONEns() *OperationTrait {
	if o.HTTPAsyncapiComDefinitions240OperationTraitJSON == nil {
		o.HTTPAsyncapiComDefinitions240OperationTraitJSON = new(OperationTrait)
	}

	return o.HTTPAsyncapiComDefinitions240OperationTraitJSON
}

// WithSliceOfAnything sets SliceOfAnything value.
func (o *OperationTraitsItems) WithSliceOfAnything(val ...interface{}) *OperationTraitsItems {
	o.SliceOfAnything = val
	return o
}

// UnmarshalJSON decodes JSON.
func (o *OperationTraitsItems) UnmarshalJSON(data []byte) error {
	var err error

	oneOfErrors := make(map[string]error, 3)
	oneOfValid := 0

	err = json.Unmarshal(data, &o.HTTPAsyncapiComDefinitions240ReferenceJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240ReferenceJSON"] = err
		o.HTTPAsyncapiComDefinitions240ReferenceJSON = nil
	} else {
		oneOfValid++
	}

	err = json.Unmarshal(data, &o.HTTPAsyncapiComDefinitions240OperationTraitJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240OperationTraitJSON"] = err
		o.HTTPAsyncapiComDefinitions240OperationTraitJSON = nil
	} else {
		oneOfValid++
	}

	err = json.Unmarshal(data, &o.SliceOfAnything)
	if err != nil {
		oneOfErrors["SliceOfAnything"] = err
		o.SliceOfAnything = nil
	} else {
		oneOfValid++
	}

	if oneOfValid != 1 {
		return fmt.Errorf("oneOf constraint failed for OperationTraitsItems with %d valid results: %v", oneOfValid, oneOfErrors)
	}

	return nil
}

// MarshalJSON encodes JSON.
func (o OperationTraitsItems) MarshalJSON() ([]byte, error) {
	return marshalUnion(o.HTTPAsyncapiComDefinitions240ReferenceJSON, o.HTTPAsyncapiComDefinitions240OperationTraitJSON, o.SliceOfAnything)
}

// HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf0 structure is generated from "http://asyncapi.com/definitions/2.4.0/message.json/oneOf/1/oneOf/0".
type HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf0 struct {
	OneOf []Message `json:"oneOf"` // Required.
}

// WithOneOf sets OneOf value.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf0) WithOneOf(val ...Message) *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf0 {
	h.OneOf = val
	return h
}

type marshalHTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf0 HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf0

var knownKeysHTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf0 = []string{
	"oneOf",
}

var requireKeysHTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf0 = []string{
	"oneOf",
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf0) UnmarshalJSON(data []byte) error {
	var err error

	mh := marshalHTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf0(*h)

	err = json.Unmarshal(data, &mh)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range requireKeysHTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf0 {
		if _, found := rawMap[key]; !found {
			return errors.New("required key missing: " + key)
		}
	}

	for _, key := range knownKeysHTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf0 {
		delete(rawMap, key)
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf0: %v", offendingKeys)
	}

	*h = HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf0(mh)

	return nil
}

// HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1 structure is generated from "http://asyncapi.com/definitions/2.4.0/message.json/oneOf/1/oneOf/1".
type HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1 struct {
	SchemaFormat  string                                                              `json:"schemaFormat,omitempty"`
	ContentType   string                                                              `json:"contentType,omitempty"`
	Headers       *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1Headers        `json:"headers,omitempty"`
	MessageID     string                                                              `json:"messageId,omitempty"`
	Payload       *interface{}                                                        `json:"payload,omitempty"`
	CorrelationID *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1CorrelationID  `json:"correlationId,omitempty"`
	Tags          []Tag                                                               `json:"tags,omitempty"`
	Summary       string                                                              `json:"summary,omitempty"`      // A brief summary of the message.
	Name          string                                                              `json:"name,omitempty"`         // Name of the message.
	Title         string                                                              `json:"title,omitempty"`        // A human-friendly title for the message.
	Description   string                                                              `json:"description,omitempty"`  // A longer description of the message. CommonMark is allowed.
	ExternalDocs  *ExternalDocs                                                       `json:"externalDocs,omitempty"` // Information about external documentation.
	Deprecated    bool                                                                `json:"deprecated,omitempty"`
	Examples      []HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1ExamplesItems `json:"examples,omitempty"`
	Bindings      *ServerBindingsObject                                               `json:"bindings,omitempty"`
	Traits        []HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1TraitsItems   `json:"traits,omitempty"`
	MapOfAnything map[string]interface{}                                              `json:"-"` // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

// WithSchemaFormat sets SchemaFormat value.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1) WithSchemaFormat(val string) *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1 {
	h.SchemaFormat = val
	return h
}

// WithContentType sets ContentType value.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1) WithContentType(val string) *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1 {
	h.ContentType = val
	return h
}

// WithHeaders sets Headers value.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1) WithHeaders(val HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1Headers) *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1 {
	h.Headers = &val
	return h
}

// HeadersEns ensures returned Headers is not nil.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1) HeadersEns() *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1Headers {
	if h.Headers == nil {
		h.Headers = new(HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1Headers)
	}

	return h.Headers
}

// WithMessageID sets MessageID value.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1) WithMessageID(val string) *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1 {
	h.MessageID = val
	return h
}

// WithPayload sets Payload value.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1) WithPayload(val interface{}) *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1 {
	h.Payload = &val
	return h
}

// WithCorrelationID sets CorrelationID value.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1) WithCorrelationID(val HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1CorrelationID) *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1 {
	h.CorrelationID = &val
	return h
}

// CorrelationIDEns ensures returned CorrelationID is not nil.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1) CorrelationIDEns() *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1CorrelationID {
	if h.CorrelationID == nil {
		h.CorrelationID = new(HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1CorrelationID)
	}

	return h.CorrelationID
}

// WithTags sets Tags value.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1) WithTags(val ...Tag) *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1 {
	h.Tags = val
	return h
}

// WithSummary sets Summary value.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1) WithSummary(val string) *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1 {
	h.Summary = val
	return h
}

// WithName sets Name value.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1) WithName(val string) *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1 {
	h.Name = val
	return h
}

// WithTitle sets Title value.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1) WithTitle(val string) *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1 {
	h.Title = val
	return h
}

// WithDescription sets Description value.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1) WithDescription(val string) *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1 {
	h.Description = val
	return h
}

// WithExternalDocs sets ExternalDocs value.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1) WithExternalDocs(val ExternalDocs) *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1 {
	h.ExternalDocs = &val
	return h
}

// ExternalDocsEns ensures returned ExternalDocs is not nil.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1) ExternalDocsEns() *ExternalDocs {
	if h.ExternalDocs == nil {
		h.ExternalDocs = new(ExternalDocs)
	}

	return h.ExternalDocs
}

// WithDeprecated sets Deprecated value.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1) WithDeprecated(val bool) *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1 {
	h.Deprecated = val
	return h
}

// WithExamples sets Examples value.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1) WithExamples(val ...HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1ExamplesItems) *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1 {
	h.Examples = val
	return h
}

// WithBindings sets Bindings value.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1) WithBindings(val ServerBindingsObject) *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1 {
	h.Bindings = &val
	return h
}

// BindingsEns ensures returned Bindings is not nil.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1) BindingsEns() *ServerBindingsObject {
	if h.Bindings == nil {
		h.Bindings = new(ServerBindingsObject)
	}

	return h.Bindings
}

// WithTraits sets Traits value.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1) WithTraits(val ...HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1TraitsItems) *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1 {
	h.Traits = val
	return h
}

// WithMapOfAnything sets MapOfAnything value.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1) WithMapOfAnything(val map[string]interface{}) *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1 {
	h.MapOfAnything = val
	return h
}

// WithMapOfAnythingItem sets MapOfAnything item value.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1) WithMapOfAnythingItem(key string, val interface{}) *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1 {
	if h.MapOfAnything == nil {
		h.MapOfAnything = make(map[string]interface{}, 1)
	}

	h.MapOfAnything[key] = val

	return h
}

type marshalHTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1 HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1

var knownKeysHTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1 = []string{
	"schemaFormat",
	"contentType",
	"headers",
	"messageId",
	"payload",
	"correlationId",
	"tags",
	"summary",
	"name",
	"title",
	"description",
	"externalDocs",
	"deprecated",
	"examples",
	"bindings",
	"traits",
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1) UnmarshalJSON(data []byte) error {
	var err error

	mh := marshalHTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1(*h)

	err = json.Unmarshal(data, &mh)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	if mh.Payload == nil {
		if _, ok := rawMap["payload"]; ok {
			var v interface{}
			mh.Payload = &v
		}
	}

	for _, key := range knownKeysHTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1 {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if mh.MapOfAnything == nil {
				mh.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			mh.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1: %v", offendingKeys)
	}

	*h = HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1(mh)

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalHTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1(h), h.MapOfAnything)
}

// JSONSchema structure is generated from "jsonSchema".
//
// Core schema meta-schema.
type JSONSchema struct {
	ID                   string                                                `json:"id,omitempty"`      // Format: uri.
	Schema               string                                                `json:"$schema,omitempty"` // Format: uri.
	Title                string                                                `json:"title,omitempty"`
	Description          string                                                `json:"description,omitempty"`
	Default              *interface{}                                          `json:"default,omitempty"`
	MultipleOf           float64                                               `json:"multipleOf,omitempty"`
	Maximum              float64                                               `json:"maximum,omitempty"`
	ExclusiveMaximum     *JSONSchemaExclusiveMaximum                           `json:"exclusiveMaximum,omitempty"`
	Minimum              float64                                               `json:"minimum,omitempty"`
	ExclusiveMinimum     *JSONSchemaExclusiveMinimum                           `json:"exclusiveMinimum,omitempty"`
	MaxLength            int64                                                 `json:"maxLength,omitempty"`
	MinLength            int64                                                 `json:"minLength,omitempty"`
	Pattern              string                                                `json:"pattern,omitempty"` // Format: regex.
	TypeObject           *JSONSchema                                           `json:"-"`
	TypeBoolean          *bool                                                 `json:"-"`
	AdditionalItems      *JSONSchemaAdditionalItems                            `json:"additionalItems,omitempty"`
	Items                *JSONSchemaItems                                      `json:"items,omitempty"`
	MaxItems             int64                                                 `json:"maxItems,omitempty"`
	MinItems             int64                                                 `json:"minItems,omitempty"`
	UniqueItems          bool                                                  `json:"uniqueItems,omitempty"`
	MaxProperties        int64                                                 `json:"maxProperties,omitempty"`
	MinProperties        int64                                                 `json:"minProperties,omitempty"`
	Required             []string                                              `json:"required,omitempty"`
	AdditionalProperties *JSONSchemaAdditionalProperties                       `json:"additionalProperties,omitempty"`
	Definitions          map[string]interface{}                                `json:"definitions,omitempty"`
	Properties           map[string]interface{}                                `json:"properties,omitempty"`
	PatternProperties    map[string]interface{}                                `json:"patternProperties,omitempty"`
	Dependencies         map[string]JSONSchemaDependenciesAdditionalProperties `json:"dependencies,omitempty"`
	Enum                 []interface{}                                         `json:"enum,omitempty"`
	Type                 *JSONSchemaType                                       `json:"type,omitempty"`
	Format               string                                                `json:"format,omitempty"`
	Ref                  string                                                `json:"$ref,omitempty"` // Format: uri-reference.
	AllOf                []interface{}                                         `json:"allOf,omitempty"`
	AnyOf                []interface{}                                         `json:"anyOf,omitempty"`
	OneOf                []interface{}                                         `json:"oneOf,omitempty"`
	Not                  *JSONSchema                                           `json:"not,omitempty"` // Core schema meta-schema.
	Const                *interface{}                                          `json:"const,omitempty"`
	Contains             *JSONSchema                                           `json:"contains,omitempty"`      // Core schema meta-schema.
	PropertyNames        *JSONSchema                                           `json:"propertyNames,omitempty"` // Core schema meta-schema.
	If                   *JSONSchema                                           `json:"if,omitempty"`            // Core schema meta-schema.
	Then                 *JSONSchema                                           `json:"then,omitempty"`          // Core schema meta-schema.
	Else                 *JSONSchema                                           `json:"else,omitempty"`          // Core schema meta-schema.
	ContentEncoding      string                                                `json:"contentEncoding,omitempty"`
	ContentMediaType     string                                                `json:"contentMediaType,omitempty"`
}

// WithID sets ID value.
func (j *JSONSchema) WithID(val string) *JSONSchema {
	j.ID = val
	return j
}

// WithSchema sets Schema value.
func (j *JSONSchema) WithSchema(val string) *JSONSchema {
	j.Schema = val
	return j
}

// WithTitle sets Title value.
func (j *JSONSchema) WithTitle(val string) *JSONSchema {
	j.Title = val
	return j
}

// WithDescription sets Description value.
func (j *JSONSchema) WithDescription(val string) *JSONSchema {
	j.Description = val
	return j
}

// WithDefault sets Default value.
func (j *JSONSchema) WithDefault(val interface{}) *JSONSchema {
	j.Default = &val
	return j
}

// WithMultipleOf sets MultipleOf value.
func (j *JSONSchema) WithMultipleOf(val float64) *JSONSchema {
	j.MultipleOf = val
	return j
}

// WithMaximum sets Maximum value.
func (j *JSONSchema) WithMaximum(val float64) *JSONSchema {
	j.Maximum = val
	return j
}

// WithExclusiveMaximum sets ExclusiveMaximum value.
func (j *JSONSchema) WithExclusiveMaximum(val JSONSchemaExclusiveMaximum) *JSONSchema {
	j.ExclusiveMaximum = &val
	return j
}

// ExclusiveMaximumEns ensures returned ExclusiveMaximum is not nil.
func (j *JSONSchema) ExclusiveMaximumEns() *JSONSchemaExclusiveMaximum {
	if j.ExclusiveMaximum == nil {
		j.ExclusiveMaximum = new(JSONSchemaExclusiveMaximum)
	}

	return j.ExclusiveMaximum
}

// WithMinimum sets Minimum value.
func (j *JSONSchema) WithMinimum(val float64) *JSONSchema {
	j.Minimum = val
	return j
}

// WithExclusiveMinimum sets ExclusiveMinimum value.
func (j *JSONSchema) WithExclusiveMinimum(val JSONSchemaExclusiveMinimum) *JSONSchema {
	j.ExclusiveMinimum = &val
	return j
}

// ExclusiveMinimumEns ensures returned ExclusiveMinimum is not nil.
func (j *JSONSchema) ExclusiveMinimumEns() *JSONSchemaExclusiveMinimum {
	if j.ExclusiveMinimum == nil {
		j.ExclusiveMinimum = new(JSONSchemaExclusiveMinimum)
	}

	return j.ExclusiveMinimum
}

// WithMaxLength sets MaxLength value.
func (j *JSONSchema) WithMaxLength(val int64) *JSONSchema {
	j.MaxLength = val
	return j
}

// WithMinLength sets MinLength value.
func (j *JSONSchema) WithMinLength(val int64) *JSONSchema {
	j.MinLength = val
	return j
}

// WithPattern sets Pattern value.
func (j *JSONSchema) WithPattern(val string) *JSONSchema {
	j.Pattern = val
	return j
}

// WithTypeObject sets TypeObject value.
func (j *JSONSchema) WithTypeObject(val JSONSchema) *JSONSchema {
	j.TypeObject = &val
	return j
}

// TypeObjectEns ensures returned TypeObject is not nil.
func (j *JSONSchema) TypeObjectEns() *JSONSchema {
	if j.TypeObject == nil {
		j.TypeObject = new(JSONSchema)
	}

	return j.TypeObject
}

// WithTypeBoolean sets TypeBoolean value.
func (j *JSONSchema) WithTypeBoolean(val bool) *JSONSchema {
	j.TypeBoolean = &val
	return j
}

// WithAdditionalItems sets AdditionalItems value.
func (j *JSONSchema) WithAdditionalItems(val JSONSchemaAdditionalItems) *JSONSchema {
	j.AdditionalItems = &val
	return j
}

// AdditionalItemsEns ensures returned AdditionalItems is not nil.
func (j *JSONSchema) AdditionalItemsEns() *JSONSchemaAdditionalItems {
	if j.AdditionalItems == nil {
		j.AdditionalItems = new(JSONSchemaAdditionalItems)
	}

	return j.AdditionalItems
}

// WithItems sets Items value.
func (j *JSONSchema) WithItems(val JSONSchemaItems) *JSONSchema {
	j.Items = &val
	return j
}

// ItemsEns ensures returned Items is not nil.
func (j *JSONSchema) ItemsEns() *JSONSchemaItems {
	if j.Items == nil {
		j.Items = new(JSONSchemaItems)
	}

	return j.Items
}

// WithMaxItems sets MaxItems value.
func (j *JSONSchema) WithMaxItems(val int64) *JSONSchema {
	j.MaxItems = val
	return j
}

// WithMinItems sets MinItems value.
func (j *JSONSchema) WithMinItems(val int64) *JSONSchema {
	j.MinItems = val
	return j
}

// WithUniqueItems sets UniqueItems value.
func (j *JSONSchema) WithUniqueItems(val bool) *JSONSchema {
	j.UniqueItems = val
	return j
}

// WithMaxProperties sets MaxProperties value.
func (j *JSONSchema) WithMaxProperties(val int64) *JSONSchema {
	j.MaxProperties = val
	return j
}

// WithMinProperties sets MinProperties value.
func (j *JSONSchema) WithMinProperties(val int64) *JSONSchema {
	j.MinProperties = val
	return j
}

// WithRequired sets Required value.
func (j *JSONSchema) WithRequired(val ...string) *JSONSchema {
	j.Required = val
	return j
}

// WithAdditionalProperties sets AdditionalProperties value.
func (j *JSONSchema) WithAdditionalProperties(val JSONSchemaAdditionalProperties) *JSONSchema {
	j.AdditionalProperties = &val
	return j
}

// AdditionalPropertiesEns ensures returned AdditionalProperties is not nil.
func (j *JSONSchema) AdditionalPropertiesEns() *JSONSchemaAdditionalProperties {
	if j.AdditionalProperties == nil {
		j.AdditionalProperties = new(JSONSchemaAdditionalProperties)
	}

	return j.AdditionalProperties
}

// WithDefinitions sets Definitions value.
func (j *JSONSchema) WithDefinitions(val map[string]interface{}) *JSONSchema {
	j.Definitions = val
	return j
}

// WithDefinitionsItem sets Definitions item value.
func (j *JSONSchema) WithDefinitionsItem(key string, val interface{}) *JSONSchema {
	if j.Definitions == nil {
		j.Definitions = make(map[string]interface{}, 1)
	}

	j.Definitions[key] = val

	return j
}

// WithProperties sets Properties value.
func (j *JSONSchema) WithProperties(val map[string]interface{}) *JSONSchema {
	j.Properties = val
	return j
}

// WithPropertiesItem sets Properties item value.
func (j *JSONSchema) WithPropertiesItem(key string, val interface{}) *JSONSchema {
	if j.Properties == nil {
		j.Properties = make(map[string]interface{}, 1)
	}

	j.Properties[key] = val

	return j
}

// WithPatternProperties sets PatternProperties value.
func (j *JSONSchema) WithPatternProperties(val map[string]interface{}) *JSONSchema {
	j.PatternProperties = val
	return j
}

// WithPatternPropertiesItem sets PatternProperties item value.
func (j *JSONSchema) WithPatternPropertiesItem(key string, val interface{}) *JSONSchema {
	if j.PatternProperties == nil {
		j.PatternProperties = make(map[string]interface{}, 1)
	}

	j.PatternProperties[key] = val

	return j
}

// WithDependencies sets Dependencies value.
func (j *JSONSchema) WithDependencies(val map[string]JSONSchemaDependenciesAdditionalProperties) *JSONSchema {
	j.Dependencies = val
	return j
}

// WithDependenciesItem sets Dependencies item value.
func (j *JSONSchema) WithDependenciesItem(key string, val JSONSchemaDependenciesAdditionalProperties) *JSONSchema {
	if j.Dependencies == nil {
		j.Dependencies = make(map[string]JSONSchemaDependenciesAdditionalProperties, 1)
	}

	j.Dependencies[key] = val

	return j
}

// WithEnum sets Enum value.
func (j *JSONSchema) WithEnum(val ...interface{}) *JSONSchema {
	j.Enum = val
	return j
}

// WithType sets Type value.
func (j *JSONSchema) WithType(val JSONSchemaType) *JSONSchema {
	j.Type = &val
	return j
}

// TypeEns ensures returned Type is not nil.
func (j *JSONSchema) TypeEns() *JSONSchemaType {
	if j.Type == nil {
		j.Type = new(JSONSchemaType)
	}

	return j.Type
}

// WithFormat sets Format value.
func (j *JSONSchema) WithFormat(val string) *JSONSchema {
	j.Format = val
	return j
}

// WithRef sets Ref value.
func (j *JSONSchema) WithRef(val string) *JSONSchema {
	j.Ref = val
	return j
}

// WithAllOf sets AllOf value.
func (j *JSONSchema) WithAllOf(val ...interface{}) *JSONSchema {
	j.AllOf = val
	return j
}

// WithAnyOf sets AnyOf value.
func (j *JSONSchema) WithAnyOf(val ...interface{}) *JSONSchema {
	j.AnyOf = val
	return j
}

// WithOneOf sets OneOf value.
func (j *JSONSchema) WithOneOf(val ...interface{}) *JSONSchema {
	j.OneOf = val
	return j
}

// WithNot sets Not value.
func (j *JSONSchema) WithNot(val JSONSchema) *JSONSchema {
	j.Not = &val
	return j
}

// NotEns ensures returned Not is not nil.
func (j *JSONSchema) NotEns() *JSONSchema {
	if j.Not == nil {
		j.Not = new(JSONSchema)
	}

	return j.Not
}

// WithConst sets Const value.
func (j *JSONSchema) WithConst(val interface{}) *JSONSchema {
	j.Const = &val
	return j
}

// WithContains sets Contains value.
func (j *JSONSchema) WithContains(val JSONSchema) *JSONSchema {
	j.Contains = &val
	return j
}

// ContainsEns ensures returned Contains is not nil.
func (j *JSONSchema) ContainsEns() *JSONSchema {
	if j.Contains == nil {
		j.Contains = new(JSONSchema)
	}

	return j.Contains
}

// WithPropertyNames sets PropertyNames value.
func (j *JSONSchema) WithPropertyNames(val JSONSchema) *JSONSchema {
	j.PropertyNames = &val
	return j
}

// PropertyNamesEns ensures returned PropertyNames is not nil.
func (j *JSONSchema) PropertyNamesEns() *JSONSchema {
	if j.PropertyNames == nil {
		j.PropertyNames = new(JSONSchema)
	}

	return j.PropertyNames
}

// WithIf sets If value.
func (j *JSONSchema) WithIf(val JSONSchema) *JSONSchema {
	j.If = &val
	return j
}

// IfEns ensures returned If is not nil.
func (j *JSONSchema) IfEns() *JSONSchema {
	if j.If == nil {
		j.If = new(JSONSchema)
	}

	return j.If
}

// WithThen sets Then value.
func (j *JSONSchema) WithThen(val JSONSchema) *JSONSchema {
	j.Then = &val
	return j
}

// ThenEns ensures returned Then is not nil.
func (j *JSONSchema) ThenEns() *JSONSchema {
	if j.Then == nil {
		j.Then = new(JSONSchema)
	}

	return j.Then
}

// WithElse sets Else value.
func (j *JSONSchema) WithElse(val JSONSchema) *JSONSchema {
	j.Else = &val
	return j
}

// ElseEns ensures returned Else is not nil.
func (j *JSONSchema) ElseEns() *JSONSchema {
	if j.Else == nil {
		j.Else = new(JSONSchema)
	}

	return j.Else
}

// WithContentEncoding sets ContentEncoding value.
func (j *JSONSchema) WithContentEncoding(val string) *JSONSchema {
	j.ContentEncoding = val
	return j
}

// WithContentMediaType sets ContentMediaType value.
func (j *JSONSchema) WithContentMediaType(val string) *JSONSchema {
	j.ContentMediaType = val
	return j
}

type marshalJSONSchema JSONSchema

// UnmarshalJSON decodes JSON.
func (j *JSONSchema) UnmarshalJSON(data []byte) error {
	var err error

	mj := marshalJSONSchema(*j)

	err = json.Unmarshal(data, &mj)
	if err != nil {
		return err
	}

	typeValid := false

	if !typeValid {
		err = json.Unmarshal(data, &mj.TypeObject)
		if err != nil {
			mj.TypeObject = nil
		} else {
			typeValid = true
		}
	}

	if !typeValid {
		err = json.Unmarshal(data, &mj.TypeBoolean)
		if err != nil {
			mj.TypeBoolean = nil
		} else {
			typeValid = true
		}
	}

	if !typeValid {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	if mj.Default == nil {
		if _, ok := rawMap["default"]; ok {
			var v interface{}
			mj.Default = &v
		}
	}

	if mj.Const == nil {
		if _, ok := rawMap["const"]; ok {
			var v interface{}
			mj.Const = &v
		}
	}

	*j = JSONSchema(mj)

	return nil
}

// MarshalJSON encodes JSON.
func (j JSONSchema) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalJSONSchema(j), j.TypeObject, j.TypeBoolean)
}

// JSONSchemaExclusiveMaximum structure is generated from "jsonSchema->exclusiveMaximum".
type JSONSchemaExclusiveMaximum struct {
	TypeBoolean *bool    `json:"-"`
	TypeNumber  *float64 `json:"-"`
}

// WithTypeBoolean sets TypeBoolean value.
func (j *JSONSchemaExclusiveMaximum) WithTypeBoolean(val bool) *JSONSchemaExclusiveMaximum {
	j.TypeBoolean = &val
	return j
}

// WithTypeNumber sets TypeNumber value.
func (j *JSONSchemaExclusiveMaximum) WithTypeNumber(val float64) *JSONSchemaExclusiveMaximum {
	j.TypeNumber = &val
	return j
}

// UnmarshalJSON decodes JSON.
func (j *JSONSchemaExclusiveMaximum) UnmarshalJSON(data []byte) error {
	var err error

	typeValid := false

	if !typeValid {
		err = json.Unmarshal(data, &j.TypeBoolean)
		if err != nil {
			j.TypeBoolean = nil
		} else {
			typeValid = true
		}
	}

	if !typeValid {
		err = json.Unmarshal(data, &j.TypeNumber)
		if err != nil {
			j.TypeNumber = nil
		} else {
			typeValid = true
		}
	}

	if !typeValid {
		return err
	}

	return nil
}

// MarshalJSON encodes JSON.
func (j JSONSchemaExclusiveMaximum) MarshalJSON() ([]byte, error) {
	return marshalUnion(j.TypeBoolean, j.TypeNumber)
}

// JSONSchemaExclusiveMinimum structure is generated from "jsonSchema->exclusiveMinimum".
type JSONSchemaExclusiveMinimum struct {
	TypeBoolean *bool    `json:"-"`
	TypeNumber  *float64 `json:"-"`
}

// WithTypeBoolean sets TypeBoolean value.
func (j *JSONSchemaExclusiveMinimum) WithTypeBoolean(val bool) *JSONSchemaExclusiveMinimum {
	j.TypeBoolean = &val
	return j
}

// WithTypeNumber sets TypeNumber value.
func (j *JSONSchemaExclusiveMinimum) WithTypeNumber(val float64) *JSONSchemaExclusiveMinimum {
	j.TypeNumber = &val
	return j
}

// UnmarshalJSON decodes JSON.
func (j *JSONSchemaExclusiveMinimum) UnmarshalJSON(data []byte) error {
	var err error

	typeValid := false

	if !typeValid {
		err = json.Unmarshal(data, &j.TypeBoolean)
		if err != nil {
			j.TypeBoolean = nil
		} else {
			typeValid = true
		}
	}

	if !typeValid {
		err = json.Unmarshal(data, &j.TypeNumber)
		if err != nil {
			j.TypeNumber = nil
		} else {
			typeValid = true
		}
	}

	if !typeValid {
		return err
	}

	return nil
}

// MarshalJSON encodes JSON.
func (j JSONSchemaExclusiveMinimum) MarshalJSON() ([]byte, error) {
	return marshalUnion(j.TypeBoolean, j.TypeNumber)
}

// JSONSchemaAdditionalItems structure is generated from "jsonSchema->additionalItems".
type JSONSchemaAdditionalItems struct {
	Bool *bool `json:"-"`
}

// WithBool sets Bool value.
func (j *JSONSchemaAdditionalItems) WithBool(val bool) *JSONSchemaAdditionalItems {
	j.Bool = &val
	return j
}

// UnmarshalJSON decodes JSON.
func (j *JSONSchemaAdditionalItems) UnmarshalJSON(data []byte) error {
	var err error

	anyOfErrors := make(map[string]error, 1)
	anyOfValid := 0

	err = json.Unmarshal(data, &j.Bool)
	if err != nil {
		anyOfErrors["Bool"] = err
		j.Bool = nil
	} else {
		anyOfValid++
	}

	if anyOfValid == 0 {
		return fmt.Errorf("anyOf constraint for JSONSchemaAdditionalItems failed with %d valid results: %v", anyOfValid, anyOfErrors)
	}

	return nil
}

// MarshalJSON encodes JSON.
func (j JSONSchemaAdditionalItems) MarshalJSON() ([]byte, error) {
	return marshalUnion(j.Bool)
}

// JSONSchemaItems structure is generated from "jsonSchema->items".
type JSONSchemaItems struct {
	SliceOfAnything []interface{} `json:"-"`
}

// WithSliceOfAnything sets SliceOfAnything value.
func (j *JSONSchemaItems) WithSliceOfAnything(val ...interface{}) *JSONSchemaItems {
	j.SliceOfAnything = val
	return j
}

// UnmarshalJSON decodes JSON.
func (j *JSONSchemaItems) UnmarshalJSON(data []byte) error {
	var err error

	anyOfErrors := make(map[string]error, 1)
	anyOfValid := 0

	err = json.Unmarshal(data, &j.SliceOfAnything)
	if err != nil {
		anyOfErrors["SliceOfAnything"] = err
		j.SliceOfAnything = nil
	} else {
		anyOfValid++
	}

	if anyOfValid == 0 {
		return fmt.Errorf("anyOf constraint for JSONSchemaItems failed with %d valid results: %v", anyOfValid, anyOfErrors)
	}

	return nil
}

// MarshalJSON encodes JSON.
func (j JSONSchemaItems) MarshalJSON() ([]byte, error) {
	return marshalUnion(j.SliceOfAnything)
}

// JSONSchemaAdditionalProperties structure is generated from "jsonSchema->additionalProperties".
type JSONSchemaAdditionalProperties struct {
	Bool *bool `json:"-"`
}

// WithBool sets Bool value.
func (j *JSONSchemaAdditionalProperties) WithBool(val bool) *JSONSchemaAdditionalProperties {
	j.Bool = &val
	return j
}

// UnmarshalJSON decodes JSON.
func (j *JSONSchemaAdditionalProperties) UnmarshalJSON(data []byte) error {
	var err error

	anyOfErrors := make(map[string]error, 1)
	anyOfValid := 0

	err = json.Unmarshal(data, &j.Bool)
	if err != nil {
		anyOfErrors["Bool"] = err
		j.Bool = nil
	} else {
		anyOfValid++
	}

	if anyOfValid == 0 {
		return fmt.Errorf("anyOf constraint for JSONSchemaAdditionalProperties failed with %d valid results: %v", anyOfValid, anyOfErrors)
	}

	return nil
}

// MarshalJSON encodes JSON.
func (j JSONSchemaAdditionalProperties) MarshalJSON() ([]byte, error) {
	return marshalUnion(j.Bool)
}

// JSONSchemaDependenciesAdditionalProperties structure is generated from "jsonSchema->dependencies->additionalProperties".
type JSONSchemaDependenciesAdditionalProperties struct {
	SliceOfStringValues []string `json:"-"`
}

// WithSliceOfStringValues sets SliceOfStringValues value.
func (j *JSONSchemaDependenciesAdditionalProperties) WithSliceOfStringValues(val ...string) *JSONSchemaDependenciesAdditionalProperties {
	j.SliceOfStringValues = val
	return j
}

// UnmarshalJSON decodes JSON.
func (j *JSONSchemaDependenciesAdditionalProperties) UnmarshalJSON(data []byte) error {
	var err error

	anyOfErrors := make(map[string]error, 1)
	anyOfValid := 0

	err = json.Unmarshal(data, &j.SliceOfStringValues)
	if err != nil {
		anyOfErrors["SliceOfStringValues"] = err
		j.SliceOfStringValues = nil
	} else {
		anyOfValid++
	}

	if anyOfValid == 0 {
		return fmt.Errorf("anyOf constraint for JSONSchemaDependenciesAdditionalProperties failed with %d valid results: %v", anyOfValid, anyOfErrors)
	}

	return nil
}

// MarshalJSON encodes JSON.
func (j JSONSchemaDependenciesAdditionalProperties) MarshalJSON() ([]byte, error) {
	return marshalUnion(j.SliceOfStringValues)
}

// JSONSchemaType structure is generated from "jsonSchema->type".
type JSONSchemaType struct {
	AnyOf0                                 *JSONSchemaTypeAnyOf0       `json:"-"`
	SliceOfJSONSchemaTypeAnyOf1ItemsValues []JSONSchemaTypeAnyOf1Items `json:"-"`
}

// WithAnyOf0 sets AnyOf0 value.
func (j *JSONSchemaType) WithAnyOf0(val JSONSchemaTypeAnyOf0) *JSONSchemaType {
	j.AnyOf0 = &val
	return j
}

// WithSliceOfJSONSchemaTypeAnyOf1ItemsValues sets SliceOfJSONSchemaTypeAnyOf1ItemsValues value.
func (j *JSONSchemaType) WithSliceOfJSONSchemaTypeAnyOf1ItemsValues(val ...JSONSchemaTypeAnyOf1Items) *JSONSchemaType {
	j.SliceOfJSONSchemaTypeAnyOf1ItemsValues = val
	return j
}

// UnmarshalJSON decodes JSON.
func (j *JSONSchemaType) UnmarshalJSON(data []byte) error {
	var err error

	anyOfErrors := make(map[string]error, 2)
	anyOfValid := 0

	err = json.Unmarshal(data, &j.AnyOf0)
	if err != nil {
		anyOfErrors["AnyOf0"] = err
		j.AnyOf0 = nil
	} else {
		anyOfValid++
	}

	err = json.Unmarshal(data, &j.SliceOfJSONSchemaTypeAnyOf1ItemsValues)
	if err != nil {
		anyOfErrors["SliceOfJSONSchemaTypeAnyOf1ItemsValues"] = err
		j.SliceOfJSONSchemaTypeAnyOf1ItemsValues = nil
	} else {
		anyOfValid++
	}

	if anyOfValid == 0 {
		return fmt.Errorf("anyOf constraint for JSONSchemaType failed with %d valid results: %v", anyOfValid, anyOfErrors)
	}

	return nil
}

// MarshalJSON encodes JSON.
func (j JSONSchemaType) MarshalJSON() ([]byte, error) {
	return marshalUnion(j.AnyOf0, j.SliceOfJSONSchemaTypeAnyOf1ItemsValues)
}

// HTTPAsyncapiComDefinitions240SchemaJSONAllOf1 structure is generated from "http://asyncapi.com/definitions/2.4.0/schema.json/allOf/1".
type HTTPAsyncapiComDefinitions240SchemaJSONAllOf1 struct {
	AdditionalProperties *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1AdditionalProperties `json:"additionalProperties,omitempty"`
	Items                *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1Items                `json:"items,omitempty"`
	AllOf                []HTTPAsyncapiComDefinitions240SchemaJSON                          `json:"allOf,omitempty"`
	OneOf                []HTTPAsyncapiComDefinitions240SchemaJSON                          `json:"oneOf,omitempty"`
	AnyOf                []HTTPAsyncapiComDefinitions240SchemaJSON                          `json:"anyOf,omitempty"`
	Not                  *HTTPAsyncapiComDefinitions240SchemaJSON                           `json:"not,omitempty"`
	Properties           map[string]HTTPAsyncapiComDefinitions240SchemaJSON                 `json:"properties,omitempty"`
	PatternProperties    map[string]HTTPAsyncapiComDefinitions240SchemaJSON                 `json:"patternProperties,omitempty"`
	PropertyNames        *HTTPAsyncapiComDefinitions240SchemaJSON                           `json:"propertyNames,omitempty"`
	Contains             *HTTPAsyncapiComDefinitions240SchemaJSON                           `json:"contains,omitempty"`
	Discriminator        string                                                             `json:"discriminator,omitempty"`
	ExternalDocs         *ExternalDocs                                                      `json:"externalDocs,omitempty"` // Information about external documentation.
	Deprecated           bool                                                               `json:"deprecated,omitempty"`
	MapOfAnything        map[string]interface{}                                             `json:"-"` // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

// WithAdditionalProperties sets AdditionalProperties value.
func (h *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1) WithAdditionalProperties(val HTTPAsyncapiComDefinitions240SchemaJSONAllOf1AdditionalProperties) *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1 {
	h.AdditionalProperties = &val
	return h
}

// AdditionalPropertiesEns ensures returned AdditionalProperties is not nil.
func (h *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1) AdditionalPropertiesEns() *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1AdditionalProperties {
	if h.AdditionalProperties == nil {
		h.AdditionalProperties = new(HTTPAsyncapiComDefinitions240SchemaJSONAllOf1AdditionalProperties)
	}

	return h.AdditionalProperties
}

// WithItems sets Items value.
func (h *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1) WithItems(val HTTPAsyncapiComDefinitions240SchemaJSONAllOf1Items) *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1 {
	h.Items = &val
	return h
}

// ItemsEns ensures returned Items is not nil.
func (h *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1) ItemsEns() *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1Items {
	if h.Items == nil {
		h.Items = new(HTTPAsyncapiComDefinitions240SchemaJSONAllOf1Items)
	}

	return h.Items
}

// WithAllOf sets AllOf value.
func (h *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1) WithAllOf(val ...HTTPAsyncapiComDefinitions240SchemaJSON) *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1 {
	h.AllOf = val
	return h
}

// WithOneOf sets OneOf value.
func (h *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1) WithOneOf(val ...HTTPAsyncapiComDefinitions240SchemaJSON) *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1 {
	h.OneOf = val
	return h
}

// WithAnyOf sets AnyOf value.
func (h *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1) WithAnyOf(val ...HTTPAsyncapiComDefinitions240SchemaJSON) *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1 {
	h.AnyOf = val
	return h
}

// WithNot sets Not value.
func (h *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1) WithNot(val HTTPAsyncapiComDefinitions240SchemaJSON) *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1 {
	h.Not = &val
	return h
}

// NotEns ensures returned Not is not nil.
func (h *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1) NotEns() *HTTPAsyncapiComDefinitions240SchemaJSON {
	if h.Not == nil {
		h.Not = new(HTTPAsyncapiComDefinitions240SchemaJSON)
	}

	return h.Not
}

// WithProperties sets Properties value.
func (h *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1) WithProperties(val map[string]HTTPAsyncapiComDefinitions240SchemaJSON) *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1 {
	h.Properties = val
	return h
}

// WithPropertiesItem sets Properties item value.
func (h *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1) WithPropertiesItem(key string, val HTTPAsyncapiComDefinitions240SchemaJSON) *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1 {
	if h.Properties == nil {
		h.Properties = make(map[string]HTTPAsyncapiComDefinitions240SchemaJSON, 1)
	}

	h.Properties[key] = val

	return h
}

// WithPatternProperties sets PatternProperties value.
func (h *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1) WithPatternProperties(val map[string]HTTPAsyncapiComDefinitions240SchemaJSON) *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1 {
	h.PatternProperties = val
	return h
}

// WithPatternPropertiesItem sets PatternProperties item value.
func (h *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1) WithPatternPropertiesItem(key string, val HTTPAsyncapiComDefinitions240SchemaJSON) *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1 {
	if h.PatternProperties == nil {
		h.PatternProperties = make(map[string]HTTPAsyncapiComDefinitions240SchemaJSON, 1)
	}

	h.PatternProperties[key] = val

	return h
}

// WithPropertyNames sets PropertyNames value.
func (h *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1) WithPropertyNames(val HTTPAsyncapiComDefinitions240SchemaJSON) *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1 {
	h.PropertyNames = &val
	return h
}

// PropertyNamesEns ensures returned PropertyNames is not nil.
func (h *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1) PropertyNamesEns() *HTTPAsyncapiComDefinitions240SchemaJSON {
	if h.PropertyNames == nil {
		h.PropertyNames = new(HTTPAsyncapiComDefinitions240SchemaJSON)
	}

	return h.PropertyNames
}

// WithContains sets Contains value.
func (h *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1) WithContains(val HTTPAsyncapiComDefinitions240SchemaJSON) *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1 {
	h.Contains = &val
	return h
}

// ContainsEns ensures returned Contains is not nil.
func (h *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1) ContainsEns() *HTTPAsyncapiComDefinitions240SchemaJSON {
	if h.Contains == nil {
		h.Contains = new(HTTPAsyncapiComDefinitions240SchemaJSON)
	}

	return h.Contains
}

// WithDiscriminator sets Discriminator value.
func (h *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1) WithDiscriminator(val string) *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1 {
	h.Discriminator = val
	return h
}

// WithExternalDocs sets ExternalDocs value.
func (h *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1) WithExternalDocs(val ExternalDocs) *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1 {
	h.ExternalDocs = &val
	return h
}

// ExternalDocsEns ensures returned ExternalDocs is not nil.
func (h *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1) ExternalDocsEns() *ExternalDocs {
	if h.ExternalDocs == nil {
		h.ExternalDocs = new(ExternalDocs)
	}

	return h.ExternalDocs
}

// WithDeprecated sets Deprecated value.
func (h *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1) WithDeprecated(val bool) *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1 {
	h.Deprecated = val
	return h
}

// WithMapOfAnything sets MapOfAnything value.
func (h *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1) WithMapOfAnything(val map[string]interface{}) *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1 {
	h.MapOfAnything = val
	return h
}

// WithMapOfAnythingItem sets MapOfAnything item value.
func (h *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1) WithMapOfAnythingItem(key string, val interface{}) *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1 {
	if h.MapOfAnything == nil {
		h.MapOfAnything = make(map[string]interface{}, 1)
	}

	h.MapOfAnything[key] = val

	return h
}

type marshalHTTPAsyncapiComDefinitions240SchemaJSONAllOf1 HTTPAsyncapiComDefinitions240SchemaJSONAllOf1

var knownKeysHTTPAsyncapiComDefinitions240SchemaJSONAllOf1 = []string{
	"additionalProperties",
	"items",
	"allOf",
	"oneOf",
	"anyOf",
	"not",
	"properties",
	"patternProperties",
	"propertyNames",
	"contains",
	"discriminator",
	"externalDocs",
	"deprecated",
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1) UnmarshalJSON(data []byte) error {
	var err error

	mh := marshalHTTPAsyncapiComDefinitions240SchemaJSONAllOf1(*h)

	err = json.Unmarshal(data, &mh)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysHTTPAsyncapiComDefinitions240SchemaJSONAllOf1 {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if mh.MapOfAnything == nil {
				mh.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			mh.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	*h = HTTPAsyncapiComDefinitions240SchemaJSONAllOf1(mh)

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240SchemaJSONAllOf1) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalHTTPAsyncapiComDefinitions240SchemaJSONAllOf1(h), h.MapOfAnything)
}

// HTTPAsyncapiComDefinitions240SchemaJSON structure is generated from "http://asyncapi.com/definitions/2.4.0/schema.json".
type HTTPAsyncapiComDefinitions240SchemaJSON struct {
	AllOf1 *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1 `json:"-"`
}

// WithAllOf1 sets AllOf1 value.
func (h *HTTPAsyncapiComDefinitions240SchemaJSON) WithAllOf1(val HTTPAsyncapiComDefinitions240SchemaJSONAllOf1) *HTTPAsyncapiComDefinitions240SchemaJSON {
	h.AllOf1 = &val
	return h
}

// AllOf1Ens ensures returned AllOf1 is not nil.
func (h *HTTPAsyncapiComDefinitions240SchemaJSON) AllOf1Ens() *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1 {
	if h.AllOf1 == nil {
		h.AllOf1 = new(HTTPAsyncapiComDefinitions240SchemaJSONAllOf1)
	}

	return h.AllOf1
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240SchemaJSON) UnmarshalJSON(data []byte) error {
	var err error

	err = json.Unmarshal(data, &h.AllOf1)
	if err != nil {
		return err
	}

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240SchemaJSON) MarshalJSON() ([]byte, error) {
	return marshalUnion(h.AllOf1)
}

// HTTPAsyncapiComDefinitions240SchemaJSONAllOf1AdditionalProperties structure is generated from "http://asyncapi.com/definitions/2.4.0/schema.json/allOf/1->additionalProperties".
type HTTPAsyncapiComDefinitions240SchemaJSONAllOf1AdditionalProperties struct {
	HTTPAsyncapiComDefinitions240SchemaJSON *HTTPAsyncapiComDefinitions240SchemaJSON `json:"-"`
	Bool                                    *bool                                    `json:"-"`
}

// WithHTTPAsyncapiComDefinitions240SchemaJSON sets HTTPAsyncapiComDefinitions240SchemaJSON value.
func (h *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1AdditionalProperties) WithHTTPAsyncapiComDefinitions240SchemaJSON(val HTTPAsyncapiComDefinitions240SchemaJSON) *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1AdditionalProperties {
	h.HTTPAsyncapiComDefinitions240SchemaJSON = &val
	return h
}

// HTTPAsyncapiComDefinitions240SchemaJSONEns ensures returned HTTPAsyncapiComDefinitions240SchemaJSON is not nil.
func (h *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1AdditionalProperties) HTTPAsyncapiComDefinitions240SchemaJSONEns() *HTTPAsyncapiComDefinitions240SchemaJSON {
	if h.HTTPAsyncapiComDefinitions240SchemaJSON == nil {
		h.HTTPAsyncapiComDefinitions240SchemaJSON = new(HTTPAsyncapiComDefinitions240SchemaJSON)
	}

	return h.HTTPAsyncapiComDefinitions240SchemaJSON
}

// WithBool sets Bool value.
func (h *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1AdditionalProperties) WithBool(val bool) *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1AdditionalProperties {
	h.Bool = &val
	return h
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1AdditionalProperties) UnmarshalJSON(data []byte) error {
	var err error

	anyOfErrors := make(map[string]error, 2)
	anyOfValid := 0

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240SchemaJSON)
	if err != nil {
		anyOfErrors["HTTPAsyncapiComDefinitions240SchemaJSON"] = err
		h.HTTPAsyncapiComDefinitions240SchemaJSON = nil
	} else {
		anyOfValid++
	}

	err = json.Unmarshal(data, &h.Bool)
	if err != nil {
		anyOfErrors["Bool"] = err
		h.Bool = nil
	} else {
		anyOfValid++
	}

	if anyOfValid == 0 {
		return fmt.Errorf("anyOf constraint for HTTPAsyncapiComDefinitions240SchemaJSONAllOf1AdditionalProperties failed with %d valid results: %v", anyOfValid, anyOfErrors)
	}

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240SchemaJSONAllOf1AdditionalProperties) MarshalJSON() ([]byte, error) {
	return marshalUnion(h.HTTPAsyncapiComDefinitions240SchemaJSON, h.Bool)
}

// HTTPAsyncapiComDefinitions240SchemaJSONAllOf1Items structure is generated from "http://asyncapi.com/definitions/2.4.0/schema.json/allOf/1->items".
type HTTPAsyncapiComDefinitions240SchemaJSONAllOf1Items struct {
	HTTPAsyncapiComDefinitions240SchemaJSON              *HTTPAsyncapiComDefinitions240SchemaJSON  `json:"-"`
	SliceOfHTTPAsyncapiComDefinitions240SchemaJSONValues []HTTPAsyncapiComDefinitions240SchemaJSON `json:"-"`
}

// WithHTTPAsyncapiComDefinitions240SchemaJSON sets HTTPAsyncapiComDefinitions240SchemaJSON value.
func (h *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1Items) WithHTTPAsyncapiComDefinitions240SchemaJSON(val HTTPAsyncapiComDefinitions240SchemaJSON) *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1Items {
	h.HTTPAsyncapiComDefinitions240SchemaJSON = &val
	return h
}

// HTTPAsyncapiComDefinitions240SchemaJSONEns ensures returned HTTPAsyncapiComDefinitions240SchemaJSON is not nil.
func (h *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1Items) HTTPAsyncapiComDefinitions240SchemaJSONEns() *HTTPAsyncapiComDefinitions240SchemaJSON {
	if h.HTTPAsyncapiComDefinitions240SchemaJSON == nil {
		h.HTTPAsyncapiComDefinitions240SchemaJSON = new(HTTPAsyncapiComDefinitions240SchemaJSON)
	}

	return h.HTTPAsyncapiComDefinitions240SchemaJSON
}

// WithSliceOfHTTPAsyncapiComDefinitions240SchemaJSONValues sets SliceOfHTTPAsyncapiComDefinitions240SchemaJSONValues value.
func (h *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1Items) WithSliceOfHTTPAsyncapiComDefinitions240SchemaJSONValues(val ...HTTPAsyncapiComDefinitions240SchemaJSON) *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1Items {
	h.SliceOfHTTPAsyncapiComDefinitions240SchemaJSONValues = val
	return h
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1Items) UnmarshalJSON(data []byte) error {
	var err error

	anyOfErrors := make(map[string]error, 2)
	anyOfValid := 0

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240SchemaJSON)
	if err != nil {
		anyOfErrors["HTTPAsyncapiComDefinitions240SchemaJSON"] = err
		h.HTTPAsyncapiComDefinitions240SchemaJSON = nil
	} else {
		anyOfValid++
	}

	err = json.Unmarshal(data, &h.SliceOfHTTPAsyncapiComDefinitions240SchemaJSONValues)
	if err != nil {
		anyOfErrors["SliceOfHTTPAsyncapiComDefinitions240SchemaJSONValues"] = err
		h.SliceOfHTTPAsyncapiComDefinitions240SchemaJSONValues = nil
	} else {
		anyOfValid++
	}

	if anyOfValid == 0 {
		return fmt.Errorf("anyOf constraint for HTTPAsyncapiComDefinitions240SchemaJSONAllOf1Items failed with %d valid results: %v", anyOfValid, anyOfErrors)
	}

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240SchemaJSONAllOf1Items) MarshalJSON() ([]byte, error) {
	return marshalUnion(h.HTTPAsyncapiComDefinitions240SchemaJSON, h.SliceOfHTTPAsyncapiComDefinitions240SchemaJSONValues)
}

// HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1HeadersAllOf1 structure is generated from "http://asyncapi.com/definitions/2.4.0/message.json/oneOf/1/oneOf/1->headers/allOf/1".
type HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1HeadersAllOf1 struct{}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1HeadersAllOf1) UnmarshalJSON(data []byte) error {
	var err error

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	if v, exists := rawMap["type"]; exists && string(v) != `"object"` {
		return fmt.Errorf(`bad const value for "type" ("object" expected, %s received)`, v)
	}

	delete(rawMap, "type")

	return nil
}

// constHTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1HeadersAllOf1 is unconditionally added to JSON.
var constHTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1HeadersAllOf1 = json.RawMessage(`{"type":"object"}`)

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1HeadersAllOf1) MarshalJSON() ([]byte, error) {
	return marshalUnion(constHTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1HeadersAllOf1)
}

// HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1Headers structure is generated from "http://asyncapi.com/definitions/2.4.0/message.json/oneOf/1/oneOf/1->headers".
type HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1Headers struct {
	HTTPAsyncapiComDefinitions240SchemaJSON *HTTPAsyncapiComDefinitions240SchemaJSON                           `json:"-"`
	AllOf1                                  *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1HeadersAllOf1 `json:"-"`
}

// WithHTTPAsyncapiComDefinitions240SchemaJSON sets HTTPAsyncapiComDefinitions240SchemaJSON value.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1Headers) WithHTTPAsyncapiComDefinitions240SchemaJSON(val HTTPAsyncapiComDefinitions240SchemaJSON) *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1Headers {
	h.HTTPAsyncapiComDefinitions240SchemaJSON = &val
	return h
}

// HTTPAsyncapiComDefinitions240SchemaJSONEns ensures returned HTTPAsyncapiComDefinitions240SchemaJSON is not nil.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1Headers) HTTPAsyncapiComDefinitions240SchemaJSONEns() *HTTPAsyncapiComDefinitions240SchemaJSON {
	if h.HTTPAsyncapiComDefinitions240SchemaJSON == nil {
		h.HTTPAsyncapiComDefinitions240SchemaJSON = new(HTTPAsyncapiComDefinitions240SchemaJSON)
	}

	return h.HTTPAsyncapiComDefinitions240SchemaJSON
}

// WithAllOf1 sets AllOf1 value.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1Headers) WithAllOf1(val HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1HeadersAllOf1) *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1Headers {
	h.AllOf1 = &val
	return h
}

// AllOf1Ens ensures returned AllOf1 is not nil.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1Headers) AllOf1Ens() *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1HeadersAllOf1 {
	if h.AllOf1 == nil {
		h.AllOf1 = new(HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1HeadersAllOf1)
	}

	return h.AllOf1
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1Headers) UnmarshalJSON(data []byte) error {
	var err error

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240SchemaJSON)
	if err != nil {
		return err
	}

	err = json.Unmarshal(data, &h.AllOf1)
	if err != nil {
		return err
	}

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1Headers) MarshalJSON() ([]byte, error) {
	return marshalUnion(h.HTTPAsyncapiComDefinitions240SchemaJSON, h.AllOf1)
}

// HTTPAsyncapiComDefinitions240CorrelationIDJSON structure is generated from "http://asyncapi.com/definitions/2.4.0/correlationId.json".
type HTTPAsyncapiComDefinitions240CorrelationIDJSON struct {
	Description string `json:"description,omitempty"` // A optional description of the correlation ID. GitHub Flavored Markdown is allowed.
	// A runtime expression that specifies the location of the correlation ID.
	// Value must match pattern: `^\$message\.(header|payload)#(\/(([^\/~])|(~[01]))*)*`.
	// Required.
	Location      string                 `json:"location"`
	MapOfAnything map[string]interface{} `json:"-"` // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

// WithDescription sets Description value.
func (h *HTTPAsyncapiComDefinitions240CorrelationIDJSON) WithDescription(val string) *HTTPAsyncapiComDefinitions240CorrelationIDJSON {
	h.Description = val
	return h
}

// WithLocation sets Location value.
func (h *HTTPAsyncapiComDefinitions240CorrelationIDJSON) WithLocation(val string) *HTTPAsyncapiComDefinitions240CorrelationIDJSON {
	h.Location = val
	return h
}

// WithMapOfAnything sets MapOfAnything value.
func (h *HTTPAsyncapiComDefinitions240CorrelationIDJSON) WithMapOfAnything(val map[string]interface{}) *HTTPAsyncapiComDefinitions240CorrelationIDJSON {
	h.MapOfAnything = val
	return h
}

// WithMapOfAnythingItem sets MapOfAnything item value.
func (h *HTTPAsyncapiComDefinitions240CorrelationIDJSON) WithMapOfAnythingItem(key string, val interface{}) *HTTPAsyncapiComDefinitions240CorrelationIDJSON {
	if h.MapOfAnything == nil {
		h.MapOfAnything = make(map[string]interface{}, 1)
	}

	h.MapOfAnything[key] = val

	return h
}

type marshalHTTPAsyncapiComDefinitions240CorrelationIDJSON HTTPAsyncapiComDefinitions240CorrelationIDJSON

var knownKeysHTTPAsyncapiComDefinitions240CorrelationIDJSON = []string{
	"description",
	"location",
}

var requireKeysHTTPAsyncapiComDefinitions240CorrelationIDJSON = []string{
	"location",
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240CorrelationIDJSON) UnmarshalJSON(data []byte) error {
	var err error

	mh := marshalHTTPAsyncapiComDefinitions240CorrelationIDJSON(*h)

	err = json.Unmarshal(data, &mh)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range requireKeysHTTPAsyncapiComDefinitions240CorrelationIDJSON {
		if _, found := rawMap[key]; !found {
			return errors.New("required key missing: " + key)
		}
	}

	for _, key := range knownKeysHTTPAsyncapiComDefinitions240CorrelationIDJSON {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if mh.MapOfAnything == nil {
				mh.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			mh.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in HTTPAsyncapiComDefinitions240CorrelationIDJSON: %v", offendingKeys)
	}

	*h = HTTPAsyncapiComDefinitions240CorrelationIDJSON(mh)

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240CorrelationIDJSON) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalHTTPAsyncapiComDefinitions240CorrelationIDJSON(h), h.MapOfAnything)
}

// HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1CorrelationID structure is generated from "http://asyncapi.com/definitions/2.4.0/message.json/oneOf/1/oneOf/1->correlationId".
type HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1CorrelationID struct {
	HTTPAsyncapiComDefinitions240ReferenceJSON     *Reference                                      `json:"-"`
	HTTPAsyncapiComDefinitions240CorrelationIDJSON *HTTPAsyncapiComDefinitions240CorrelationIDJSON `json:"-"`
}

// WithHTTPAsyncapiComDefinitions240ReferenceJSON sets HTTPAsyncapiComDefinitions240ReferenceJSON value.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1CorrelationID) WithHTTPAsyncapiComDefinitions240ReferenceJSON(val Reference) *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1CorrelationID {
	h.HTTPAsyncapiComDefinitions240ReferenceJSON = &val
	return h
}

// HTTPAsyncapiComDefinitions240ReferenceJSONEns ensures returned HTTPAsyncapiComDefinitions240ReferenceJSON is not nil.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1CorrelationID) HTTPAsyncapiComDefinitions240ReferenceJSONEns() *Reference {
	if h.HTTPAsyncapiComDefinitions240ReferenceJSON == nil {
		h.HTTPAsyncapiComDefinitions240ReferenceJSON = new(Reference)
	}

	return h.HTTPAsyncapiComDefinitions240ReferenceJSON
}

// WithHTTPAsyncapiComDefinitions240CorrelationIDJSON sets HTTPAsyncapiComDefinitions240CorrelationIDJSON value.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1CorrelationID) WithHTTPAsyncapiComDefinitions240CorrelationIDJSON(val HTTPAsyncapiComDefinitions240CorrelationIDJSON) *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1CorrelationID {
	h.HTTPAsyncapiComDefinitions240CorrelationIDJSON = &val
	return h
}

// HTTPAsyncapiComDefinitions240CorrelationIDJSONEns ensures returned HTTPAsyncapiComDefinitions240CorrelationIDJSON is not nil.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1CorrelationID) HTTPAsyncapiComDefinitions240CorrelationIDJSONEns() *HTTPAsyncapiComDefinitions240CorrelationIDJSON {
	if h.HTTPAsyncapiComDefinitions240CorrelationIDJSON == nil {
		h.HTTPAsyncapiComDefinitions240CorrelationIDJSON = new(HTTPAsyncapiComDefinitions240CorrelationIDJSON)
	}

	return h.HTTPAsyncapiComDefinitions240CorrelationIDJSON
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1CorrelationID) UnmarshalJSON(data []byte) error {
	var err error

	oneOfErrors := make(map[string]error, 2)
	oneOfValid := 0

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240ReferenceJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240ReferenceJSON"] = err
		h.HTTPAsyncapiComDefinitions240ReferenceJSON = nil
	} else {
		oneOfValid++
	}

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240CorrelationIDJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240CorrelationIDJSON"] = err
		h.HTTPAsyncapiComDefinitions240CorrelationIDJSON = nil
	} else {
		oneOfValid++
	}

	if oneOfValid != 1 {
		return fmt.Errorf("oneOf constraint failed for HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1CorrelationID with %d valid results: %v", oneOfValid, oneOfErrors)
	}

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1CorrelationID) MarshalJSON() ([]byte, error) {
	return marshalUnion(h.HTTPAsyncapiComDefinitions240ReferenceJSON, h.HTTPAsyncapiComDefinitions240CorrelationIDJSON)
}

// HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1ExamplesItems structure is generated from "http://asyncapi.com/definitions/2.4.0/message.json/oneOf/1/oneOf/1->examples->items".
type HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1ExamplesItems struct {
	Name    string                 `json:"name,omitempty"`    // Machine readable name of the message example.
	Summary string                 `json:"summary,omitempty"` // A brief summary of the message example.
	Headers map[string]interface{} `json:"headers,omitempty"`
	Payload *interface{}           `json:"payload,omitempty"`
}

// WithName sets Name value.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1ExamplesItems) WithName(val string) *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1ExamplesItems {
	h.Name = val
	return h
}

// WithSummary sets Summary value.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1ExamplesItems) WithSummary(val string) *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1ExamplesItems {
	h.Summary = val
	return h
}

// WithHeaders sets Headers value.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1ExamplesItems) WithHeaders(val map[string]interface{}) *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1ExamplesItems {
	h.Headers = val
	return h
}

// WithHeadersItem sets Headers item value.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1ExamplesItems) WithHeadersItem(key string, val interface{}) *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1ExamplesItems {
	if h.Headers == nil {
		h.Headers = make(map[string]interface{}, 1)
	}

	h.Headers[key] = val

	return h
}

// WithPayload sets Payload value.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1ExamplesItems) WithPayload(val interface{}) *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1ExamplesItems {
	h.Payload = &val
	return h
}

type marshalHTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1ExamplesItems HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1ExamplesItems

var knownKeysHTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1ExamplesItems = []string{
	"name",
	"summary",
	"headers",
	"payload",
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1ExamplesItems) UnmarshalJSON(data []byte) error {
	var err error

	mh := marshalHTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1ExamplesItems(*h)

	err = json.Unmarshal(data, &mh)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	if mh.Payload == nil {
		if _, ok := rawMap["payload"]; ok {
			var v interface{}
			mh.Payload = &v
		}
	}

	for _, key := range knownKeysHTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1ExamplesItems {
		delete(rawMap, key)
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1ExamplesItems: %v", offendingKeys)
	}

	*h = HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1ExamplesItems(mh)

	return nil
}

// HTTPAsyncapiComDefinitions240MessageTraitJSON structure is generated from "http://asyncapi.com/definitions/2.4.0/messageTrait.json".
type HTTPAsyncapiComDefinitions240MessageTraitJSON struct {
	SchemaFormat  string                                                      `json:"schemaFormat,omitempty"`
	ContentType   string                                                      `json:"contentType,omitempty"`
	Headers       *HTTPAsyncapiComDefinitions240MessageTraitJSONHeaders       `json:"headers,omitempty"`
	MessageID     string                                                      `json:"messageId,omitempty"`
	CorrelationID *HTTPAsyncapiComDefinitions240MessageTraitJSONCorrelationID `json:"correlationId,omitempty"`
	Tags          []Tag                                                       `json:"tags,omitempty"`
	Summary       string                                                      `json:"summary,omitempty"`      // A brief summary of the message.
	Name          string                                                      `json:"name,omitempty"`         // Name of the message.
	Title         string                                                      `json:"title,omitempty"`        // A human-friendly title for the message.
	Description   string                                                      `json:"description,omitempty"`  // A longer description of the message. CommonMark is allowed.
	ExternalDocs  *ExternalDocs                                               `json:"externalDocs,omitempty"` // Information about external documentation.
	Deprecated    bool                                                        `json:"deprecated,omitempty"`
	Examples      []map[string]interface{}                                    `json:"examples,omitempty"`
	Bindings      *ServerBindingsObject                                       `json:"bindings,omitempty"`
	MapOfAnything map[string]interface{}                                      `json:"-"` // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

// WithSchemaFormat sets SchemaFormat value.
func (h *HTTPAsyncapiComDefinitions240MessageTraitJSON) WithSchemaFormat(val string) *HTTPAsyncapiComDefinitions240MessageTraitJSON {
	h.SchemaFormat = val
	return h
}

// WithContentType sets ContentType value.
func (h *HTTPAsyncapiComDefinitions240MessageTraitJSON) WithContentType(val string) *HTTPAsyncapiComDefinitions240MessageTraitJSON {
	h.ContentType = val
	return h
}

// WithHeaders sets Headers value.
func (h *HTTPAsyncapiComDefinitions240MessageTraitJSON) WithHeaders(val HTTPAsyncapiComDefinitions240MessageTraitJSONHeaders) *HTTPAsyncapiComDefinitions240MessageTraitJSON {
	h.Headers = &val
	return h
}

// HeadersEns ensures returned Headers is not nil.
func (h *HTTPAsyncapiComDefinitions240MessageTraitJSON) HeadersEns() *HTTPAsyncapiComDefinitions240MessageTraitJSONHeaders {
	if h.Headers == nil {
		h.Headers = new(HTTPAsyncapiComDefinitions240MessageTraitJSONHeaders)
	}

	return h.Headers
}

// WithMessageID sets MessageID value.
func (h *HTTPAsyncapiComDefinitions240MessageTraitJSON) WithMessageID(val string) *HTTPAsyncapiComDefinitions240MessageTraitJSON {
	h.MessageID = val
	return h
}

// WithCorrelationID sets CorrelationID value.
func (h *HTTPAsyncapiComDefinitions240MessageTraitJSON) WithCorrelationID(val HTTPAsyncapiComDefinitions240MessageTraitJSONCorrelationID) *HTTPAsyncapiComDefinitions240MessageTraitJSON {
	h.CorrelationID = &val
	return h
}

// CorrelationIDEns ensures returned CorrelationID is not nil.
func (h *HTTPAsyncapiComDefinitions240MessageTraitJSON) CorrelationIDEns() *HTTPAsyncapiComDefinitions240MessageTraitJSONCorrelationID {
	if h.CorrelationID == nil {
		h.CorrelationID = new(HTTPAsyncapiComDefinitions240MessageTraitJSONCorrelationID)
	}

	return h.CorrelationID
}

// WithTags sets Tags value.
func (h *HTTPAsyncapiComDefinitions240MessageTraitJSON) WithTags(val ...Tag) *HTTPAsyncapiComDefinitions240MessageTraitJSON {
	h.Tags = val
	return h
}

// WithSummary sets Summary value.
func (h *HTTPAsyncapiComDefinitions240MessageTraitJSON) WithSummary(val string) *HTTPAsyncapiComDefinitions240MessageTraitJSON {
	h.Summary = val
	return h
}

// WithName sets Name value.
func (h *HTTPAsyncapiComDefinitions240MessageTraitJSON) WithName(val string) *HTTPAsyncapiComDefinitions240MessageTraitJSON {
	h.Name = val
	return h
}

// WithTitle sets Title value.
func (h *HTTPAsyncapiComDefinitions240MessageTraitJSON) WithTitle(val string) *HTTPAsyncapiComDefinitions240MessageTraitJSON {
	h.Title = val
	return h
}

// WithDescription sets Description value.
func (h *HTTPAsyncapiComDefinitions240MessageTraitJSON) WithDescription(val string) *HTTPAsyncapiComDefinitions240MessageTraitJSON {
	h.Description = val
	return h
}

// WithExternalDocs sets ExternalDocs value.
func (h *HTTPAsyncapiComDefinitions240MessageTraitJSON) WithExternalDocs(val ExternalDocs) *HTTPAsyncapiComDefinitions240MessageTraitJSON {
	h.ExternalDocs = &val
	return h
}

// ExternalDocsEns ensures returned ExternalDocs is not nil.
func (h *HTTPAsyncapiComDefinitions240MessageTraitJSON) ExternalDocsEns() *ExternalDocs {
	if h.ExternalDocs == nil {
		h.ExternalDocs = new(ExternalDocs)
	}

	return h.ExternalDocs
}

// WithDeprecated sets Deprecated value.
func (h *HTTPAsyncapiComDefinitions240MessageTraitJSON) WithDeprecated(val bool) *HTTPAsyncapiComDefinitions240MessageTraitJSON {
	h.Deprecated = val
	return h
}

// WithExamples sets Examples value.
func (h *HTTPAsyncapiComDefinitions240MessageTraitJSON) WithExamples(val ...map[string]interface{}) *HTTPAsyncapiComDefinitions240MessageTraitJSON {
	h.Examples = val
	return h
}

// WithBindings sets Bindings value.
func (h *HTTPAsyncapiComDefinitions240MessageTraitJSON) WithBindings(val ServerBindingsObject) *HTTPAsyncapiComDefinitions240MessageTraitJSON {
	h.Bindings = &val
	return h
}

// BindingsEns ensures returned Bindings is not nil.
func (h *HTTPAsyncapiComDefinitions240MessageTraitJSON) BindingsEns() *ServerBindingsObject {
	if h.Bindings == nil {
		h.Bindings = new(ServerBindingsObject)
	}

	return h.Bindings
}

// WithMapOfAnything sets MapOfAnything value.
func (h *HTTPAsyncapiComDefinitions240MessageTraitJSON) WithMapOfAnything(val map[string]interface{}) *HTTPAsyncapiComDefinitions240MessageTraitJSON {
	h.MapOfAnything = val
	return h
}

// WithMapOfAnythingItem sets MapOfAnything item value.
func (h *HTTPAsyncapiComDefinitions240MessageTraitJSON) WithMapOfAnythingItem(key string, val interface{}) *HTTPAsyncapiComDefinitions240MessageTraitJSON {
	if h.MapOfAnything == nil {
		h.MapOfAnything = make(map[string]interface{}, 1)
	}

	h.MapOfAnything[key] = val

	return h
}

type marshalHTTPAsyncapiComDefinitions240MessageTraitJSON HTTPAsyncapiComDefinitions240MessageTraitJSON

var knownKeysHTTPAsyncapiComDefinitions240MessageTraitJSON = []string{
	"schemaFormat",
	"contentType",
	"headers",
	"messageId",
	"correlationId",
	"tags",
	"summary",
	"name",
	"title",
	"description",
	"externalDocs",
	"deprecated",
	"examples",
	"bindings",
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240MessageTraitJSON) UnmarshalJSON(data []byte) error {
	var err error

	mh := marshalHTTPAsyncapiComDefinitions240MessageTraitJSON(*h)

	err = json.Unmarshal(data, &mh)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysHTTPAsyncapiComDefinitions240MessageTraitJSON {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if mh.MapOfAnything == nil {
				mh.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			mh.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in HTTPAsyncapiComDefinitions240MessageTraitJSON: %v", offendingKeys)
	}

	*h = HTTPAsyncapiComDefinitions240MessageTraitJSON(mh)

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240MessageTraitJSON) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalHTTPAsyncapiComDefinitions240MessageTraitJSON(h), h.MapOfAnything)
}

// HTTPAsyncapiComDefinitions240MessageTraitJSONHeadersAllOf1 structure is generated from "http://asyncapi.com/definitions/2.4.0/messageTrait.json->headers/allOf/1".
type HTTPAsyncapiComDefinitions240MessageTraitJSONHeadersAllOf1 struct{}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240MessageTraitJSONHeadersAllOf1) UnmarshalJSON(data []byte) error {
	var err error

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	if v, exists := rawMap["type"]; exists && string(v) != `"object"` {
		return fmt.Errorf(`bad const value for "type" ("object" expected, %s received)`, v)
	}

	delete(rawMap, "type")

	return nil
}

// constHTTPAsyncapiComDefinitions240MessageTraitJSONHeadersAllOf1 is unconditionally added to JSON.
var constHTTPAsyncapiComDefinitions240MessageTraitJSONHeadersAllOf1 = json.RawMessage(`{"type":"object"}`)

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240MessageTraitJSONHeadersAllOf1) MarshalJSON() ([]byte, error) {
	return marshalUnion(constHTTPAsyncapiComDefinitions240MessageTraitJSONHeadersAllOf1)
}

// HTTPAsyncapiComDefinitions240MessageTraitJSONHeaders structure is generated from "http://asyncapi.com/definitions/2.4.0/messageTrait.json->headers".
type HTTPAsyncapiComDefinitions240MessageTraitJSONHeaders struct {
	HTTPAsyncapiComDefinitions240SchemaJSON *HTTPAsyncapiComDefinitions240SchemaJSON                    `json:"-"`
	AllOf1                                  *HTTPAsyncapiComDefinitions240MessageTraitJSONHeadersAllOf1 `json:"-"`
}

// WithHTTPAsyncapiComDefinitions240SchemaJSON sets HTTPAsyncapiComDefinitions240SchemaJSON value.
func (h *HTTPAsyncapiComDefinitions240MessageTraitJSONHeaders) WithHTTPAsyncapiComDefinitions240SchemaJSON(val HTTPAsyncapiComDefinitions240SchemaJSON) *HTTPAsyncapiComDefinitions240MessageTraitJSONHeaders {
	h.HTTPAsyncapiComDefinitions240SchemaJSON = &val
	return h
}

// HTTPAsyncapiComDefinitions240SchemaJSONEns ensures returned HTTPAsyncapiComDefinitions240SchemaJSON is not nil.
func (h *HTTPAsyncapiComDefinitions240MessageTraitJSONHeaders) HTTPAsyncapiComDefinitions240SchemaJSONEns() *HTTPAsyncapiComDefinitions240SchemaJSON {
	if h.HTTPAsyncapiComDefinitions240SchemaJSON == nil {
		h.HTTPAsyncapiComDefinitions240SchemaJSON = new(HTTPAsyncapiComDefinitions240SchemaJSON)
	}

	return h.HTTPAsyncapiComDefinitions240SchemaJSON
}

// WithAllOf1 sets AllOf1 value.
func (h *HTTPAsyncapiComDefinitions240MessageTraitJSONHeaders) WithAllOf1(val HTTPAsyncapiComDefinitions240MessageTraitJSONHeadersAllOf1) *HTTPAsyncapiComDefinitions240MessageTraitJSONHeaders {
	h.AllOf1 = &val
	return h
}

// AllOf1Ens ensures returned AllOf1 is not nil.
func (h *HTTPAsyncapiComDefinitions240MessageTraitJSONHeaders) AllOf1Ens() *HTTPAsyncapiComDefinitions240MessageTraitJSONHeadersAllOf1 {
	if h.AllOf1 == nil {
		h.AllOf1 = new(HTTPAsyncapiComDefinitions240MessageTraitJSONHeadersAllOf1)
	}

	return h.AllOf1
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240MessageTraitJSONHeaders) UnmarshalJSON(data []byte) error {
	var err error

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240SchemaJSON)
	if err != nil {
		return err
	}

	err = json.Unmarshal(data, &h.AllOf1)
	if err != nil {
		return err
	}

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240MessageTraitJSONHeaders) MarshalJSON() ([]byte, error) {
	return marshalUnion(h.HTTPAsyncapiComDefinitions240SchemaJSON, h.AllOf1)
}

// HTTPAsyncapiComDefinitions240MessageTraitJSONCorrelationID structure is generated from "http://asyncapi.com/definitions/2.4.0/messageTrait.json->correlationId".
type HTTPAsyncapiComDefinitions240MessageTraitJSONCorrelationID struct {
	HTTPAsyncapiComDefinitions240ReferenceJSON     *Reference                                      `json:"-"`
	HTTPAsyncapiComDefinitions240CorrelationIDJSON *HTTPAsyncapiComDefinitions240CorrelationIDJSON `json:"-"`
}

// WithHTTPAsyncapiComDefinitions240ReferenceJSON sets HTTPAsyncapiComDefinitions240ReferenceJSON value.
func (h *HTTPAsyncapiComDefinitions240MessageTraitJSONCorrelationID) WithHTTPAsyncapiComDefinitions240ReferenceJSON(val Reference) *HTTPAsyncapiComDefinitions240MessageTraitJSONCorrelationID {
	h.HTTPAsyncapiComDefinitions240ReferenceJSON = &val
	return h
}

// HTTPAsyncapiComDefinitions240ReferenceJSONEns ensures returned HTTPAsyncapiComDefinitions240ReferenceJSON is not nil.
func (h *HTTPAsyncapiComDefinitions240MessageTraitJSONCorrelationID) HTTPAsyncapiComDefinitions240ReferenceJSONEns() *Reference {
	if h.HTTPAsyncapiComDefinitions240ReferenceJSON == nil {
		h.HTTPAsyncapiComDefinitions240ReferenceJSON = new(Reference)
	}

	return h.HTTPAsyncapiComDefinitions240ReferenceJSON
}

// WithHTTPAsyncapiComDefinitions240CorrelationIDJSON sets HTTPAsyncapiComDefinitions240CorrelationIDJSON value.
func (h *HTTPAsyncapiComDefinitions240MessageTraitJSONCorrelationID) WithHTTPAsyncapiComDefinitions240CorrelationIDJSON(val HTTPAsyncapiComDefinitions240CorrelationIDJSON) *HTTPAsyncapiComDefinitions240MessageTraitJSONCorrelationID {
	h.HTTPAsyncapiComDefinitions240CorrelationIDJSON = &val
	return h
}

// HTTPAsyncapiComDefinitions240CorrelationIDJSONEns ensures returned HTTPAsyncapiComDefinitions240CorrelationIDJSON is not nil.
func (h *HTTPAsyncapiComDefinitions240MessageTraitJSONCorrelationID) HTTPAsyncapiComDefinitions240CorrelationIDJSONEns() *HTTPAsyncapiComDefinitions240CorrelationIDJSON {
	if h.HTTPAsyncapiComDefinitions240CorrelationIDJSON == nil {
		h.HTTPAsyncapiComDefinitions240CorrelationIDJSON = new(HTTPAsyncapiComDefinitions240CorrelationIDJSON)
	}

	return h.HTTPAsyncapiComDefinitions240CorrelationIDJSON
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240MessageTraitJSONCorrelationID) UnmarshalJSON(data []byte) error {
	var err error

	oneOfErrors := make(map[string]error, 2)
	oneOfValid := 0

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240ReferenceJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240ReferenceJSON"] = err
		h.HTTPAsyncapiComDefinitions240ReferenceJSON = nil
	} else {
		oneOfValid++
	}

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240CorrelationIDJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240CorrelationIDJSON"] = err
		h.HTTPAsyncapiComDefinitions240CorrelationIDJSON = nil
	} else {
		oneOfValid++
	}

	if oneOfValid != 1 {
		return fmt.Errorf("oneOf constraint failed for HTTPAsyncapiComDefinitions240MessageTraitJSONCorrelationID with %d valid results: %v", oneOfValid, oneOfErrors)
	}

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240MessageTraitJSONCorrelationID) MarshalJSON() ([]byte, error) {
	return marshalUnion(h.HTTPAsyncapiComDefinitions240ReferenceJSON, h.HTTPAsyncapiComDefinitions240CorrelationIDJSON)
}

// HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1TraitsItems structure is generated from "http://asyncapi.com/definitions/2.4.0/message.json/oneOf/1/oneOf/1->traits->items".
type HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1TraitsItems struct {
	HTTPAsyncapiComDefinitions240ReferenceJSON    *Reference                                     `json:"-"`
	HTTPAsyncapiComDefinitions240MessageTraitJSON *HTTPAsyncapiComDefinitions240MessageTraitJSON `json:"-"`
	SliceOfAnything                               []interface{}                                  `json:"-"`
}

// WithHTTPAsyncapiComDefinitions240ReferenceJSON sets HTTPAsyncapiComDefinitions240ReferenceJSON value.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1TraitsItems) WithHTTPAsyncapiComDefinitions240ReferenceJSON(val Reference) *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1TraitsItems {
	h.HTTPAsyncapiComDefinitions240ReferenceJSON = &val
	return h
}

// HTTPAsyncapiComDefinitions240ReferenceJSONEns ensures returned HTTPAsyncapiComDefinitions240ReferenceJSON is not nil.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1TraitsItems) HTTPAsyncapiComDefinitions240ReferenceJSONEns() *Reference {
	if h.HTTPAsyncapiComDefinitions240ReferenceJSON == nil {
		h.HTTPAsyncapiComDefinitions240ReferenceJSON = new(Reference)
	}

	return h.HTTPAsyncapiComDefinitions240ReferenceJSON
}

// WithHTTPAsyncapiComDefinitions240MessageTraitJSON sets HTTPAsyncapiComDefinitions240MessageTraitJSON value.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1TraitsItems) WithHTTPAsyncapiComDefinitions240MessageTraitJSON(val HTTPAsyncapiComDefinitions240MessageTraitJSON) *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1TraitsItems {
	h.HTTPAsyncapiComDefinitions240MessageTraitJSON = &val
	return h
}

// HTTPAsyncapiComDefinitions240MessageTraitJSONEns ensures returned HTTPAsyncapiComDefinitions240MessageTraitJSON is not nil.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1TraitsItems) HTTPAsyncapiComDefinitions240MessageTraitJSONEns() *HTTPAsyncapiComDefinitions240MessageTraitJSON {
	if h.HTTPAsyncapiComDefinitions240MessageTraitJSON == nil {
		h.HTTPAsyncapiComDefinitions240MessageTraitJSON = new(HTTPAsyncapiComDefinitions240MessageTraitJSON)
	}

	return h.HTTPAsyncapiComDefinitions240MessageTraitJSON
}

// WithSliceOfAnything sets SliceOfAnything value.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1TraitsItems) WithSliceOfAnything(val ...interface{}) *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1TraitsItems {
	h.SliceOfAnything = val
	return h
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1TraitsItems) UnmarshalJSON(data []byte) error {
	var err error

	oneOfErrors := make(map[string]error, 3)
	oneOfValid := 0

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240ReferenceJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240ReferenceJSON"] = err
		h.HTTPAsyncapiComDefinitions240ReferenceJSON = nil
	} else {
		oneOfValid++
	}

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240MessageTraitJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240MessageTraitJSON"] = err
		h.HTTPAsyncapiComDefinitions240MessageTraitJSON = nil
	} else {
		oneOfValid++
	}

	err = json.Unmarshal(data, &h.SliceOfAnything)
	if err != nil {
		oneOfErrors["SliceOfAnything"] = err
		h.SliceOfAnything = nil
	} else {
		oneOfValid++
	}

	if oneOfValid != 1 {
		return fmt.Errorf("oneOf constraint failed for HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1TraitsItems with %d valid results: %v", oneOfValid, oneOfErrors)
	}

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1TraitsItems) MarshalJSON() ([]byte, error) {
	return marshalUnion(h.HTTPAsyncapiComDefinitions240ReferenceJSON, h.HTTPAsyncapiComDefinitions240MessageTraitJSON, h.SliceOfAnything)
}

// HTTPAsyncapiComDefinitions240MessageJSONOneOf1 structure is generated from "http://asyncapi.com/definitions/2.4.0/message.json/oneOf/1".
type HTTPAsyncapiComDefinitions240MessageJSONOneOf1 struct {
	OneOf0 *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf0 `json:"-"`
	OneOf1 *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1 `json:"-"`
}

// WithOneOf0 sets OneOf0 value.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1) WithOneOf0(val HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf0) *HTTPAsyncapiComDefinitions240MessageJSONOneOf1 {
	h.OneOf0 = &val
	return h
}

// OneOf0Ens ensures returned OneOf0 is not nil.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1) OneOf0Ens() *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf0 {
	if h.OneOf0 == nil {
		h.OneOf0 = new(HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf0)
	}

	return h.OneOf0
}

// WithOneOf1 sets OneOf1 value.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1) WithOneOf1(val HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1) *HTTPAsyncapiComDefinitions240MessageJSONOneOf1 {
	h.OneOf1 = &val
	return h
}

// OneOf1Ens ensures returned OneOf1 is not nil.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1) OneOf1Ens() *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1 {
	if h.OneOf1 == nil {
		h.OneOf1 = new(HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1)
	}

	return h.OneOf1
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1) UnmarshalJSON(data []byte) error {
	var err error

	oneOfErrors := make(map[string]error, 2)
	oneOfValid := 0

	err = json.Unmarshal(data, &h.OneOf0)
	if err != nil {
		oneOfErrors["OneOf0"] = err
		h.OneOf0 = nil
	} else {
		oneOfValid++
	}

	err = json.Unmarshal(data, &h.OneOf1)
	if err != nil {
		oneOfErrors["OneOf1"] = err
		h.OneOf1 = nil
	} else {
		oneOfValid++
	}

	if oneOfValid != 1 {
		return fmt.Errorf("oneOf constraint failed for HTTPAsyncapiComDefinitions240MessageJSONOneOf1 with %d valid results: %v", oneOfValid, oneOfErrors)
	}

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240MessageJSONOneOf1) MarshalJSON() ([]byte, error) {
	return marshalUnion(h.OneOf0, h.OneOf1)
}

// Message structure is generated from "http://asyncapi.com/definitions/2.4.0/message.json".
type Message struct {
	HTTPAsyncapiComDefinitions240ReferenceJSON     *Reference                                      `json:"-"`
	HTTPAsyncapiComDefinitions240MessageJSONOneOf1 *HTTPAsyncapiComDefinitions240MessageJSONOneOf1 `json:"-"`
}

// WithHTTPAsyncapiComDefinitions240ReferenceJSON sets HTTPAsyncapiComDefinitions240ReferenceJSON value.
func (m *Message) WithHTTPAsyncapiComDefinitions240ReferenceJSON(val Reference) *Message {
	m.HTTPAsyncapiComDefinitions240ReferenceJSON = &val
	return m
}

// HTTPAsyncapiComDefinitions240ReferenceJSONEns ensures returned HTTPAsyncapiComDefinitions240ReferenceJSON is not nil.
func (m *Message) HTTPAsyncapiComDefinitions240ReferenceJSONEns() *Reference {
	if m.HTTPAsyncapiComDefinitions240ReferenceJSON == nil {
		m.HTTPAsyncapiComDefinitions240ReferenceJSON = new(Reference)
	}

	return m.HTTPAsyncapiComDefinitions240ReferenceJSON
}

// WithHTTPAsyncapiComDefinitions240MessageJSONOneOf1 sets HTTPAsyncapiComDefinitions240MessageJSONOneOf1 value.
func (m *Message) WithHTTPAsyncapiComDefinitions240MessageJSONOneOf1(val HTTPAsyncapiComDefinitions240MessageJSONOneOf1) *Message {
	m.HTTPAsyncapiComDefinitions240MessageJSONOneOf1 = &val
	return m
}

// HTTPAsyncapiComDefinitions240MessageJSONOneOf1Ens ensures returned HTTPAsyncapiComDefinitions240MessageJSONOneOf1 is not nil.
func (m *Message) HTTPAsyncapiComDefinitions240MessageJSONOneOf1Ens() *HTTPAsyncapiComDefinitions240MessageJSONOneOf1 {
	if m.HTTPAsyncapiComDefinitions240MessageJSONOneOf1 == nil {
		m.HTTPAsyncapiComDefinitions240MessageJSONOneOf1 = new(HTTPAsyncapiComDefinitions240MessageJSONOneOf1)
	}

	return m.HTTPAsyncapiComDefinitions240MessageJSONOneOf1
}

// UnmarshalJSON decodes JSON.
func (m *Message) UnmarshalJSON(data []byte) error {
	var err error

	oneOfErrors := make(map[string]error, 2)
	oneOfValid := 0

	err = json.Unmarshal(data, &m.HTTPAsyncapiComDefinitions240ReferenceJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240ReferenceJSON"] = err
		m.HTTPAsyncapiComDefinitions240ReferenceJSON = nil
	} else {
		oneOfValid++
	}

	err = json.Unmarshal(data, &m.HTTPAsyncapiComDefinitions240MessageJSONOneOf1)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240MessageJSONOneOf1"] = err
		m.HTTPAsyncapiComDefinitions240MessageJSONOneOf1 = nil
	} else {
		oneOfValid++
	}

	if oneOfValid != 1 {
		return fmt.Errorf("oneOf constraint failed for Message with %d valid results: %v", oneOfValid, oneOfErrors)
	}

	return nil
}

// MarshalJSON encodes JSON.
func (m Message) MarshalJSON() ([]byte, error) {
	return marshalUnion(m.HTTPAsyncapiComDefinitions240ReferenceJSON, m.HTTPAsyncapiComDefinitions240MessageJSONOneOf1)
}

// Components structure is generated from "http://asyncapi.com/definitions/2.4.0/components.json".
//
// An object to hold a set of reusable objects for different aspects of the AsyncAPI Specification.
type Components struct {
	Schemas           map[string]HTTPAsyncapiComDefinitions240SchemaJSON          `json:"schemas,omitempty"` // JSON objects describing schemas the API uses.
	Servers           map[string]Servers                                          `json:"servers,omitempty"` // An object representing multiple servers.
	Channels          map[string]ChannelItem                                      `json:"channels,omitempty"`
	ServerVariables   map[string]ServerVariable                                   `json:"serverVariables,omitempty"`
	Messages          map[string]Message                                          `json:"messages,omitempty"` // JSON objects describing the messages being consumed and produced by the API.
	SecuritySchemes   *HTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemes `json:"securitySchemes,omitempty"`
	Parameters        map[string]Parameter                                        `json:"parameters,omitempty"` // JSON objects describing re-usable channel parameters.
	CorrelationIds    *HTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIds  `json:"correlationIds,omitempty"`
	OperationTraits   map[string]OperationTrait                                   `json:"operationTraits,omitempty"`
	MessageTraits     map[string]HTTPAsyncapiComDefinitions240MessageTraitJSON    `json:"messageTraits,omitempty"`
	ServerBindings    map[string]ServerBindingsObject                             `json:"serverBindings,omitempty"`
	ChannelBindings   map[string]ServerBindingsObject                             `json:"channelBindings,omitempty"`
	OperationBindings map[string]ServerBindingsObject                             `json:"operationBindings,omitempty"`
	MessageBindings   map[string]ServerBindingsObject                             `json:"messageBindings,omitempty"`
	MapOfAnything     map[string]interface{}                                      `json:"-"` // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

// WithSchemas sets Schemas value.
func (c *Components) WithSchemas(val map[string]HTTPAsyncapiComDefinitions240SchemaJSON) *Components {
	c.Schemas = val
	return c
}

// WithSchemasItem sets Schemas item value.
func (c *Components) WithSchemasItem(key string, val HTTPAsyncapiComDefinitions240SchemaJSON) *Components {
	if c.Schemas == nil {
		c.Schemas = make(map[string]HTTPAsyncapiComDefinitions240SchemaJSON, 1)
	}

	c.Schemas[key] = val

	return c
}

// WithServers sets Servers value.
func (c *Components) WithServers(val map[string]Servers) *Components {
	c.Servers = val
	return c
}

// WithServersItem sets Servers item value.
func (c *Components) WithServersItem(key string, val Servers) *Components {
	if c.Servers == nil {
		c.Servers = make(map[string]Servers, 1)
	}

	c.Servers[key] = val

	return c
}

// WithChannels sets Channels value.
func (c *Components) WithChannels(val map[string]ChannelItem) *Components {
	c.Channels = val
	return c
}

// WithChannelsItem sets Channels item value.
func (c *Components) WithChannelsItem(key string, val ChannelItem) *Components {
	if c.Channels == nil {
		c.Channels = make(map[string]ChannelItem, 1)
	}

	c.Channels[key] = val

	return c
}

// WithServerVariables sets ServerVariables value.
func (c *Components) WithServerVariables(val map[string]ServerVariable) *Components {
	c.ServerVariables = val
	return c
}

// WithServerVariablesItem sets ServerVariables item value.
func (c *Components) WithServerVariablesItem(key string, val ServerVariable) *Components {
	if c.ServerVariables == nil {
		c.ServerVariables = make(map[string]ServerVariable, 1)
	}

	c.ServerVariables[key] = val

	return c
}

// WithMessages sets Messages value.
func (c *Components) WithMessages(val map[string]Message) *Components {
	c.Messages = val
	return c
}

// WithMessagesItem sets Messages item value.
func (c *Components) WithMessagesItem(key string, val Message) *Components {
	if c.Messages == nil {
		c.Messages = make(map[string]Message, 1)
	}

	c.Messages[key] = val

	return c
}

// WithSecuritySchemes sets SecuritySchemes value.
func (c *Components) WithSecuritySchemes(val HTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemes) *Components {
	c.SecuritySchemes = &val
	return c
}

// SecuritySchemesEns ensures returned SecuritySchemes is not nil.
func (c *Components) SecuritySchemesEns() *HTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemes {
	if c.SecuritySchemes == nil {
		c.SecuritySchemes = new(HTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemes)
	}

	return c.SecuritySchemes
}

// WithParameters sets Parameters value.
func (c *Components) WithParameters(val map[string]Parameter) *Components {
	c.Parameters = val
	return c
}

// WithParametersItem sets Parameters item value.
func (c *Components) WithParametersItem(key string, val Parameter) *Components {
	if c.Parameters == nil {
		c.Parameters = make(map[string]Parameter, 1)
	}

	c.Parameters[key] = val

	return c
}

// WithCorrelationIds sets CorrelationIds value.
func (c *Components) WithCorrelationIds(val HTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIds) *Components {
	c.CorrelationIds = &val
	return c
}

// CorrelationIdsEns ensures returned CorrelationIds is not nil.
func (c *Components) CorrelationIdsEns() *HTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIds {
	if c.CorrelationIds == nil {
		c.CorrelationIds = new(HTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIds)
	}

	return c.CorrelationIds
}

// WithOperationTraits sets OperationTraits value.
func (c *Components) WithOperationTraits(val map[string]OperationTrait) *Components {
	c.OperationTraits = val
	return c
}

// WithOperationTraitsItem sets OperationTraits item value.
func (c *Components) WithOperationTraitsItem(key string, val OperationTrait) *Components {
	if c.OperationTraits == nil {
		c.OperationTraits = make(map[string]OperationTrait, 1)
	}

	c.OperationTraits[key] = val

	return c
}

// WithMessageTraits sets MessageTraits value.
func (c *Components) WithMessageTraits(val map[string]HTTPAsyncapiComDefinitions240MessageTraitJSON) *Components {
	c.MessageTraits = val
	return c
}

// WithMessageTraitsItem sets MessageTraits item value.
func (c *Components) WithMessageTraitsItem(key string, val HTTPAsyncapiComDefinitions240MessageTraitJSON) *Components {
	if c.MessageTraits == nil {
		c.MessageTraits = make(map[string]HTTPAsyncapiComDefinitions240MessageTraitJSON, 1)
	}

	c.MessageTraits[key] = val

	return c
}

// WithServerBindings sets ServerBindings value.
func (c *Components) WithServerBindings(val map[string]ServerBindingsObject) *Components {
	c.ServerBindings = val
	return c
}

// WithServerBindingsItem sets ServerBindings item value.
func (c *Components) WithServerBindingsItem(key string, val ServerBindingsObject) *Components {
	if c.ServerBindings == nil {
		c.ServerBindings = make(map[string]ServerBindingsObject, 1)
	}

	c.ServerBindings[key] = val

	return c
}

// WithChannelBindings sets ChannelBindings value.
func (c *Components) WithChannelBindings(val map[string]ServerBindingsObject) *Components {
	c.ChannelBindings = val
	return c
}

// WithChannelBindingsItem sets ChannelBindings item value.
func (c *Components) WithChannelBindingsItem(key string, val ServerBindingsObject) *Components {
	if c.ChannelBindings == nil {
		c.ChannelBindings = make(map[string]ServerBindingsObject, 1)
	}

	c.ChannelBindings[key] = val

	return c
}

// WithOperationBindings sets OperationBindings value.
func (c *Components) WithOperationBindings(val map[string]ServerBindingsObject) *Components {
	c.OperationBindings = val
	return c
}

// WithOperationBindingsItem sets OperationBindings item value.
func (c *Components) WithOperationBindingsItem(key string, val ServerBindingsObject) *Components {
	if c.OperationBindings == nil {
		c.OperationBindings = make(map[string]ServerBindingsObject, 1)
	}

	c.OperationBindings[key] = val

	return c
}

// WithMessageBindings sets MessageBindings value.
func (c *Components) WithMessageBindings(val map[string]ServerBindingsObject) *Components {
	c.MessageBindings = val
	return c
}

// WithMessageBindingsItem sets MessageBindings item value.
func (c *Components) WithMessageBindingsItem(key string, val ServerBindingsObject) *Components {
	if c.MessageBindings == nil {
		c.MessageBindings = make(map[string]ServerBindingsObject, 1)
	}

	c.MessageBindings[key] = val

	return c
}

// WithMapOfAnything sets MapOfAnything value.
func (c *Components) WithMapOfAnything(val map[string]interface{}) *Components {
	c.MapOfAnything = val
	return c
}

// WithMapOfAnythingItem sets MapOfAnything item value.
func (c *Components) WithMapOfAnythingItem(key string, val interface{}) *Components {
	if c.MapOfAnything == nil {
		c.MapOfAnything = make(map[string]interface{}, 1)
	}

	c.MapOfAnything[key] = val

	return c
}

type marshalComponents Components

var knownKeysComponents = []string{
	"schemas",
	"servers",
	"channels",
	"serverVariables",
	"messages",
	"securitySchemes",
	"parameters",
	"correlationIds",
	"operationTraits",
	"messageTraits",
	"serverBindings",
	"channelBindings",
	"operationBindings",
	"messageBindings",
}

// UnmarshalJSON decodes JSON.
func (c *Components) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalComponents(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysComponents {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if mc.MapOfAnything == nil {
				mc.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			mc.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in Components: %v", offendingKeys)
	}

	*c = Components(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c Components) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalComponents(c), c.MapOfAnything)
}

// HTTPAsyncapiComDefinitions240UserPasswordJSON structure is generated from "http://asyncapi.com/definitions/2.4.0/userPassword.json".
type HTTPAsyncapiComDefinitions240UserPasswordJSON struct {
	Description   string                 `json:"description,omitempty"`
	MapOfAnything map[string]interface{} `json:"-"` // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

// WithDescription sets Description value.
func (h *HTTPAsyncapiComDefinitions240UserPasswordJSON) WithDescription(val string) *HTTPAsyncapiComDefinitions240UserPasswordJSON {
	h.Description = val
	return h
}

// WithMapOfAnything sets MapOfAnything value.
func (h *HTTPAsyncapiComDefinitions240UserPasswordJSON) WithMapOfAnything(val map[string]interface{}) *HTTPAsyncapiComDefinitions240UserPasswordJSON {
	h.MapOfAnything = val
	return h
}

// WithMapOfAnythingItem sets MapOfAnything item value.
func (h *HTTPAsyncapiComDefinitions240UserPasswordJSON) WithMapOfAnythingItem(key string, val interface{}) *HTTPAsyncapiComDefinitions240UserPasswordJSON {
	if h.MapOfAnything == nil {
		h.MapOfAnything = make(map[string]interface{}, 1)
	}

	h.MapOfAnything[key] = val

	return h
}

type marshalHTTPAsyncapiComDefinitions240UserPasswordJSON HTTPAsyncapiComDefinitions240UserPasswordJSON

var knownKeysHTTPAsyncapiComDefinitions240UserPasswordJSON = []string{
	"description",
	"type",
}

var requireKeysHTTPAsyncapiComDefinitions240UserPasswordJSON = []string{
	"type",
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240UserPasswordJSON) UnmarshalJSON(data []byte) error {
	var err error

	mh := marshalHTTPAsyncapiComDefinitions240UserPasswordJSON(*h)

	err = json.Unmarshal(data, &mh)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range requireKeysHTTPAsyncapiComDefinitions240UserPasswordJSON {
		if _, found := rawMap[key]; !found {
			return errors.New("required key missing: " + key)
		}
	}

	if v, exists := rawMap["type"]; exists && string(v) != `"userPassword"` {
		return fmt.Errorf(`bad const value for "type" ("userPassword" expected, %s received)`, v)
	}

	delete(rawMap, "type")

	for _, key := range knownKeysHTTPAsyncapiComDefinitions240UserPasswordJSON {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if mh.MapOfAnything == nil {
				mh.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			mh.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in HTTPAsyncapiComDefinitions240UserPasswordJSON: %v", offendingKeys)
	}

	*h = HTTPAsyncapiComDefinitions240UserPasswordJSON(mh)

	return nil
}

// constHTTPAsyncapiComDefinitions240UserPasswordJSON is unconditionally added to JSON.
var constHTTPAsyncapiComDefinitions240UserPasswordJSON = json.RawMessage(`{"type":"userPassword"}`)

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240UserPasswordJSON) MarshalJSON() ([]byte, error) {
	return marshalUnion(constHTTPAsyncapiComDefinitions240UserPasswordJSON, marshalHTTPAsyncapiComDefinitions240UserPasswordJSON(h), h.MapOfAnything)
}

// HTTPAsyncapiComDefinitions240APIKeyJSON structure is generated from "http://asyncapi.com/definitions/2.4.0/apiKey.json".
type HTTPAsyncapiComDefinitions240APIKeyJSON struct {
	In            HTTPAsyncapiComDefinitions240APIKeyJSONIn `json:"in"` // Required.
	Description   string                                    `json:"description,omitempty"`
	MapOfAnything map[string]interface{}                    `json:"-"` // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

// WithIn sets In value.
func (h *HTTPAsyncapiComDefinitions240APIKeyJSON) WithIn(val HTTPAsyncapiComDefinitions240APIKeyJSONIn) *HTTPAsyncapiComDefinitions240APIKeyJSON {
	h.In = val
	return h
}

// WithDescription sets Description value.
func (h *HTTPAsyncapiComDefinitions240APIKeyJSON) WithDescription(val string) *HTTPAsyncapiComDefinitions240APIKeyJSON {
	h.Description = val
	return h
}

// WithMapOfAnything sets MapOfAnything value.
func (h *HTTPAsyncapiComDefinitions240APIKeyJSON) WithMapOfAnything(val map[string]interface{}) *HTTPAsyncapiComDefinitions240APIKeyJSON {
	h.MapOfAnything = val
	return h
}

// WithMapOfAnythingItem sets MapOfAnything item value.
func (h *HTTPAsyncapiComDefinitions240APIKeyJSON) WithMapOfAnythingItem(key string, val interface{}) *HTTPAsyncapiComDefinitions240APIKeyJSON {
	if h.MapOfAnything == nil {
		h.MapOfAnything = make(map[string]interface{}, 1)
	}

	h.MapOfAnything[key] = val

	return h
}

type marshalHTTPAsyncapiComDefinitions240APIKeyJSON HTTPAsyncapiComDefinitions240APIKeyJSON

var knownKeysHTTPAsyncapiComDefinitions240APIKeyJSON = []string{
	"in",
	"description",
	"type",
}

var requireKeysHTTPAsyncapiComDefinitions240APIKeyJSON = []string{
	"type",
	"in",
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240APIKeyJSON) UnmarshalJSON(data []byte) error {
	var err error

	mh := marshalHTTPAsyncapiComDefinitions240APIKeyJSON(*h)

	err = json.Unmarshal(data, &mh)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range requireKeysHTTPAsyncapiComDefinitions240APIKeyJSON {
		if _, found := rawMap[key]; !found {
			return errors.New("required key missing: " + key)
		}
	}

	if v, exists := rawMap["type"]; exists && string(v) != `"apiKey"` {
		return fmt.Errorf(`bad const value for "type" ("apiKey" expected, %s received)`, v)
	}

	delete(rawMap, "type")

	for _, key := range knownKeysHTTPAsyncapiComDefinitions240APIKeyJSON {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if mh.MapOfAnything == nil {
				mh.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			mh.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in HTTPAsyncapiComDefinitions240APIKeyJSON: %v", offendingKeys)
	}

	*h = HTTPAsyncapiComDefinitions240APIKeyJSON(mh)

	return nil
}

// constHTTPAsyncapiComDefinitions240APIKeyJSON is unconditionally added to JSON.
var constHTTPAsyncapiComDefinitions240APIKeyJSON = json.RawMessage(`{"type":"apiKey"}`)

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240APIKeyJSON) MarshalJSON() ([]byte, error) {
	return marshalUnion(constHTTPAsyncapiComDefinitions240APIKeyJSON, marshalHTTPAsyncapiComDefinitions240APIKeyJSON(h), h.MapOfAnything)
}

// HTTPAsyncapiComDefinitions240X509JSON structure is generated from "http://asyncapi.com/definitions/2.4.0/X509.json".
type HTTPAsyncapiComDefinitions240X509JSON struct {
	Description   string                 `json:"description,omitempty"`
	MapOfAnything map[string]interface{} `json:"-"` // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

// WithDescription sets Description value.
func (h *HTTPAsyncapiComDefinitions240X509JSON) WithDescription(val string) *HTTPAsyncapiComDefinitions240X509JSON {
	h.Description = val
	return h
}

// WithMapOfAnything sets MapOfAnything value.
func (h *HTTPAsyncapiComDefinitions240X509JSON) WithMapOfAnything(val map[string]interface{}) *HTTPAsyncapiComDefinitions240X509JSON {
	h.MapOfAnything = val
	return h
}

// WithMapOfAnythingItem sets MapOfAnything item value.
func (h *HTTPAsyncapiComDefinitions240X509JSON) WithMapOfAnythingItem(key string, val interface{}) *HTTPAsyncapiComDefinitions240X509JSON {
	if h.MapOfAnything == nil {
		h.MapOfAnything = make(map[string]interface{}, 1)
	}

	h.MapOfAnything[key] = val

	return h
}

type marshalHTTPAsyncapiComDefinitions240X509JSON HTTPAsyncapiComDefinitions240X509JSON

var knownKeysHTTPAsyncapiComDefinitions240X509JSON = []string{
	"description",
	"type",
}

var requireKeysHTTPAsyncapiComDefinitions240X509JSON = []string{
	"type",
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240X509JSON) UnmarshalJSON(data []byte) error {
	var err error

	mh := marshalHTTPAsyncapiComDefinitions240X509JSON(*h)

	err = json.Unmarshal(data, &mh)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range requireKeysHTTPAsyncapiComDefinitions240X509JSON {
		if _, found := rawMap[key]; !found {
			return errors.New("required key missing: " + key)
		}
	}

	if v, exists := rawMap["type"]; exists && string(v) != `"X509"` {
		return fmt.Errorf(`bad const value for "type" ("X509" expected, %s received)`, v)
	}

	delete(rawMap, "type")

	for _, key := range knownKeysHTTPAsyncapiComDefinitions240X509JSON {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if mh.MapOfAnything == nil {
				mh.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			mh.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in HTTPAsyncapiComDefinitions240X509JSON: %v", offendingKeys)
	}

	*h = HTTPAsyncapiComDefinitions240X509JSON(mh)

	return nil
}

// constHTTPAsyncapiComDefinitions240X509JSON is unconditionally added to JSON.
var constHTTPAsyncapiComDefinitions240X509JSON = json.RawMessage(`{"type":"X509"}`)

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240X509JSON) MarshalJSON() ([]byte, error) {
	return marshalUnion(constHTTPAsyncapiComDefinitions240X509JSON, marshalHTTPAsyncapiComDefinitions240X509JSON(h), h.MapOfAnything)
}

// HTTPAsyncapiComDefinitions240SymmetricEncryptionJSON structure is generated from "http://asyncapi.com/definitions/2.4.0/symmetricEncryption.json".
type HTTPAsyncapiComDefinitions240SymmetricEncryptionJSON struct {
	Description   string                 `json:"description,omitempty"`
	MapOfAnything map[string]interface{} `json:"-"` // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

// WithDescription sets Description value.
func (h *HTTPAsyncapiComDefinitions240SymmetricEncryptionJSON) WithDescription(val string) *HTTPAsyncapiComDefinitions240SymmetricEncryptionJSON {
	h.Description = val
	return h
}

// WithMapOfAnything sets MapOfAnything value.
func (h *HTTPAsyncapiComDefinitions240SymmetricEncryptionJSON) WithMapOfAnything(val map[string]interface{}) *HTTPAsyncapiComDefinitions240SymmetricEncryptionJSON {
	h.MapOfAnything = val
	return h
}

// WithMapOfAnythingItem sets MapOfAnything item value.
func (h *HTTPAsyncapiComDefinitions240SymmetricEncryptionJSON) WithMapOfAnythingItem(key string, val interface{}) *HTTPAsyncapiComDefinitions240SymmetricEncryptionJSON {
	if h.MapOfAnything == nil {
		h.MapOfAnything = make(map[string]interface{}, 1)
	}

	h.MapOfAnything[key] = val

	return h
}

type marshalHTTPAsyncapiComDefinitions240SymmetricEncryptionJSON HTTPAsyncapiComDefinitions240SymmetricEncryptionJSON

var knownKeysHTTPAsyncapiComDefinitions240SymmetricEncryptionJSON = []string{
	"description",
	"type",
}

var requireKeysHTTPAsyncapiComDefinitions240SymmetricEncryptionJSON = []string{
	"type",
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240SymmetricEncryptionJSON) UnmarshalJSON(data []byte) error {
	var err error

	mh := marshalHTTPAsyncapiComDefinitions240SymmetricEncryptionJSON(*h)

	err = json.Unmarshal(data, &mh)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range requireKeysHTTPAsyncapiComDefinitions240SymmetricEncryptionJSON {
		if _, found := rawMap[key]; !found {
			return errors.New("required key missing: " + key)
		}
	}

	if v, exists := rawMap["type"]; exists && string(v) != `"symmetricEncryption"` {
		return fmt.Errorf(`bad const value for "type" ("symmetricEncryption" expected, %s received)`, v)
	}

	delete(rawMap, "type")

	for _, key := range knownKeysHTTPAsyncapiComDefinitions240SymmetricEncryptionJSON {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if mh.MapOfAnything == nil {
				mh.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			mh.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in HTTPAsyncapiComDefinitions240SymmetricEncryptionJSON: %v", offendingKeys)
	}

	*h = HTTPAsyncapiComDefinitions240SymmetricEncryptionJSON(mh)

	return nil
}

// constHTTPAsyncapiComDefinitions240SymmetricEncryptionJSON is unconditionally added to JSON.
var constHTTPAsyncapiComDefinitions240SymmetricEncryptionJSON = json.RawMessage(`{"type":"symmetricEncryption"}`)

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240SymmetricEncryptionJSON) MarshalJSON() ([]byte, error) {
	return marshalUnion(constHTTPAsyncapiComDefinitions240SymmetricEncryptionJSON, marshalHTTPAsyncapiComDefinitions240SymmetricEncryptionJSON(h), h.MapOfAnything)
}

// HTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON structure is generated from "http://asyncapi.com/definitions/2.4.0/asymmetricEncryption.json".
type HTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON struct {
	Description   string                 `json:"description,omitempty"`
	MapOfAnything map[string]interface{} `json:"-"` // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

// WithDescription sets Description value.
func (h *HTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON) WithDescription(val string) *HTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON {
	h.Description = val
	return h
}

// WithMapOfAnything sets MapOfAnything value.
func (h *HTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON) WithMapOfAnything(val map[string]interface{}) *HTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON {
	h.MapOfAnything = val
	return h
}

// WithMapOfAnythingItem sets MapOfAnything item value.
func (h *HTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON) WithMapOfAnythingItem(key string, val interface{}) *HTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON {
	if h.MapOfAnything == nil {
		h.MapOfAnything = make(map[string]interface{}, 1)
	}

	h.MapOfAnything[key] = val

	return h
}

type marshalHTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON HTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON

var knownKeysHTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON = []string{
	"description",
	"type",
}

var requireKeysHTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON = []string{
	"type",
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON) UnmarshalJSON(data []byte) error {
	var err error

	mh := marshalHTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON(*h)

	err = json.Unmarshal(data, &mh)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range requireKeysHTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON {
		if _, found := rawMap[key]; !found {
			return errors.New("required key missing: " + key)
		}
	}

	if v, exists := rawMap["type"]; exists && string(v) != `"asymmetricEncryption"` {
		return fmt.Errorf(`bad const value for "type" ("asymmetricEncryption" expected, %s received)`, v)
	}

	delete(rawMap, "type")

	for _, key := range knownKeysHTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if mh.MapOfAnything == nil {
				mh.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			mh.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in HTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON: %v", offendingKeys)
	}

	*h = HTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON(mh)

	return nil
}

// constHTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON is unconditionally added to JSON.
var constHTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON = json.RawMessage(`{"type":"asymmetricEncryption"}`)

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON) MarshalJSON() ([]byte, error) {
	return marshalUnion(constHTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON, marshalHTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON(h), h.MapOfAnything)
}

// HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON structure is generated from "http://asyncapi.com/definitions/2.4.0/NonBearerHTTPSecurityScheme.json".
type HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON struct {
	Scheme        string                 `json:"scheme"` // Required.
	Description   string                 `json:"description,omitempty"`
	MapOfAnything map[string]interface{} `json:"-"` // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

// WithScheme sets Scheme value.
func (h *HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON) WithScheme(val string) *HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON {
	h.Scheme = val
	return h
}

// WithDescription sets Description value.
func (h *HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON) WithDescription(val string) *HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON {
	h.Description = val
	return h
}

// WithMapOfAnything sets MapOfAnything value.
func (h *HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON) WithMapOfAnything(val map[string]interface{}) *HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON {
	h.MapOfAnything = val
	return h
}

// WithMapOfAnythingItem sets MapOfAnything item value.
func (h *HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON) WithMapOfAnythingItem(key string, val interface{}) *HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON {
	if h.MapOfAnything == nil {
		h.MapOfAnything = make(map[string]interface{}, 1)
	}

	h.MapOfAnything[key] = val

	return h
}

type marshalHTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON

var knownKeysHTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON = []string{
	"scheme",
	"description",
	"type",
}

var requireKeysHTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON = []string{
	"scheme",
	"type",
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON) UnmarshalJSON(data []byte) error {
	var err error

	var not HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSONNot

	if json.Unmarshal(data, &not) == nil {
		return errors.New("not constraint failed for HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON")
	}

	mh := marshalHTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON(*h)

	err = json.Unmarshal(data, &mh)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range requireKeysHTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON {
		if _, found := rawMap[key]; !found {
			return errors.New("required key missing: " + key)
		}
	}

	if v, exists := rawMap["type"]; exists && string(v) != `"http"` {
		return fmt.Errorf(`bad const value for "type" ("http" expected, %s received)`, v)
	}

	delete(rawMap, "type")

	for _, key := range knownKeysHTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if mh.MapOfAnything == nil {
				mh.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			mh.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON: %v", offendingKeys)
	}

	*h = HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON(mh)

	return nil
}

// constHTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON is unconditionally added to JSON.
var constHTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON = json.RawMessage(`{"type":"http"}`)

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON) MarshalJSON() ([]byte, error) {
	return marshalUnion(constHTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON, marshalHTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON(h), h.MapOfAnything)
}

// HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSONNot structure is generated from "http://asyncapi.com/definitions/2.4.0/NonBearerHTTPSecurityScheme.json->not".
type HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSONNot struct{}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSONNot) UnmarshalJSON(data []byte) error {
	var err error

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	if v, exists := rawMap["scheme"]; exists && string(v) != `"bearer"` {
		return fmt.Errorf(`bad const value for "scheme" ("bearer" expected, %s received)`, v)
	}

	delete(rawMap, "scheme")

	return nil
}

// constHTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSONNot is unconditionally added to JSON.
var constHTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSONNot = json.RawMessage(`{"scheme":"bearer"}`)

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSONNot) MarshalJSON() ([]byte, error) {
	return marshalUnion(constHTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSONNot)
}

// HTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON structure is generated from "http://asyncapi.com/definitions/2.4.0/BearerHTTPSecurityScheme.json".
type HTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON struct {
	BearerFormat  string                 `json:"bearerFormat,omitempty"`
	Description   string                 `json:"description,omitempty"`
	MapOfAnything map[string]interface{} `json:"-"` // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

// WithBearerFormat sets BearerFormat value.
func (h *HTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON) WithBearerFormat(val string) *HTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON {
	h.BearerFormat = val
	return h
}

// WithDescription sets Description value.
func (h *HTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON) WithDescription(val string) *HTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON {
	h.Description = val
	return h
}

// WithMapOfAnything sets MapOfAnything value.
func (h *HTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON) WithMapOfAnything(val map[string]interface{}) *HTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON {
	h.MapOfAnything = val
	return h
}

// WithMapOfAnythingItem sets MapOfAnything item value.
func (h *HTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON) WithMapOfAnythingItem(key string, val interface{}) *HTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON {
	if h.MapOfAnything == nil {
		h.MapOfAnything = make(map[string]interface{}, 1)
	}

	h.MapOfAnything[key] = val

	return h
}

type marshalHTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON HTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON

var knownKeysHTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON = []string{
	"bearerFormat",
	"description",
	"scheme",
	"type",
}

var requireKeysHTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON = []string{
	"type",
	"scheme",
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON) UnmarshalJSON(data []byte) error {
	var err error

	mh := marshalHTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON(*h)

	err = json.Unmarshal(data, &mh)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range requireKeysHTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON {
		if _, found := rawMap[key]; !found {
			return errors.New("required key missing: " + key)
		}
	}

	if v, exists := rawMap["scheme"]; exists && string(v) != `"bearer"` {
		return fmt.Errorf(`bad const value for "scheme" ("bearer" expected, %s received)`, v)
	}

	delete(rawMap, "scheme")

	if v, exists := rawMap["type"]; exists && string(v) != `"http"` {
		return fmt.Errorf(`bad const value for "type" ("http" expected, %s received)`, v)
	}

	delete(rawMap, "type")

	for _, key := range knownKeysHTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if mh.MapOfAnything == nil {
				mh.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			mh.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in HTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON: %v", offendingKeys)
	}

	*h = HTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON(mh)

	return nil
}

// constHTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON is unconditionally added to JSON.
var constHTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON = json.RawMessage(`{"scheme":"bearer","type":"http"}`)

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON) MarshalJSON() ([]byte, error) {
	return marshalUnion(constHTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON, marshalHTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON(h), h.MapOfAnything)
}

// HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON structure is generated from "http://asyncapi.com/definitions/2.4.0/APIKeyHTTPSecurityScheme.json".
type HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON struct {
	Name          string                         `json:"name"` // Required.
	In            APIKeyHTTPSecuritySchemeJSONIn `json:"in"`   // Required.
	Description   string                         `json:"description,omitempty"`
	MapOfAnything map[string]interface{}         `json:"-"` // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

// WithName sets Name value.
func (h *HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON) WithName(val string) *HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON {
	h.Name = val
	return h
}

// WithIn sets In value.
func (h *HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON) WithIn(val APIKeyHTTPSecuritySchemeJSONIn) *HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON {
	h.In = val
	return h
}

// WithDescription sets Description value.
func (h *HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON) WithDescription(val string) *HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON {
	h.Description = val
	return h
}

// WithMapOfAnything sets MapOfAnything value.
func (h *HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON) WithMapOfAnything(val map[string]interface{}) *HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON {
	h.MapOfAnything = val
	return h
}

// WithMapOfAnythingItem sets MapOfAnything item value.
func (h *HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON) WithMapOfAnythingItem(key string, val interface{}) *HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON {
	if h.MapOfAnything == nil {
		h.MapOfAnything = make(map[string]interface{}, 1)
	}

	h.MapOfAnything[key] = val

	return h
}

type marshalHTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON

var knownKeysHTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON = []string{
	"name",
	"in",
	"description",
	"type",
}

var requireKeysHTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON = []string{
	"type",
	"name",
	"in",
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON) UnmarshalJSON(data []byte) error {
	var err error

	mh := marshalHTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON(*h)

	err = json.Unmarshal(data, &mh)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range requireKeysHTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON {
		if _, found := rawMap[key]; !found {
			return errors.New("required key missing: " + key)
		}
	}

	if v, exists := rawMap["type"]; exists && string(v) != `"httpApiKey"` {
		return fmt.Errorf(`bad const value for "type" ("httpApiKey" expected, %s received)`, v)
	}

	delete(rawMap, "type")

	for _, key := range knownKeysHTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if mh.MapOfAnything == nil {
				mh.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			mh.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON: %v", offendingKeys)
	}

	*h = HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON(mh)

	return nil
}

// constHTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON is unconditionally added to JSON.
var constHTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON = json.RawMessage(`{"type":"httpApiKey"}`)

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON) MarshalJSON() ([]byte, error) {
	return marshalUnion(constHTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON, marshalHTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON(h), h.MapOfAnything)
}

// HTTPAsyncapiComDefinitions240HTTPSecuritySchemeJSON structure is generated from "http://asyncapi.com/definitions/2.4.0/HTTPSecurityScheme.json".
type HTTPAsyncapiComDefinitions240HTTPSecuritySchemeJSON struct {
	HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON *HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON `json:"-"`
	HTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON    *HTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON    `json:"-"`
	HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON    *HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON    `json:"-"`
}

// WithHTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON sets HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON value.
func (h *HTTPAsyncapiComDefinitions240HTTPSecuritySchemeJSON) WithHTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON(val HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON) *HTTPAsyncapiComDefinitions240HTTPSecuritySchemeJSON {
	h.HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON = &val
	return h
}

// HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSONEns ensures returned HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON is not nil.
func (h *HTTPAsyncapiComDefinitions240HTTPSecuritySchemeJSON) HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSONEns() *HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON {
	if h.HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON == nil {
		h.HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON = new(HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON)
	}

	return h.HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON
}

// WithHTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON sets HTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON value.
func (h *HTTPAsyncapiComDefinitions240HTTPSecuritySchemeJSON) WithHTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON(val HTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON) *HTTPAsyncapiComDefinitions240HTTPSecuritySchemeJSON {
	h.HTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON = &val
	return h
}

// HTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSONEns ensures returned HTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON is not nil.
func (h *HTTPAsyncapiComDefinitions240HTTPSecuritySchemeJSON) HTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSONEns() *HTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON {
	if h.HTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON == nil {
		h.HTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON = new(HTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON)
	}

	return h.HTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON
}

// WithHTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON sets HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON value.
func (h *HTTPAsyncapiComDefinitions240HTTPSecuritySchemeJSON) WithHTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON(val HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON) *HTTPAsyncapiComDefinitions240HTTPSecuritySchemeJSON {
	h.HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON = &val
	return h
}

// HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSONEns ensures returned HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON is not nil.
func (h *HTTPAsyncapiComDefinitions240HTTPSecuritySchemeJSON) HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSONEns() *HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON {
	if h.HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON == nil {
		h.HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON = new(HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON)
	}

	return h.HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240HTTPSecuritySchemeJSON) UnmarshalJSON(data []byte) error {
	var err error

	oneOfErrors := make(map[string]error, 3)
	oneOfValid := 0

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON"] = err
		h.HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON = nil
	} else {
		oneOfValid++
	}

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON"] = err
		h.HTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON = nil
	} else {
		oneOfValid++
	}

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON"] = err
		h.HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON = nil
	} else {
		oneOfValid++
	}

	if oneOfValid != 1 {
		return fmt.Errorf("oneOf constraint failed for HTTPAsyncapiComDefinitions240HTTPSecuritySchemeJSON with %d valid results: %v", oneOfValid, oneOfErrors)
	}

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240HTTPSecuritySchemeJSON) MarshalJSON() ([]byte, error) {
	return marshalUnion(h.HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON, h.HTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON, h.HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON)
}

// HTTPAsyncapiComDefinitions240Oauth2FlowsJSON structure is generated from "http://asyncapi.com/definitions/2.4.0/oauth2Flows.json".
type HTTPAsyncapiComDefinitions240Oauth2FlowsJSON struct {
	Description   string                                            `json:"description,omitempty"`
	Flows         HTTPAsyncapiComDefinitions240Oauth2FlowsJSONFlows `json:"flows"` // Required.
	MapOfAnything map[string]interface{}                            `json:"-"`     // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

// WithDescription sets Description value.
func (h *HTTPAsyncapiComDefinitions240Oauth2FlowsJSON) WithDescription(val string) *HTTPAsyncapiComDefinitions240Oauth2FlowsJSON {
	h.Description = val
	return h
}

// WithFlows sets Flows value.
func (h *HTTPAsyncapiComDefinitions240Oauth2FlowsJSON) WithFlows(val HTTPAsyncapiComDefinitions240Oauth2FlowsJSONFlows) *HTTPAsyncapiComDefinitions240Oauth2FlowsJSON {
	h.Flows = val
	return h
}

// WithMapOfAnything sets MapOfAnything value.
func (h *HTTPAsyncapiComDefinitions240Oauth2FlowsJSON) WithMapOfAnything(val map[string]interface{}) *HTTPAsyncapiComDefinitions240Oauth2FlowsJSON {
	h.MapOfAnything = val
	return h
}

// WithMapOfAnythingItem sets MapOfAnything item value.
func (h *HTTPAsyncapiComDefinitions240Oauth2FlowsJSON) WithMapOfAnythingItem(key string, val interface{}) *HTTPAsyncapiComDefinitions240Oauth2FlowsJSON {
	if h.MapOfAnything == nil {
		h.MapOfAnything = make(map[string]interface{}, 1)
	}

	h.MapOfAnything[key] = val

	return h
}

type marshalHTTPAsyncapiComDefinitions240Oauth2FlowsJSON HTTPAsyncapiComDefinitions240Oauth2FlowsJSON

var knownKeysHTTPAsyncapiComDefinitions240Oauth2FlowsJSON = []string{
	"description",
	"flows",
	"type",
}

var requireKeysHTTPAsyncapiComDefinitions240Oauth2FlowsJSON = []string{
	"type",
	"flows",
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240Oauth2FlowsJSON) UnmarshalJSON(data []byte) error {
	var err error

	mh := marshalHTTPAsyncapiComDefinitions240Oauth2FlowsJSON(*h)

	err = json.Unmarshal(data, &mh)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range requireKeysHTTPAsyncapiComDefinitions240Oauth2FlowsJSON {
		if _, found := rawMap[key]; !found {
			return errors.New("required key missing: " + key)
		}
	}

	if v, exists := rawMap["type"]; exists && string(v) != `"oauth2"` {
		return fmt.Errorf(`bad const value for "type" ("oauth2" expected, %s received)`, v)
	}

	delete(rawMap, "type")

	for _, key := range knownKeysHTTPAsyncapiComDefinitions240Oauth2FlowsJSON {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if mh.MapOfAnything == nil {
				mh.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			mh.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	*h = HTTPAsyncapiComDefinitions240Oauth2FlowsJSON(mh)

	return nil
}

// constHTTPAsyncapiComDefinitions240Oauth2FlowsJSON is unconditionally added to JSON.
var constHTTPAsyncapiComDefinitions240Oauth2FlowsJSON = json.RawMessage(`{"type":"oauth2"}`)

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240Oauth2FlowsJSON) MarshalJSON() ([]byte, error) {
	return marshalUnion(constHTTPAsyncapiComDefinitions240Oauth2FlowsJSON, marshalHTTPAsyncapiComDefinitions240Oauth2FlowsJSON(h), h.MapOfAnything)
}

// HTTPAsyncapiComDefinitions240Oauth2FlowsJSONFlows structure is generated from "http://asyncapi.com/definitions/2.4.0/oauth2Flows.json->flows".
type HTTPAsyncapiComDefinitions240Oauth2FlowsJSONFlows struct {
	Implicit          *HTTPAsyncapiComDefinitions240Oauth2FlowJSON `json:"implicit,omitempty"`
	Password          *HTTPAsyncapiComDefinitions240Oauth2FlowJSON `json:"password,omitempty"`
	ClientCredentials *HTTPAsyncapiComDefinitions240Oauth2FlowJSON `json:"clientCredentials,omitempty"`
	AuthorizationCode *HTTPAsyncapiComDefinitions240Oauth2FlowJSON `json:"authorizationCode,omitempty"`
}

// WithImplicit sets Implicit value.
func (h *HTTPAsyncapiComDefinitions240Oauth2FlowsJSONFlows) WithImplicit(val HTTPAsyncapiComDefinitions240Oauth2FlowJSON) *HTTPAsyncapiComDefinitions240Oauth2FlowsJSONFlows {
	h.Implicit = &val
	return h
}

// ImplicitEns ensures returned Implicit is not nil.
func (h *HTTPAsyncapiComDefinitions240Oauth2FlowsJSONFlows) ImplicitEns() *HTTPAsyncapiComDefinitions240Oauth2FlowJSON {
	if h.Implicit == nil {
		h.Implicit = new(HTTPAsyncapiComDefinitions240Oauth2FlowJSON)
	}

	return h.Implicit
}

// WithPassword sets Password value.
func (h *HTTPAsyncapiComDefinitions240Oauth2FlowsJSONFlows) WithPassword(val HTTPAsyncapiComDefinitions240Oauth2FlowJSON) *HTTPAsyncapiComDefinitions240Oauth2FlowsJSONFlows {
	h.Password = &val
	return h
}

// PasswordEns ensures returned Password is not nil.
func (h *HTTPAsyncapiComDefinitions240Oauth2FlowsJSONFlows) PasswordEns() *HTTPAsyncapiComDefinitions240Oauth2FlowJSON {
	if h.Password == nil {
		h.Password = new(HTTPAsyncapiComDefinitions240Oauth2FlowJSON)
	}

	return h.Password
}

// WithClientCredentials sets ClientCredentials value.
func (h *HTTPAsyncapiComDefinitions240Oauth2FlowsJSONFlows) WithClientCredentials(val HTTPAsyncapiComDefinitions240Oauth2FlowJSON) *HTTPAsyncapiComDefinitions240Oauth2FlowsJSONFlows {
	h.ClientCredentials = &val
	return h
}

// ClientCredentialsEns ensures returned ClientCredentials is not nil.
func (h *HTTPAsyncapiComDefinitions240Oauth2FlowsJSONFlows) ClientCredentialsEns() *HTTPAsyncapiComDefinitions240Oauth2FlowJSON {
	if h.ClientCredentials == nil {
		h.ClientCredentials = new(HTTPAsyncapiComDefinitions240Oauth2FlowJSON)
	}

	return h.ClientCredentials
}

// WithAuthorizationCode sets AuthorizationCode value.
func (h *HTTPAsyncapiComDefinitions240Oauth2FlowsJSONFlows) WithAuthorizationCode(val HTTPAsyncapiComDefinitions240Oauth2FlowJSON) *HTTPAsyncapiComDefinitions240Oauth2FlowsJSONFlows {
	h.AuthorizationCode = &val
	return h
}

// AuthorizationCodeEns ensures returned AuthorizationCode is not nil.
func (h *HTTPAsyncapiComDefinitions240Oauth2FlowsJSONFlows) AuthorizationCodeEns() *HTTPAsyncapiComDefinitions240Oauth2FlowJSON {
	if h.AuthorizationCode == nil {
		h.AuthorizationCode = new(HTTPAsyncapiComDefinitions240Oauth2FlowJSON)
	}

	return h.AuthorizationCode
}

type marshalHTTPAsyncapiComDefinitions240Oauth2FlowsJSONFlows HTTPAsyncapiComDefinitions240Oauth2FlowsJSONFlows

var knownKeysHTTPAsyncapiComDefinitions240Oauth2FlowsJSONFlows = []string{
	"implicit",
	"password",
	"clientCredentials",
	"authorizationCode",
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240Oauth2FlowsJSONFlows) UnmarshalJSON(data []byte) error {
	var err error

	mh := marshalHTTPAsyncapiComDefinitions240Oauth2FlowsJSONFlows(*h)

	err = json.Unmarshal(data, &mh)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysHTTPAsyncapiComDefinitions240Oauth2FlowsJSONFlows {
		delete(rawMap, key)
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in HTTPAsyncapiComDefinitions240Oauth2FlowsJSONFlows: %v", offendingKeys)
	}

	*h = HTTPAsyncapiComDefinitions240Oauth2FlowsJSONFlows(mh)

	return nil
}

// HTTPAsyncapiComDefinitions240Oauth2FlowJSON structure is generated from "http://asyncapi.com/definitions/2.4.0/oauth2Flow.json".
type HTTPAsyncapiComDefinitions240Oauth2FlowJSON struct {
	AuthorizationURL string                 `json:"authorizationUrl,omitempty"` // Format: uri.
	TokenURL         string                 `json:"tokenUrl,omitempty"`         // Format: uri.
	RefreshURL       string                 `json:"refreshUrl,omitempty"`       // Format: uri.
	Scopes           map[string]string      `json:"scopes,omitempty"`
	MapOfAnything    map[string]interface{} `json:"-"` // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

// WithAuthorizationURL sets AuthorizationURL value.
func (h *HTTPAsyncapiComDefinitions240Oauth2FlowJSON) WithAuthorizationURL(val string) *HTTPAsyncapiComDefinitions240Oauth2FlowJSON {
	h.AuthorizationURL = val
	return h
}

// WithTokenURL sets TokenURL value.
func (h *HTTPAsyncapiComDefinitions240Oauth2FlowJSON) WithTokenURL(val string) *HTTPAsyncapiComDefinitions240Oauth2FlowJSON {
	h.TokenURL = val
	return h
}

// WithRefreshURL sets RefreshURL value.
func (h *HTTPAsyncapiComDefinitions240Oauth2FlowJSON) WithRefreshURL(val string) *HTTPAsyncapiComDefinitions240Oauth2FlowJSON {
	h.RefreshURL = val
	return h
}

// WithScopes sets Scopes value.
func (h *HTTPAsyncapiComDefinitions240Oauth2FlowJSON) WithScopes(val map[string]string) *HTTPAsyncapiComDefinitions240Oauth2FlowJSON {
	h.Scopes = val
	return h
}

// WithScopesItem sets Scopes item value.
func (h *HTTPAsyncapiComDefinitions240Oauth2FlowJSON) WithScopesItem(key string, val string) *HTTPAsyncapiComDefinitions240Oauth2FlowJSON {
	if h.Scopes == nil {
		h.Scopes = make(map[string]string, 1)
	}

	h.Scopes[key] = val

	return h
}

// WithMapOfAnything sets MapOfAnything value.
func (h *HTTPAsyncapiComDefinitions240Oauth2FlowJSON) WithMapOfAnything(val map[string]interface{}) *HTTPAsyncapiComDefinitions240Oauth2FlowJSON {
	h.MapOfAnything = val
	return h
}

// WithMapOfAnythingItem sets MapOfAnything item value.
func (h *HTTPAsyncapiComDefinitions240Oauth2FlowJSON) WithMapOfAnythingItem(key string, val interface{}) *HTTPAsyncapiComDefinitions240Oauth2FlowJSON {
	if h.MapOfAnything == nil {
		h.MapOfAnything = make(map[string]interface{}, 1)
	}

	h.MapOfAnything[key] = val

	return h
}

type marshalHTTPAsyncapiComDefinitions240Oauth2FlowJSON HTTPAsyncapiComDefinitions240Oauth2FlowJSON

var knownKeysHTTPAsyncapiComDefinitions240Oauth2FlowJSON = []string{
	"authorizationUrl",
	"tokenUrl",
	"refreshUrl",
	"scopes",
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240Oauth2FlowJSON) UnmarshalJSON(data []byte) error {
	var err error

	mh := marshalHTTPAsyncapiComDefinitions240Oauth2FlowJSON(*h)

	err = json.Unmarshal(data, &mh)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysHTTPAsyncapiComDefinitions240Oauth2FlowJSON {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if mh.MapOfAnything == nil {
				mh.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			mh.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in HTTPAsyncapiComDefinitions240Oauth2FlowJSON: %v", offendingKeys)
	}

	*h = HTTPAsyncapiComDefinitions240Oauth2FlowJSON(mh)

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240Oauth2FlowJSON) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalHTTPAsyncapiComDefinitions240Oauth2FlowJSON(h), h.MapOfAnything)
}

// HTTPAsyncapiComDefinitions240OpenIDConnectJSON structure is generated from "http://asyncapi.com/definitions/2.4.0/openIdConnect.json".
type HTTPAsyncapiComDefinitions240OpenIDConnectJSON struct {
	Description string `json:"description,omitempty"`
	// Format: uri.
	// Required.
	OpenIDConnectURL string                 `json:"openIdConnectUrl"`
	MapOfAnything    map[string]interface{} `json:"-"` // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

// WithDescription sets Description value.
func (h *HTTPAsyncapiComDefinitions240OpenIDConnectJSON) WithDescription(val string) *HTTPAsyncapiComDefinitions240OpenIDConnectJSON {
	h.Description = val
	return h
}

// WithOpenIDConnectURL sets OpenIDConnectURL value.
func (h *HTTPAsyncapiComDefinitions240OpenIDConnectJSON) WithOpenIDConnectURL(val string) *HTTPAsyncapiComDefinitions240OpenIDConnectJSON {
	h.OpenIDConnectURL = val
	return h
}

// WithMapOfAnything sets MapOfAnything value.
func (h *HTTPAsyncapiComDefinitions240OpenIDConnectJSON) WithMapOfAnything(val map[string]interface{}) *HTTPAsyncapiComDefinitions240OpenIDConnectJSON {
	h.MapOfAnything = val
	return h
}

// WithMapOfAnythingItem sets MapOfAnything item value.
func (h *HTTPAsyncapiComDefinitions240OpenIDConnectJSON) WithMapOfAnythingItem(key string, val interface{}) *HTTPAsyncapiComDefinitions240OpenIDConnectJSON {
	if h.MapOfAnything == nil {
		h.MapOfAnything = make(map[string]interface{}, 1)
	}

	h.MapOfAnything[key] = val

	return h
}

type marshalHTTPAsyncapiComDefinitions240OpenIDConnectJSON HTTPAsyncapiComDefinitions240OpenIDConnectJSON

var knownKeysHTTPAsyncapiComDefinitions240OpenIDConnectJSON = []string{
	"description",
	"openIdConnectUrl",
	"type",
}

var requireKeysHTTPAsyncapiComDefinitions240OpenIDConnectJSON = []string{
	"type",
	"openIdConnectUrl",
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240OpenIDConnectJSON) UnmarshalJSON(data []byte) error {
	var err error

	mh := marshalHTTPAsyncapiComDefinitions240OpenIDConnectJSON(*h)

	err = json.Unmarshal(data, &mh)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range requireKeysHTTPAsyncapiComDefinitions240OpenIDConnectJSON {
		if _, found := rawMap[key]; !found {
			return errors.New("required key missing: " + key)
		}
	}

	if v, exists := rawMap["type"]; exists && string(v) != `"openIdConnect"` {
		return fmt.Errorf(`bad const value for "type" ("openIdConnect" expected, %s received)`, v)
	}

	delete(rawMap, "type")

	for _, key := range knownKeysHTTPAsyncapiComDefinitions240OpenIDConnectJSON {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if mh.MapOfAnything == nil {
				mh.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			mh.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in HTTPAsyncapiComDefinitions240OpenIDConnectJSON: %v", offendingKeys)
	}

	*h = HTTPAsyncapiComDefinitions240OpenIDConnectJSON(mh)

	return nil
}

// constHTTPAsyncapiComDefinitions240OpenIDConnectJSON is unconditionally added to JSON.
var constHTTPAsyncapiComDefinitions240OpenIDConnectJSON = json.RawMessage(`{"type":"openIdConnect"}`)

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240OpenIDConnectJSON) MarshalJSON() ([]byte, error) {
	return marshalUnion(constHTTPAsyncapiComDefinitions240OpenIDConnectJSON, marshalHTTPAsyncapiComDefinitions240OpenIDConnectJSON(h), h.MapOfAnything)
}

// HTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON structure is generated from "http://asyncapi.com/definitions/2.4.0/SaslPlainSecurityScheme.json".
type HTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON struct {
	Description   string                 `json:"description,omitempty"`
	MapOfAnything map[string]interface{} `json:"-"` // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

// WithDescription sets Description value.
func (h *HTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON) WithDescription(val string) *HTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON {
	h.Description = val
	return h
}

// WithMapOfAnything sets MapOfAnything value.
func (h *HTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON) WithMapOfAnything(val map[string]interface{}) *HTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON {
	h.MapOfAnything = val
	return h
}

// WithMapOfAnythingItem sets MapOfAnything item value.
func (h *HTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON) WithMapOfAnythingItem(key string, val interface{}) *HTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON {
	if h.MapOfAnything == nil {
		h.MapOfAnything = make(map[string]interface{}, 1)
	}

	h.MapOfAnything[key] = val

	return h
}

type marshalHTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON HTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON

var knownKeysHTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON = []string{
	"description",
	"type",
}

var requireKeysHTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON = []string{
	"type",
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON) UnmarshalJSON(data []byte) error {
	var err error

	mh := marshalHTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON(*h)

	err = json.Unmarshal(data, &mh)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range requireKeysHTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON {
		if _, found := rawMap[key]; !found {
			return errors.New("required key missing: " + key)
		}
	}

	if v, exists := rawMap["type"]; exists && string(v) != `"plain"` {
		return fmt.Errorf(`bad const value for "type" ("plain" expected, %s received)`, v)
	}

	delete(rawMap, "type")

	for _, key := range knownKeysHTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if mh.MapOfAnything == nil {
				mh.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			mh.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in HTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON: %v", offendingKeys)
	}

	*h = HTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON(mh)

	return nil
}

// constHTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON is unconditionally added to JSON.
var constHTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON = json.RawMessage(`{"type":"plain"}`)

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON) MarshalJSON() ([]byte, error) {
	return marshalUnion(constHTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON, marshalHTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON(h), h.MapOfAnything)
}

// HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON structure is generated from "http://asyncapi.com/definitions/2.4.0/SaslScramSecurityScheme.json".
type HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON struct {
	Type          HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSONType `json:"type"` // Required.
	Description   string                                                       `json:"description,omitempty"`
	MapOfAnything map[string]interface{}                                       `json:"-"` // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

// WithType sets Type value.
func (h *HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON) WithType(val HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSONType) *HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON {
	h.Type = val
	return h
}

// WithDescription sets Description value.
func (h *HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON) WithDescription(val string) *HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON {
	h.Description = val
	return h
}

// WithMapOfAnything sets MapOfAnything value.
func (h *HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON) WithMapOfAnything(val map[string]interface{}) *HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON {
	h.MapOfAnything = val
	return h
}

// WithMapOfAnythingItem sets MapOfAnything item value.
func (h *HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON) WithMapOfAnythingItem(key string, val interface{}) *HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON {
	if h.MapOfAnything == nil {
		h.MapOfAnything = make(map[string]interface{}, 1)
	}

	h.MapOfAnything[key] = val

	return h
}

type marshalHTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON

var knownKeysHTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON = []string{
	"type",
	"description",
}

var requireKeysHTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON = []string{
	"type",
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON) UnmarshalJSON(data []byte) error {
	var err error

	mh := marshalHTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON(*h)

	err = json.Unmarshal(data, &mh)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range requireKeysHTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON {
		if _, found := rawMap[key]; !found {
			return errors.New("required key missing: " + key)
		}
	}

	for _, key := range knownKeysHTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if mh.MapOfAnything == nil {
				mh.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			mh.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON: %v", offendingKeys)
	}

	*h = HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON(mh)

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalHTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON(h), h.MapOfAnything)
}

// HTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON structure is generated from "http://asyncapi.com/definitions/2.4.0/SaslGssapiSecurityScheme.json".
type HTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON struct {
	Description   string                 `json:"description,omitempty"`
	MapOfAnything map[string]interface{} `json:"-"` // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

// WithDescription sets Description value.
func (h *HTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON) WithDescription(val string) *HTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON {
	h.Description = val
	return h
}

// WithMapOfAnything sets MapOfAnything value.
func (h *HTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON) WithMapOfAnything(val map[string]interface{}) *HTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON {
	h.MapOfAnything = val
	return h
}

// WithMapOfAnythingItem sets MapOfAnything item value.
func (h *HTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON) WithMapOfAnythingItem(key string, val interface{}) *HTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON {
	if h.MapOfAnything == nil {
		h.MapOfAnything = make(map[string]interface{}, 1)
	}

	h.MapOfAnything[key] = val

	return h
}

type marshalHTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON HTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON

var knownKeysHTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON = []string{
	"description",
	"type",
}

var requireKeysHTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON = []string{
	"type",
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON) UnmarshalJSON(data []byte) error {
	var err error

	mh := marshalHTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON(*h)

	err = json.Unmarshal(data, &mh)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range requireKeysHTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON {
		if _, found := rawMap[key]; !found {
			return errors.New("required key missing: " + key)
		}
	}

	if v, exists := rawMap["type"]; exists && string(v) != `"gssapi"` {
		return fmt.Errorf(`bad const value for "type" ("gssapi" expected, %s received)`, v)
	}

	delete(rawMap, "type")

	for _, key := range knownKeysHTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if mh.MapOfAnything == nil {
				mh.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			mh.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in HTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON: %v", offendingKeys)
	}

	*h = HTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON(mh)

	return nil
}

// constHTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON is unconditionally added to JSON.
var constHTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON = json.RawMessage(`{"type":"gssapi"}`)

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON) MarshalJSON() ([]byte, error) {
	return marshalUnion(constHTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON, marshalHTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON(h), h.MapOfAnything)
}

// HTTPAsyncapiComDefinitions240SaslSecuritySchemeJSON structure is generated from "http://asyncapi.com/definitions/2.4.0/SaslSecurityScheme.json".
type HTTPAsyncapiComDefinitions240SaslSecuritySchemeJSON struct {
	HTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON  *HTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON  `json:"-"`
	HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON  *HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON  `json:"-"`
	HTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON *HTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON `json:"-"`
}

// WithHTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON sets HTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON value.
func (h *HTTPAsyncapiComDefinitions240SaslSecuritySchemeJSON) WithHTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON(val HTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON) *HTTPAsyncapiComDefinitions240SaslSecuritySchemeJSON {
	h.HTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON = &val
	return h
}

// HTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSONEns ensures returned HTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON is not nil.
func (h *HTTPAsyncapiComDefinitions240SaslSecuritySchemeJSON) HTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSONEns() *HTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON {
	if h.HTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON == nil {
		h.HTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON = new(HTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON)
	}

	return h.HTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON
}

// WithHTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON sets HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON value.
func (h *HTTPAsyncapiComDefinitions240SaslSecuritySchemeJSON) WithHTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON(val HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON) *HTTPAsyncapiComDefinitions240SaslSecuritySchemeJSON {
	h.HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON = &val
	return h
}

// HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSONEns ensures returned HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON is not nil.
func (h *HTTPAsyncapiComDefinitions240SaslSecuritySchemeJSON) HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSONEns() *HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON {
	if h.HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON == nil {
		h.HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON = new(HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON)
	}

	return h.HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON
}

// WithHTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON sets HTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON value.
func (h *HTTPAsyncapiComDefinitions240SaslSecuritySchemeJSON) WithHTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON(val HTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON) *HTTPAsyncapiComDefinitions240SaslSecuritySchemeJSON {
	h.HTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON = &val
	return h
}

// HTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSONEns ensures returned HTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON is not nil.
func (h *HTTPAsyncapiComDefinitions240SaslSecuritySchemeJSON) HTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSONEns() *HTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON {
	if h.HTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON == nil {
		h.HTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON = new(HTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON)
	}

	return h.HTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240SaslSecuritySchemeJSON) UnmarshalJSON(data []byte) error {
	var err error

	oneOfErrors := make(map[string]error, 3)
	oneOfValid := 0

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON"] = err
		h.HTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON = nil
	} else {
		oneOfValid++
	}

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON"] = err
		h.HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON = nil
	} else {
		oneOfValid++
	}

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON"] = err
		h.HTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON = nil
	} else {
		oneOfValid++
	}

	if oneOfValid != 1 {
		return fmt.Errorf("oneOf constraint failed for HTTPAsyncapiComDefinitions240SaslSecuritySchemeJSON with %d valid results: %v", oneOfValid, oneOfErrors)
	}

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240SaslSecuritySchemeJSON) MarshalJSON() ([]byte, error) {
	return marshalUnion(h.HTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON, h.HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON, h.HTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON)
}

// HTTPAsyncapiComDefinitions240SecuritySchemeJSON structure is generated from "http://asyncapi.com/definitions/2.4.0/SecurityScheme.json".
type HTTPAsyncapiComDefinitions240SecuritySchemeJSON struct {
	HTTPAsyncapiComDefinitions240UserPasswordJSON         *HTTPAsyncapiComDefinitions240UserPasswordJSON         `json:"-"`
	HTTPAsyncapiComDefinitions240APIKeyJSON               *HTTPAsyncapiComDefinitions240APIKeyJSON               `json:"-"`
	HTTPAsyncapiComDefinitions240X509JSON                 *HTTPAsyncapiComDefinitions240X509JSON                 `json:"-"`
	HTTPAsyncapiComDefinitions240SymmetricEncryptionJSON  *HTTPAsyncapiComDefinitions240SymmetricEncryptionJSON  `json:"-"`
	HTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON *HTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON `json:"-"`
	HTTPAsyncapiComDefinitions240HTTPSecuritySchemeJSON   *HTTPAsyncapiComDefinitions240HTTPSecuritySchemeJSON   `json:"-"`
	HTTPAsyncapiComDefinitions240Oauth2FlowsJSON          *HTTPAsyncapiComDefinitions240Oauth2FlowsJSON          `json:"-"`
	HTTPAsyncapiComDefinitions240OpenIDConnectJSON        *HTTPAsyncapiComDefinitions240OpenIDConnectJSON        `json:"-"`
	HTTPAsyncapiComDefinitions240SaslSecuritySchemeJSON   *HTTPAsyncapiComDefinitions240SaslSecuritySchemeJSON   `json:"-"`
}

// WithHTTPAsyncapiComDefinitions240UserPasswordJSON sets HTTPAsyncapiComDefinitions240UserPasswordJSON value.
func (h *HTTPAsyncapiComDefinitions240SecuritySchemeJSON) WithHTTPAsyncapiComDefinitions240UserPasswordJSON(val HTTPAsyncapiComDefinitions240UserPasswordJSON) *HTTPAsyncapiComDefinitions240SecuritySchemeJSON {
	h.HTTPAsyncapiComDefinitions240UserPasswordJSON = &val
	return h
}

// HTTPAsyncapiComDefinitions240UserPasswordJSONEns ensures returned HTTPAsyncapiComDefinitions240UserPasswordJSON is not nil.
func (h *HTTPAsyncapiComDefinitions240SecuritySchemeJSON) HTTPAsyncapiComDefinitions240UserPasswordJSONEns() *HTTPAsyncapiComDefinitions240UserPasswordJSON {
	if h.HTTPAsyncapiComDefinitions240UserPasswordJSON == nil {
		h.HTTPAsyncapiComDefinitions240UserPasswordJSON = new(HTTPAsyncapiComDefinitions240UserPasswordJSON)
	}

	return h.HTTPAsyncapiComDefinitions240UserPasswordJSON
}

// WithHTTPAsyncapiComDefinitions240APIKeyJSON sets HTTPAsyncapiComDefinitions240APIKeyJSON value.
func (h *HTTPAsyncapiComDefinitions240SecuritySchemeJSON) WithHTTPAsyncapiComDefinitions240APIKeyJSON(val HTTPAsyncapiComDefinitions240APIKeyJSON) *HTTPAsyncapiComDefinitions240SecuritySchemeJSON {
	h.HTTPAsyncapiComDefinitions240APIKeyJSON = &val
	return h
}

// HTTPAsyncapiComDefinitions240APIKeyJSONEns ensures returned HTTPAsyncapiComDefinitions240APIKeyJSON is not nil.
func (h *HTTPAsyncapiComDefinitions240SecuritySchemeJSON) HTTPAsyncapiComDefinitions240APIKeyJSONEns() *HTTPAsyncapiComDefinitions240APIKeyJSON {
	if h.HTTPAsyncapiComDefinitions240APIKeyJSON == nil {
		h.HTTPAsyncapiComDefinitions240APIKeyJSON = new(HTTPAsyncapiComDefinitions240APIKeyJSON)
	}

	return h.HTTPAsyncapiComDefinitions240APIKeyJSON
}

// WithHTTPAsyncapiComDefinitions240X509JSON sets HTTPAsyncapiComDefinitions240X509JSON value.
func (h *HTTPAsyncapiComDefinitions240SecuritySchemeJSON) WithHTTPAsyncapiComDefinitions240X509JSON(val HTTPAsyncapiComDefinitions240X509JSON) *HTTPAsyncapiComDefinitions240SecuritySchemeJSON {
	h.HTTPAsyncapiComDefinitions240X509JSON = &val
	return h
}

// HTTPAsyncapiComDefinitions240X509JSONEns ensures returned HTTPAsyncapiComDefinitions240X509JSON is not nil.
func (h *HTTPAsyncapiComDefinitions240SecuritySchemeJSON) HTTPAsyncapiComDefinitions240X509JSONEns() *HTTPAsyncapiComDefinitions240X509JSON {
	if h.HTTPAsyncapiComDefinitions240X509JSON == nil {
		h.HTTPAsyncapiComDefinitions240X509JSON = new(HTTPAsyncapiComDefinitions240X509JSON)
	}

	return h.HTTPAsyncapiComDefinitions240X509JSON
}

// WithHTTPAsyncapiComDefinitions240SymmetricEncryptionJSON sets HTTPAsyncapiComDefinitions240SymmetricEncryptionJSON value.
func (h *HTTPAsyncapiComDefinitions240SecuritySchemeJSON) WithHTTPAsyncapiComDefinitions240SymmetricEncryptionJSON(val HTTPAsyncapiComDefinitions240SymmetricEncryptionJSON) *HTTPAsyncapiComDefinitions240SecuritySchemeJSON {
	h.HTTPAsyncapiComDefinitions240SymmetricEncryptionJSON = &val
	return h
}

// HTTPAsyncapiComDefinitions240SymmetricEncryptionJSONEns ensures returned HTTPAsyncapiComDefinitions240SymmetricEncryptionJSON is not nil.
func (h *HTTPAsyncapiComDefinitions240SecuritySchemeJSON) HTTPAsyncapiComDefinitions240SymmetricEncryptionJSONEns() *HTTPAsyncapiComDefinitions240SymmetricEncryptionJSON {
	if h.HTTPAsyncapiComDefinitions240SymmetricEncryptionJSON == nil {
		h.HTTPAsyncapiComDefinitions240SymmetricEncryptionJSON = new(HTTPAsyncapiComDefinitions240SymmetricEncryptionJSON)
	}

	return h.HTTPAsyncapiComDefinitions240SymmetricEncryptionJSON
}

// WithHTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON sets HTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON value.
func (h *HTTPAsyncapiComDefinitions240SecuritySchemeJSON) WithHTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON(val HTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON) *HTTPAsyncapiComDefinitions240SecuritySchemeJSON {
	h.HTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON = &val
	return h
}

// HTTPAsyncapiComDefinitions240AsymmetricEncryptionJSONEns ensures returned HTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON is not nil.
func (h *HTTPAsyncapiComDefinitions240SecuritySchemeJSON) HTTPAsyncapiComDefinitions240AsymmetricEncryptionJSONEns() *HTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON {
	if h.HTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON == nil {
		h.HTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON = new(HTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON)
	}

	return h.HTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON
}

// WithHTTPAsyncapiComDefinitions240HTTPSecuritySchemeJSON sets HTTPAsyncapiComDefinitions240HTTPSecuritySchemeJSON value.
func (h *HTTPAsyncapiComDefinitions240SecuritySchemeJSON) WithHTTPAsyncapiComDefinitions240HTTPSecuritySchemeJSON(val HTTPAsyncapiComDefinitions240HTTPSecuritySchemeJSON) *HTTPAsyncapiComDefinitions240SecuritySchemeJSON {
	h.HTTPAsyncapiComDefinitions240HTTPSecuritySchemeJSON = &val
	return h
}

// HTTPAsyncapiComDefinitions240HTTPSecuritySchemeJSONEns ensures returned HTTPAsyncapiComDefinitions240HTTPSecuritySchemeJSON is not nil.
func (h *HTTPAsyncapiComDefinitions240SecuritySchemeJSON) HTTPAsyncapiComDefinitions240HTTPSecuritySchemeJSONEns() *HTTPAsyncapiComDefinitions240HTTPSecuritySchemeJSON {
	if h.HTTPAsyncapiComDefinitions240HTTPSecuritySchemeJSON == nil {
		h.HTTPAsyncapiComDefinitions240HTTPSecuritySchemeJSON = new(HTTPAsyncapiComDefinitions240HTTPSecuritySchemeJSON)
	}

	return h.HTTPAsyncapiComDefinitions240HTTPSecuritySchemeJSON
}

// WithHTTPAsyncapiComDefinitions240Oauth2FlowsJSON sets HTTPAsyncapiComDefinitions240Oauth2FlowsJSON value.
func (h *HTTPAsyncapiComDefinitions240SecuritySchemeJSON) WithHTTPAsyncapiComDefinitions240Oauth2FlowsJSON(val HTTPAsyncapiComDefinitions240Oauth2FlowsJSON) *HTTPAsyncapiComDefinitions240SecuritySchemeJSON {
	h.HTTPAsyncapiComDefinitions240Oauth2FlowsJSON = &val
	return h
}

// HTTPAsyncapiComDefinitions240Oauth2FlowsJSONEns ensures returned HTTPAsyncapiComDefinitions240Oauth2FlowsJSON is not nil.
func (h *HTTPAsyncapiComDefinitions240SecuritySchemeJSON) HTTPAsyncapiComDefinitions240Oauth2FlowsJSONEns() *HTTPAsyncapiComDefinitions240Oauth2FlowsJSON {
	if h.HTTPAsyncapiComDefinitions240Oauth2FlowsJSON == nil {
		h.HTTPAsyncapiComDefinitions240Oauth2FlowsJSON = new(HTTPAsyncapiComDefinitions240Oauth2FlowsJSON)
	}

	return h.HTTPAsyncapiComDefinitions240Oauth2FlowsJSON
}

// WithHTTPAsyncapiComDefinitions240OpenIDConnectJSON sets HTTPAsyncapiComDefinitions240OpenIDConnectJSON value.
func (h *HTTPAsyncapiComDefinitions240SecuritySchemeJSON) WithHTTPAsyncapiComDefinitions240OpenIDConnectJSON(val HTTPAsyncapiComDefinitions240OpenIDConnectJSON) *HTTPAsyncapiComDefinitions240SecuritySchemeJSON {
	h.HTTPAsyncapiComDefinitions240OpenIDConnectJSON = &val
	return h
}

// HTTPAsyncapiComDefinitions240OpenIDConnectJSONEns ensures returned HTTPAsyncapiComDefinitions240OpenIDConnectJSON is not nil.
func (h *HTTPAsyncapiComDefinitions240SecuritySchemeJSON) HTTPAsyncapiComDefinitions240OpenIDConnectJSONEns() *HTTPAsyncapiComDefinitions240OpenIDConnectJSON {
	if h.HTTPAsyncapiComDefinitions240OpenIDConnectJSON == nil {
		h.HTTPAsyncapiComDefinitions240OpenIDConnectJSON = new(HTTPAsyncapiComDefinitions240OpenIDConnectJSON)
	}

	return h.HTTPAsyncapiComDefinitions240OpenIDConnectJSON
}

// WithHTTPAsyncapiComDefinitions240SaslSecuritySchemeJSON sets HTTPAsyncapiComDefinitions240SaslSecuritySchemeJSON value.
func (h *HTTPAsyncapiComDefinitions240SecuritySchemeJSON) WithHTTPAsyncapiComDefinitions240SaslSecuritySchemeJSON(val HTTPAsyncapiComDefinitions240SaslSecuritySchemeJSON) *HTTPAsyncapiComDefinitions240SecuritySchemeJSON {
	h.HTTPAsyncapiComDefinitions240SaslSecuritySchemeJSON = &val
	return h
}

// HTTPAsyncapiComDefinitions240SaslSecuritySchemeJSONEns ensures returned HTTPAsyncapiComDefinitions240SaslSecuritySchemeJSON is not nil.
func (h *HTTPAsyncapiComDefinitions240SecuritySchemeJSON) HTTPAsyncapiComDefinitions240SaslSecuritySchemeJSONEns() *HTTPAsyncapiComDefinitions240SaslSecuritySchemeJSON {
	if h.HTTPAsyncapiComDefinitions240SaslSecuritySchemeJSON == nil {
		h.HTTPAsyncapiComDefinitions240SaslSecuritySchemeJSON = new(HTTPAsyncapiComDefinitions240SaslSecuritySchemeJSON)
	}

	return h.HTTPAsyncapiComDefinitions240SaslSecuritySchemeJSON
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240SecuritySchemeJSON) UnmarshalJSON(data []byte) error {
	var err error

	oneOfErrors := make(map[string]error, 9)
	oneOfValid := 0

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240UserPasswordJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240UserPasswordJSON"] = err
		h.HTTPAsyncapiComDefinitions240UserPasswordJSON = nil
	} else {
		oneOfValid++
	}

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240APIKeyJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240APIKeyJSON"] = err
		h.HTTPAsyncapiComDefinitions240APIKeyJSON = nil
	} else {
		oneOfValid++
	}

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240X509JSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240X509JSON"] = err
		h.HTTPAsyncapiComDefinitions240X509JSON = nil
	} else {
		oneOfValid++
	}

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240SymmetricEncryptionJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240SymmetricEncryptionJSON"] = err
		h.HTTPAsyncapiComDefinitions240SymmetricEncryptionJSON = nil
	} else {
		oneOfValid++
	}

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON"] = err
		h.HTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON = nil
	} else {
		oneOfValid++
	}

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240HTTPSecuritySchemeJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240HTTPSecuritySchemeJSON"] = err
		h.HTTPAsyncapiComDefinitions240HTTPSecuritySchemeJSON = nil
	} else {
		oneOfValid++
	}

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240Oauth2FlowsJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240Oauth2FlowsJSON"] = err
		h.HTTPAsyncapiComDefinitions240Oauth2FlowsJSON = nil
	} else {
		oneOfValid++
	}

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240OpenIDConnectJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240OpenIDConnectJSON"] = err
		h.HTTPAsyncapiComDefinitions240OpenIDConnectJSON = nil
	} else {
		oneOfValid++
	}

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240SaslSecuritySchemeJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240SaslSecuritySchemeJSON"] = err
		h.HTTPAsyncapiComDefinitions240SaslSecuritySchemeJSON = nil
	} else {
		oneOfValid++
	}

	if oneOfValid != 1 {
		return fmt.Errorf("oneOf constraint failed for HTTPAsyncapiComDefinitions240SecuritySchemeJSON with %d valid results: %v", oneOfValid, oneOfErrors)
	}

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240SecuritySchemeJSON) MarshalJSON() ([]byte, error) {
	return marshalUnion(h.HTTPAsyncapiComDefinitions240UserPasswordJSON, h.HTTPAsyncapiComDefinitions240APIKeyJSON, h.HTTPAsyncapiComDefinitions240X509JSON, h.HTTPAsyncapiComDefinitions240SymmetricEncryptionJSON, h.HTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON, h.HTTPAsyncapiComDefinitions240HTTPSecuritySchemeJSON, h.HTTPAsyncapiComDefinitions240Oauth2FlowsJSON, h.HTTPAsyncapiComDefinitions240OpenIDConnectJSON, h.HTTPAsyncapiComDefinitions240SaslSecuritySchemeJSON)
}

// HTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemesWD structure is generated from "http://asyncapi.com/definitions/2.4.0/components.json->securitySchemes->^[\w\d\.\-_]+$".
type HTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemesWD struct {
	HTTPAsyncapiComDefinitions240ReferenceJSON      *Reference                                       `json:"-"`
	HTTPAsyncapiComDefinitions240SecuritySchemeJSON *HTTPAsyncapiComDefinitions240SecuritySchemeJSON `json:"-"`
}

// WithHTTPAsyncapiComDefinitions240ReferenceJSON sets HTTPAsyncapiComDefinitions240ReferenceJSON value.
func (h *HTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemesWD) WithHTTPAsyncapiComDefinitions240ReferenceJSON(val Reference) *HTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemesWD {
	h.HTTPAsyncapiComDefinitions240ReferenceJSON = &val
	return h
}

// HTTPAsyncapiComDefinitions240ReferenceJSONEns ensures returned HTTPAsyncapiComDefinitions240ReferenceJSON is not nil.
func (h *HTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemesWD) HTTPAsyncapiComDefinitions240ReferenceJSONEns() *Reference {
	if h.HTTPAsyncapiComDefinitions240ReferenceJSON == nil {
		h.HTTPAsyncapiComDefinitions240ReferenceJSON = new(Reference)
	}

	return h.HTTPAsyncapiComDefinitions240ReferenceJSON
}

// WithHTTPAsyncapiComDefinitions240SecuritySchemeJSON sets HTTPAsyncapiComDefinitions240SecuritySchemeJSON value.
func (h *HTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemesWD) WithHTTPAsyncapiComDefinitions240SecuritySchemeJSON(val HTTPAsyncapiComDefinitions240SecuritySchemeJSON) *HTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemesWD {
	h.HTTPAsyncapiComDefinitions240SecuritySchemeJSON = &val
	return h
}

// HTTPAsyncapiComDefinitions240SecuritySchemeJSONEns ensures returned HTTPAsyncapiComDefinitions240SecuritySchemeJSON is not nil.
func (h *HTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemesWD) HTTPAsyncapiComDefinitions240SecuritySchemeJSONEns() *HTTPAsyncapiComDefinitions240SecuritySchemeJSON {
	if h.HTTPAsyncapiComDefinitions240SecuritySchemeJSON == nil {
		h.HTTPAsyncapiComDefinitions240SecuritySchemeJSON = new(HTTPAsyncapiComDefinitions240SecuritySchemeJSON)
	}

	return h.HTTPAsyncapiComDefinitions240SecuritySchemeJSON
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemesWD) UnmarshalJSON(data []byte) error {
	var err error

	oneOfErrors := make(map[string]error, 2)
	oneOfValid := 0

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240ReferenceJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240ReferenceJSON"] = err
		h.HTTPAsyncapiComDefinitions240ReferenceJSON = nil
	} else {
		oneOfValid++
	}

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240SecuritySchemeJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240SecuritySchemeJSON"] = err
		h.HTTPAsyncapiComDefinitions240SecuritySchemeJSON = nil
	} else {
		oneOfValid++
	}

	if oneOfValid != 1 {
		return fmt.Errorf("oneOf constraint failed for HTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemesWD with %d valid results: %v", oneOfValid, oneOfErrors)
	}

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemesWD) MarshalJSON() ([]byte, error) {
	return marshalUnion(h.HTTPAsyncapiComDefinitions240ReferenceJSON, h.HTTPAsyncapiComDefinitions240SecuritySchemeJSON)
}

// HTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemes structure is generated from "http://asyncapi.com/definitions/2.4.0/components.json->securitySchemes".
type HTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemes struct {
	MapOfHTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemesWDValues map[string]HTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemesWD `json:"-"` // Key must match pattern: `^[\w\d\.\-_]+$`.
}

// WithMapOfHTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemesWDValues sets MapOfHTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemesWDValues value.
func (h *HTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemes) WithMapOfHTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemesWDValues(val map[string]HTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemesWD) *HTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemes {
	h.MapOfHTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemesWDValues = val
	return h
}

// WithMapOfHTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemesWDValuesItem sets MapOfHTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemesWDValues item value.
func (h *HTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemes) WithMapOfHTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemesWDValuesItem(key string, val HTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemesWD) *HTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemes {
	if h.MapOfHTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemesWDValues == nil {
		h.MapOfHTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemesWDValues = make(map[string]HTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemesWD, 1)
	}

	h.MapOfHTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemesWDValues[key] = val

	return h
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemes) UnmarshalJSON(data []byte) error {
	var err error

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexWD.MatchString(key) {
			matched = true

			if h.MapOfHTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemesWDValues == nil {
				h.MapOfHTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemesWDValues = make(map[string]HTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemesWD, 1)
			}

			var val HTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemesWD

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			h.MapOfHTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemesWDValues[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemes) MarshalJSON() ([]byte, error) {
	return marshalUnion(h.MapOfHTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemesWDValues)
}

// HTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIdsWD structure is generated from "http://asyncapi.com/definitions/2.4.0/components.json->correlationIds->^[\w\d\.\-_]+$".
type HTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIdsWD struct {
	HTTPAsyncapiComDefinitions240ReferenceJSON     *Reference                                      `json:"-"`
	HTTPAsyncapiComDefinitions240CorrelationIDJSON *HTTPAsyncapiComDefinitions240CorrelationIDJSON `json:"-"`
}

// WithHTTPAsyncapiComDefinitions240ReferenceJSON sets HTTPAsyncapiComDefinitions240ReferenceJSON value.
func (h *HTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIdsWD) WithHTTPAsyncapiComDefinitions240ReferenceJSON(val Reference) *HTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIdsWD {
	h.HTTPAsyncapiComDefinitions240ReferenceJSON = &val
	return h
}

// HTTPAsyncapiComDefinitions240ReferenceJSONEns ensures returned HTTPAsyncapiComDefinitions240ReferenceJSON is not nil.
func (h *HTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIdsWD) HTTPAsyncapiComDefinitions240ReferenceJSONEns() *Reference {
	if h.HTTPAsyncapiComDefinitions240ReferenceJSON == nil {
		h.HTTPAsyncapiComDefinitions240ReferenceJSON = new(Reference)
	}

	return h.HTTPAsyncapiComDefinitions240ReferenceJSON
}

// WithHTTPAsyncapiComDefinitions240CorrelationIDJSON sets HTTPAsyncapiComDefinitions240CorrelationIDJSON value.
func (h *HTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIdsWD) WithHTTPAsyncapiComDefinitions240CorrelationIDJSON(val HTTPAsyncapiComDefinitions240CorrelationIDJSON) *HTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIdsWD {
	h.HTTPAsyncapiComDefinitions240CorrelationIDJSON = &val
	return h
}

// HTTPAsyncapiComDefinitions240CorrelationIDJSONEns ensures returned HTTPAsyncapiComDefinitions240CorrelationIDJSON is not nil.
func (h *HTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIdsWD) HTTPAsyncapiComDefinitions240CorrelationIDJSONEns() *HTTPAsyncapiComDefinitions240CorrelationIDJSON {
	if h.HTTPAsyncapiComDefinitions240CorrelationIDJSON == nil {
		h.HTTPAsyncapiComDefinitions240CorrelationIDJSON = new(HTTPAsyncapiComDefinitions240CorrelationIDJSON)
	}

	return h.HTTPAsyncapiComDefinitions240CorrelationIDJSON
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIdsWD) UnmarshalJSON(data []byte) error {
	var err error

	oneOfErrors := make(map[string]error, 2)
	oneOfValid := 0

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240ReferenceJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240ReferenceJSON"] = err
		h.HTTPAsyncapiComDefinitions240ReferenceJSON = nil
	} else {
		oneOfValid++
	}

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240CorrelationIDJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240CorrelationIDJSON"] = err
		h.HTTPAsyncapiComDefinitions240CorrelationIDJSON = nil
	} else {
		oneOfValid++
	}

	if oneOfValid != 1 {
		return fmt.Errorf("oneOf constraint failed for HTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIdsWD with %d valid results: %v", oneOfValid, oneOfErrors)
	}

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIdsWD) MarshalJSON() ([]byte, error) {
	return marshalUnion(h.HTTPAsyncapiComDefinitions240ReferenceJSON, h.HTTPAsyncapiComDefinitions240CorrelationIDJSON)
}

// HTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIds structure is generated from "http://asyncapi.com/definitions/2.4.0/components.json->correlationIds".
type HTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIds struct {
	MapOfHTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIdsWDValues map[string]HTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIdsWD `json:"-"` // Key must match pattern: `^[\w\d\.\-_]+$`.
}

// WithMapOfHTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIdsWDValues sets MapOfHTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIdsWDValues value.
func (h *HTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIds) WithMapOfHTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIdsWDValues(val map[string]HTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIdsWD) *HTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIds {
	h.MapOfHTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIdsWDValues = val
	return h
}

// WithMapOfHTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIdsWDValuesItem sets MapOfHTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIdsWDValues item value.
func (h *HTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIds) WithMapOfHTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIdsWDValuesItem(key string, val HTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIdsWD) *HTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIds {
	if h.MapOfHTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIdsWDValues == nil {
		h.MapOfHTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIdsWDValues = make(map[string]HTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIdsWD, 1)
	}

	h.MapOfHTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIdsWDValues[key] = val

	return h
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIds) UnmarshalJSON(data []byte) error {
	var err error

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexWD.MatchString(key) {
			matched = true

			if h.MapOfHTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIdsWDValues == nil {
				h.MapOfHTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIdsWDValues = make(map[string]HTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIdsWD, 1)
			}

			var val HTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIdsWD

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			h.MapOfHTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIdsWDValues[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIds) MarshalJSON() ([]byte, error) {
	return marshalUnion(h.MapOfHTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIdsWDValues)
}

// JSONSchemaTypeAnyOf0 is an enum type.
type JSONSchemaTypeAnyOf0 string

// JSONSchemaTypeAnyOf0 values enumeration.
const (
	JSONSchemaTypeAnyOf0Array   = JSONSchemaTypeAnyOf0("array")
	JSONSchemaTypeAnyOf0Boolean = JSONSchemaTypeAnyOf0("boolean")
	JSONSchemaTypeAnyOf0Integer = JSONSchemaTypeAnyOf0("integer")
	JSONSchemaTypeAnyOf0Null    = JSONSchemaTypeAnyOf0("null")
	JSONSchemaTypeAnyOf0Number  = JSONSchemaTypeAnyOf0("number")
	JSONSchemaTypeAnyOf0Object  = JSONSchemaTypeAnyOf0("object")
	JSONSchemaTypeAnyOf0String  = JSONSchemaTypeAnyOf0("string")
)

// MarshalJSON encodes JSON.
func (i JSONSchemaTypeAnyOf0) MarshalJSON() ([]byte, error) {
	switch i {
	case JSONSchemaTypeAnyOf0Array:
	case JSONSchemaTypeAnyOf0Boolean:
	case JSONSchemaTypeAnyOf0Integer:
	case JSONSchemaTypeAnyOf0Null:
	case JSONSchemaTypeAnyOf0Number:
	case JSONSchemaTypeAnyOf0Object:
	case JSONSchemaTypeAnyOf0String:

	default:
		return nil, fmt.Errorf("unexpected JSONSchemaTypeAnyOf0 value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *JSONSchemaTypeAnyOf0) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := JSONSchemaTypeAnyOf0(ii)

	switch v {
	case JSONSchemaTypeAnyOf0Array:
	case JSONSchemaTypeAnyOf0Boolean:
	case JSONSchemaTypeAnyOf0Integer:
	case JSONSchemaTypeAnyOf0Null:
	case JSONSchemaTypeAnyOf0Number:
	case JSONSchemaTypeAnyOf0Object:
	case JSONSchemaTypeAnyOf0String:

	default:
		return fmt.Errorf("unexpected JSONSchemaTypeAnyOf0 value: %v", v)
	}

	*i = v

	return nil
}

// JSONSchemaTypeAnyOf1Items is an enum type.
type JSONSchemaTypeAnyOf1Items string

// JSONSchemaTypeAnyOf1Items values enumeration.
const (
	JSONSchemaTypeAnyOf1ItemsArray   = JSONSchemaTypeAnyOf1Items("array")
	JSONSchemaTypeAnyOf1ItemsBoolean = JSONSchemaTypeAnyOf1Items("boolean")
	JSONSchemaTypeAnyOf1ItemsInteger = JSONSchemaTypeAnyOf1Items("integer")
	JSONSchemaTypeAnyOf1ItemsNull    = JSONSchemaTypeAnyOf1Items("null")
	JSONSchemaTypeAnyOf1ItemsNumber  = JSONSchemaTypeAnyOf1Items("number")
	JSONSchemaTypeAnyOf1ItemsObject  = JSONSchemaTypeAnyOf1Items("object")
	JSONSchemaTypeAnyOf1ItemsString  = JSONSchemaTypeAnyOf1Items("string")
)

// MarshalJSON encodes JSON.
func (i JSONSchemaTypeAnyOf1Items) MarshalJSON() ([]byte, error) {
	switch i {
	case JSONSchemaTypeAnyOf1ItemsArray:
	case JSONSchemaTypeAnyOf1ItemsBoolean:
	case JSONSchemaTypeAnyOf1ItemsInteger:
	case JSONSchemaTypeAnyOf1ItemsNull:
	case JSONSchemaTypeAnyOf1ItemsNumber:
	case JSONSchemaTypeAnyOf1ItemsObject:
	case JSONSchemaTypeAnyOf1ItemsString:

	default:
		return nil, fmt.Errorf("unexpected JSONSchemaTypeAnyOf1Items value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *JSONSchemaTypeAnyOf1Items) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := JSONSchemaTypeAnyOf1Items(ii)

	switch v {
	case JSONSchemaTypeAnyOf1ItemsArray:
	case JSONSchemaTypeAnyOf1ItemsBoolean:
	case JSONSchemaTypeAnyOf1ItemsInteger:
	case JSONSchemaTypeAnyOf1ItemsNull:
	case JSONSchemaTypeAnyOf1ItemsNumber:
	case JSONSchemaTypeAnyOf1ItemsObject:
	case JSONSchemaTypeAnyOf1ItemsString:

	default:
		return fmt.Errorf("unexpected JSONSchemaTypeAnyOf1Items value: %v", v)
	}

	*i = v

	return nil
}

// HTTPAsyncapiComDefinitions240APIKeyJSONIn is an enum type.
type HTTPAsyncapiComDefinitions240APIKeyJSONIn string

// HTTPAsyncapiComDefinitions240APIKeyJSONIn values enumeration.
const (
	HTTPAsyncapiComDefinitions240APIKeyJSONInUser     = HTTPAsyncapiComDefinitions240APIKeyJSONIn("user")
	HTTPAsyncapiComDefinitions240APIKeyJSONInPassword = HTTPAsyncapiComDefinitions240APIKeyJSONIn("password")
)

// MarshalJSON encodes JSON.
func (i HTTPAsyncapiComDefinitions240APIKeyJSONIn) MarshalJSON() ([]byte, error) {
	switch i {
	case HTTPAsyncapiComDefinitions240APIKeyJSONInUser:
	case HTTPAsyncapiComDefinitions240APIKeyJSONInPassword:

	default:
		return nil, fmt.Errorf("unexpected HTTPAsyncapiComDefinitions240APIKeyJSONIn value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *HTTPAsyncapiComDefinitions240APIKeyJSONIn) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := HTTPAsyncapiComDefinitions240APIKeyJSONIn(ii)

	switch v {
	case HTTPAsyncapiComDefinitions240APIKeyJSONInUser:
	case HTTPAsyncapiComDefinitions240APIKeyJSONInPassword:

	default:
		return fmt.Errorf("unexpected HTTPAsyncapiComDefinitions240APIKeyJSONIn value: %v", v)
	}

	*i = v

	return nil
}

// APIKeyHTTPSecuritySchemeJSONIn is an enum type.
type APIKeyHTTPSecuritySchemeJSONIn string

// APIKeyHTTPSecuritySchemeJSONIn values enumeration.
const (
	APIKeyHTTPSecuritySchemeJSONInHeader = APIKeyHTTPSecuritySchemeJSONIn("header")
	APIKeyHTTPSecuritySchemeJSONInQuery  = APIKeyHTTPSecuritySchemeJSONIn("query")
	APIKeyHTTPSecuritySchemeJSONInCookie = APIKeyHTTPSecuritySchemeJSONIn("cookie")
)

// MarshalJSON encodes JSON.
func (i APIKeyHTTPSecuritySchemeJSONIn) MarshalJSON() ([]byte, error) {
	switch i {
	case APIKeyHTTPSecuritySchemeJSONInHeader:
	case APIKeyHTTPSecuritySchemeJSONInQuery:
	case APIKeyHTTPSecuritySchemeJSONInCookie:

	default:
		return nil, fmt.Errorf("unexpected APIKeyHTTPSecuritySchemeJSONIn value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *APIKeyHTTPSecuritySchemeJSONIn) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := APIKeyHTTPSecuritySchemeJSONIn(ii)

	switch v {
	case APIKeyHTTPSecuritySchemeJSONInHeader:
	case APIKeyHTTPSecuritySchemeJSONInQuery:
	case APIKeyHTTPSecuritySchemeJSONInCookie:

	default:
		return fmt.Errorf("unexpected APIKeyHTTPSecuritySchemeJSONIn value: %v", v)
	}

	*i = v

	return nil
}

// HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSONType is an enum type.
type HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSONType string

// HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSONType values enumeration.
const (
	HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSONTypeScramSha256 = HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSONType("scramSha256")
	HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSONTypeScramSha512 = HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSONType("scramSha512")
)

// MarshalJSON encodes JSON.
func (i HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSONType) MarshalJSON() ([]byte, error) {
	switch i {
	case HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSONTypeScramSha256:
	case HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSONTypeScramSha512:

	default:
		return nil, fmt.Errorf("unexpected HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSONType value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSONType) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSONType(ii)

	switch v {
	case HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSONTypeScramSha256:
	case HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSONTypeScramSha512:

	default:
		return fmt.Errorf("unexpected HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSONType value: %v", v)
	}

	*i = v

	return nil
}

func marshalUnion(maps ...interface{}) ([]byte, error) {
	result := []byte("{")
	isObject := true

	for _, m := range maps {
		j, err := json.Marshal(m)
		if err != nil {
			return nil, err
		}

		if string(j) == "{}" {
			continue
		}

		if string(j) == "null" {
			continue
		}

		if j[0] != '{' {
			if len(result) == 1 && (isObject || bytes.Equal(result, j)) {
				result = j
				isObject = false

				continue
			}

			return nil, errors.New("failed to union map: object expected, " + string(j) + " received")
		}

		if !isObject {
			return nil, errors.New("failed to union " + string(result) + " and " + string(j))
		}

		if len(result) > 1 {
			result[len(result)-1] = ','
		}

		result = append(result, j[1:]...)
	}

	// Close empty result.
	if isObject && len(result) == 1 {
		result = append(result, '}')
	}

	return result, nil
}

// Regular expressions for pattern properties.
var (
	regexXWDX2D = regexp.MustCompile(`^x-[\w\d\.\x2d_]+$`)
	regexWD     = regexp.MustCompile(`^[\w\d\.\-_]+$`)
)
