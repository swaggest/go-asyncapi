// Code generated by github.com/swaggest/json-cli v1.10.0, DO NOT EDIT.

// Package spec contains JSON mapping structures.
package spec

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"regexp"
)

// AsyncAPI structure is generated from "#".
//
// AsyncAPI 2.4.0 schema.
//
// !!Auto generated!!
//
//	Do not manually edit. .
type AsyncAPI struct {
	// A unique id representing the application.
	// Format: uri.
	ID string `json:"id,omitempty"`
	// General information about the API.
	// Required.
	Info               HTTPAsyncapiComDefinitions240InfoJSON                                   `json:"info"`
	Servers            map[string]HTTPAsyncapiComDefinitions240ServersJSONAdditionalProperties `json:"servers,omitempty"` // An object representing multiple servers.
	DefaultContentType string                                                                  `json:"defaultContentType,omitempty"`
	Channels           map[string]ChannelItem                                                  `json:"channels"`             // Required.
	Components         *HTTPAsyncapiComDefinitions240ComponentsJSON                            `json:"components,omitempty"` // An object to hold a set of reusable objects for different aspects of the AsyncAPI Specification.
	Tags               []HTTPAsyncapiComDefinitions240TagJSON                                  `json:"tags,omitempty"`
	ExternalDocs       *HTTPAsyncapiComDefinitions240ExternalDocsJSON                          `json:"externalDocs,omitempty"` // Information about external documentation.
	MapOfAnything      map[string]interface{}                                                  `json:"-"`                      // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

type marshalAsyncAPI AsyncAPI

var knownKeysAsyncAPI = []string{
	"id",
	"info",
	"servers",
	"defaultContentType",
	"channels",
	"components",
	"tags",
	"externalDocs",
	"asyncapi",
}

// UnmarshalJSON decodes JSON.
func (a *AsyncAPI) UnmarshalJSON(data []byte) error {
	var err error

	ma := marshalAsyncAPI(*a)

	err = json.Unmarshal(data, &ma)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	if v, exists := rawMap["asyncapi"]; exists && string(v) != `"2.4.0"` {
		return fmt.Errorf(`bad const value for "asyncapi" ("2.4.0" expected, %s received)`, v)
	}

	delete(rawMap, "asyncapi")

	for _, key := range knownKeysAsyncAPI {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if ma.MapOfAnything == nil {
				ma.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			ma.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in AsyncAPI: %v", offendingKeys)
	}

	*a = AsyncAPI(ma)

	return nil
}

// constAsyncAPI is unconditionally added to JSON.
var constAsyncAPI = json.RawMessage(`{"asyncapi":"2.4.0"}`)

// MarshalJSON encodes JSON.
func (a AsyncAPI) MarshalJSON() ([]byte, error) {
	return marshalUnion(constAsyncAPI, marshalAsyncAPI(a), a.MapOfAnything)
}

// HTTPAsyncapiComDefinitions240InfoJSON structure is generated from "http://asyncapi.com/definitions/2.4.0/info.json".
//
// General information about the API.
type HTTPAsyncapiComDefinitions240InfoJSON struct {
	// A unique and precise title of the API.
	// Required.
	Title string `json:"title"`
	// A semantic version number of the API.
	// Required.
	Version     string `json:"version"`
	Description string `json:"description,omitempty"` // A longer description of the API. Should be different from the title. CommonMark is allowed.
	// A URL to the Terms of Service for the API. MUST be in the format of a URL.
	// Format: uri.
	TermsOfService string                                    `json:"termsOfService,omitempty"`
	Contact        *HTTPAsyncapiComDefinitions240ContactJSON `json:"contact,omitempty"` // Contact information for the owners of the API.
	License        *HTTPAsyncapiComDefinitions240LicenseJSON `json:"license,omitempty"`
	MapOfAnything  map[string]interface{}                    `json:"-"` // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

type marshalHTTPAsyncapiComDefinitions240InfoJSON HTTPAsyncapiComDefinitions240InfoJSON

var knownKeysHTTPAsyncapiComDefinitions240InfoJSON = []string{
	"title",
	"version",
	"description",
	"termsOfService",
	"contact",
	"license",
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240InfoJSON) UnmarshalJSON(data []byte) error {
	var err error

	mh := marshalHTTPAsyncapiComDefinitions240InfoJSON(*h)

	err = json.Unmarshal(data, &mh)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysHTTPAsyncapiComDefinitions240InfoJSON {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if mh.MapOfAnything == nil {
				mh.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			mh.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in HTTPAsyncapiComDefinitions240InfoJSON: %v", offendingKeys)
	}

	*h = HTTPAsyncapiComDefinitions240InfoJSON(mh)

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240InfoJSON) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalHTTPAsyncapiComDefinitions240InfoJSON(h), h.MapOfAnything)
}

// HTTPAsyncapiComDefinitions240ContactJSON structure is generated from "http://asyncapi.com/definitions/2.4.0/contact.json".
//
// Contact information for the owners of the API.
type HTTPAsyncapiComDefinitions240ContactJSON struct {
	Name string `json:"name,omitempty"` // The identifying name of the contact person/organization.
	// The URL pointing to the contact information.
	// Format: uri.
	URL string `json:"url,omitempty"`
	// The email address of the contact person/organization.
	// Format: email.
	Email         string                 `json:"email,omitempty"`
	MapOfAnything map[string]interface{} `json:"-"` // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

type marshalHTTPAsyncapiComDefinitions240ContactJSON HTTPAsyncapiComDefinitions240ContactJSON

var knownKeysHTTPAsyncapiComDefinitions240ContactJSON = []string{
	"name",
	"url",
	"email",
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240ContactJSON) UnmarshalJSON(data []byte) error {
	var err error

	mh := marshalHTTPAsyncapiComDefinitions240ContactJSON(*h)

	err = json.Unmarshal(data, &mh)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysHTTPAsyncapiComDefinitions240ContactJSON {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if mh.MapOfAnything == nil {
				mh.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			mh.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in HTTPAsyncapiComDefinitions240ContactJSON: %v", offendingKeys)
	}

	*h = HTTPAsyncapiComDefinitions240ContactJSON(mh)

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240ContactJSON) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalHTTPAsyncapiComDefinitions240ContactJSON(h), h.MapOfAnything)
}

// HTTPAsyncapiComDefinitions240LicenseJSON structure is generated from "http://asyncapi.com/definitions/2.4.0/license.json".
type HTTPAsyncapiComDefinitions240LicenseJSON struct {
	// The name of the license type. It's encouraged to use an OSI compatible license.
	// Required.
	Name string `json:"name"`
	// The URL pointing to the license.
	// Format: uri.
	URL           string                 `json:"url,omitempty"`
	MapOfAnything map[string]interface{} `json:"-"` // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

type marshalHTTPAsyncapiComDefinitions240LicenseJSON HTTPAsyncapiComDefinitions240LicenseJSON

var knownKeysHTTPAsyncapiComDefinitions240LicenseJSON = []string{
	"name",
	"url",
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240LicenseJSON) UnmarshalJSON(data []byte) error {
	var err error

	mh := marshalHTTPAsyncapiComDefinitions240LicenseJSON(*h)

	err = json.Unmarshal(data, &mh)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysHTTPAsyncapiComDefinitions240LicenseJSON {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if mh.MapOfAnything == nil {
				mh.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			mh.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in HTTPAsyncapiComDefinitions240LicenseJSON: %v", offendingKeys)
	}

	*h = HTTPAsyncapiComDefinitions240LicenseJSON(mh)

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240LicenseJSON) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalHTTPAsyncapiComDefinitions240LicenseJSON(h), h.MapOfAnything)
}

// HTTPAsyncapiComDefinitions240ReferenceJSON structure is generated from "http://asyncapi.com/definitions/2.4.0/Reference.json".
type HTTPAsyncapiComDefinitions240ReferenceJSON struct {
	// Format: uri-reference.
	// Required.
	Ref string `json:"$ref"`
}

// Server structure is generated from "http://asyncapi.com/definitions/2.4.0/server.json".
//
// An object representing a Server.
type Server struct {
	URL         string `json:"url"` // Required.
	Description string `json:"description,omitempty"`
	// The transfer protocol.
	// Required.
	Protocol        string                    `json:"protocol"`
	ProtocolVersion string                    `json:"protocolVersion,omitempty"`
	Variables       map[string]ServerVariable `json:"variables,omitempty"`
	Security        []map[string][]string     `json:"security,omitempty"`
	Bindings        *ChannelBindingsObject    `json:"bindings,omitempty"`
	MapOfAnything   map[string]interface{}    `json:"-"` // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

type marshalServer Server

var knownKeysServer = []string{
	"url",
	"description",
	"protocol",
	"protocolVersion",
	"variables",
	"security",
	"bindings",
}

// UnmarshalJSON decodes JSON.
func (s *Server) UnmarshalJSON(data []byte) error {
	var err error

	ms := marshalServer(*s)

	err = json.Unmarshal(data, &ms)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysServer {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if ms.MapOfAnything == nil {
				ms.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			ms.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in Server: %v", offendingKeys)
	}

	*s = Server(ms)

	return nil
}

// MarshalJSON encodes JSON.
func (s Server) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalServer(s), s.MapOfAnything)
}

// ServerVariable structure is generated from "http://asyncapi.com/definitions/2.4.0/serverVariable.json".
//
// An object representing a Server Variable for server URL template substitution.
type ServerVariable struct {
	Enum          []string               `json:"enum,omitempty"`
	Default       string                 `json:"default,omitempty"`
	Description   string                 `json:"description,omitempty"`
	Examples      []string               `json:"examples,omitempty"`
	MapOfAnything map[string]interface{} `json:"-"` // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

type marshalServerVariable ServerVariable

var knownKeysServerVariable = []string{
	"enum",
	"default",
	"description",
	"examples",
}

// UnmarshalJSON decodes JSON.
func (s *ServerVariable) UnmarshalJSON(data []byte) error {
	var err error

	ms := marshalServerVariable(*s)

	err = json.Unmarshal(data, &ms)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysServerVariable {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if ms.MapOfAnything == nil {
				ms.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			ms.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in ServerVariable: %v", offendingKeys)
	}

	*s = ServerVariable(ms)

	return nil
}

// MarshalJSON encodes JSON.
func (s ServerVariable) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalServerVariable(s), s.MapOfAnything)
}

// ChannelBindingsObject structure is generated from "http://asyncapi.com/definitions/2.4.0/bindingsObject.json".
type ChannelBindingsObject struct {
	HTTP                 *interface{}           `json:"http,omitempty"`
	Ws                   *interface{}           `json:"ws,omitempty"`
	Amqp                 *interface{}           `json:"amqp,omitempty"`
	Amqp1                *interface{}           `json:"amqp1,omitempty"`
	Mqtt                 *interface{}           `json:"mqtt,omitempty"`
	Mqtt5                *interface{}           `json:"mqtt5,omitempty"`
	Kafka                *interface{}           `json:"kafka,omitempty"`
	Anypointmq           *interface{}           `json:"anypointmq,omitempty"`
	Nats                 *interface{}           `json:"nats,omitempty"`
	Jms                  *interface{}           `json:"jms,omitempty"`
	Sns                  *interface{}           `json:"sns,omitempty"`
	Sqs                  *interface{}           `json:"sqs,omitempty"`
	Stomp                *interface{}           `json:"stomp,omitempty"`
	Redis                *interface{}           `json:"redis,omitempty"`
	Ibmmq                *interface{}           `json:"ibmmq,omitempty"`
	Solace               *interface{}           `json:"solace,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"` // All unmatched properties.
}

type marshalChannelBindingsObject ChannelBindingsObject

var knownKeysChannelBindingsObject = []string{
	"http",
	"ws",
	"amqp",
	"amqp1",
	"mqtt",
	"mqtt5",
	"kafka",
	"anypointmq",
	"nats",
	"jms",
	"sns",
	"sqs",
	"stomp",
	"redis",
	"ibmmq",
	"solace",
}

// UnmarshalJSON decodes JSON.
func (c *ChannelBindingsObject) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalChannelBindingsObject(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	if mc.HTTP == nil {
		if _, ok := rawMap["http"]; ok {
			var v interface{}
			mc.HTTP = &v
		}
	}

	if mc.Ws == nil {
		if _, ok := rawMap["ws"]; ok {
			var v interface{}
			mc.Ws = &v
		}
	}

	if mc.Amqp == nil {
		if _, ok := rawMap["amqp"]; ok {
			var v interface{}
			mc.Amqp = &v
		}
	}

	if mc.Amqp1 == nil {
		if _, ok := rawMap["amqp1"]; ok {
			var v interface{}
			mc.Amqp1 = &v
		}
	}

	if mc.Mqtt == nil {
		if _, ok := rawMap["mqtt"]; ok {
			var v interface{}
			mc.Mqtt = &v
		}
	}

	if mc.Mqtt5 == nil {
		if _, ok := rawMap["mqtt5"]; ok {
			var v interface{}
			mc.Mqtt5 = &v
		}
	}

	if mc.Kafka == nil {
		if _, ok := rawMap["kafka"]; ok {
			var v interface{}
			mc.Kafka = &v
		}
	}

	if mc.Anypointmq == nil {
		if _, ok := rawMap["anypointmq"]; ok {
			var v interface{}
			mc.Anypointmq = &v
		}
	}

	if mc.Nats == nil {
		if _, ok := rawMap["nats"]; ok {
			var v interface{}
			mc.Nats = &v
		}
	}

	if mc.Jms == nil {
		if _, ok := rawMap["jms"]; ok {
			var v interface{}
			mc.Jms = &v
		}
	}

	if mc.Sns == nil {
		if _, ok := rawMap["sns"]; ok {
			var v interface{}
			mc.Sns = &v
		}
	}

	if mc.Sqs == nil {
		if _, ok := rawMap["sqs"]; ok {
			var v interface{}
			mc.Sqs = &v
		}
	}

	if mc.Stomp == nil {
		if _, ok := rawMap["stomp"]; ok {
			var v interface{}
			mc.Stomp = &v
		}
	}

	if mc.Redis == nil {
		if _, ok := rawMap["redis"]; ok {
			var v interface{}
			mc.Redis = &v
		}
	}

	if mc.Ibmmq == nil {
		if _, ok := rawMap["ibmmq"]; ok {
			var v interface{}
			mc.Ibmmq = &v
		}
	}

	if mc.Solace == nil {
		if _, ok := rawMap["solace"]; ok {
			var v interface{}
			mc.Solace = &v
		}
	}

	for _, key := range knownKeysChannelBindingsObject {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		if mc.AdditionalProperties == nil {
			mc.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		mc.AdditionalProperties[key] = val
	}

	*c = ChannelBindingsObject(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c ChannelBindingsObject) MarshalJSON() ([]byte, error) {
	if len(c.AdditionalProperties) == 0 {
		return json.Marshal(marshalChannelBindingsObject(c))
	}

	return marshalUnion(marshalChannelBindingsObject(c), c.AdditionalProperties)
}

// HTTPAsyncapiComDefinitions240ServersJSONAdditionalProperties structure is generated from "http://asyncapi.com/definitions/2.4.0/servers.json->additionalProperties".
type HTTPAsyncapiComDefinitions240ServersJSONAdditionalProperties struct {
	HTTPAsyncapiComDefinitions240ReferenceJSON *HTTPAsyncapiComDefinitions240ReferenceJSON `json:"-"`
	Server                                     *Server                                     `json:"-"`
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240ServersJSONAdditionalProperties) UnmarshalJSON(data []byte) error {
	var err error

	oneOfErrors := make(map[string]error, 2)
	oneOfValid := 0

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240ReferenceJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240ReferenceJSON"] = err
		h.HTTPAsyncapiComDefinitions240ReferenceJSON = nil
	} else {
		oneOfValid++
	}

	err = json.Unmarshal(data, &h.Server)
	if err != nil {
		oneOfErrors["Server"] = err
		h.Server = nil
	} else {
		oneOfValid++
	}

	if oneOfValid != 1 {
		return fmt.Errorf("oneOf constraint failed for HTTPAsyncapiComDefinitions240ServersJSONAdditionalProperties with %d valid results: %v", oneOfValid, oneOfErrors)
	}

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240ServersJSONAdditionalProperties) MarshalJSON() ([]byte, error) {
	return marshalUnion(h.HTTPAsyncapiComDefinitions240ReferenceJSON, h.Server)
}

// ChannelItem structure is generated from "http://asyncapi.com/definitions/2.4.0/channelItem.json".
type ChannelItem struct {
	Ref           string                                                `json:"$ref,omitempty"` // Format: uri-reference.
	Parameters    map[string]HTTPAsyncapiComDefinitions240ParameterJSON `json:"parameters,omitempty"`
	Description   string                                                `json:"description,omitempty"` // A description of the channel.
	Servers       []string                                              `json:"servers,omitempty"`     // The names of the servers on which this channel is available. If absent or empty then this channel must be available on all servers.
	Publish       *HTTPAsyncapiComDefinitions240OperationJSON           `json:"publish,omitempty"`
	Subscribe     *HTTPAsyncapiComDefinitions240OperationJSON           `json:"subscribe,omitempty"`
	Deprecated    bool                                                  `json:"deprecated,omitempty"`
	Bindings      *ChannelBindingsObject                                `json:"bindings,omitempty"`
	MapOfAnything map[string]interface{}                                `json:"-"` // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

type marshalChannelItem ChannelItem

var knownKeysChannelItem = []string{
	"$ref",
	"parameters",
	"description",
	"servers",
	"publish",
	"subscribe",
	"deprecated",
	"bindings",
}

// UnmarshalJSON decodes JSON.
func (c *ChannelItem) UnmarshalJSON(data []byte) error {
	var err error

	mc := marshalChannelItem(*c)

	err = json.Unmarshal(data, &mc)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysChannelItem {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if mc.MapOfAnything == nil {
				mc.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			mc.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in ChannelItem: %v", offendingKeys)
	}

	*c = ChannelItem(mc)

	return nil
}

// MarshalJSON encodes JSON.
func (c ChannelItem) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalChannelItem(c), c.MapOfAnything)
}

// HTTPAsyncapiComDefinitions240ParameterJSON structure is generated from "http://asyncapi.com/definitions/2.4.0/parameter.json".
type HTTPAsyncapiComDefinitions240ParameterJSON struct {
	Description string                 `json:"description,omitempty"` // A brief description of the parameter. This could contain examples of use. GitHub Flavored Markdown is allowed.
	Schema      map[string]interface{} `json:"schema,omitempty"`
	// A runtime expression that specifies the location of the parameter value.
	// Value must match pattern: `^\$message\.(header|payload)#(\/(([^\/~])|(~[01]))*)*`.
	Location      string                 `json:"location,omitempty"`
	Ref           string                 `json:"$ref,omitempty"` // Format: uri-reference.
	MapOfAnything map[string]interface{} `json:"-"`              // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

type marshalHTTPAsyncapiComDefinitions240ParameterJSON HTTPAsyncapiComDefinitions240ParameterJSON

var knownKeysHTTPAsyncapiComDefinitions240ParameterJSON = []string{
	"description",
	"schema",
	"location",
	"$ref",
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240ParameterJSON) UnmarshalJSON(data []byte) error {
	var err error

	mh := marshalHTTPAsyncapiComDefinitions240ParameterJSON(*h)

	err = json.Unmarshal(data, &mh)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysHTTPAsyncapiComDefinitions240ParameterJSON {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if mh.MapOfAnything == nil {
				mh.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			mh.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in HTTPAsyncapiComDefinitions240ParameterJSON: %v", offendingKeys)
	}

	*h = HTTPAsyncapiComDefinitions240ParameterJSON(mh)

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240ParameterJSON) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalHTTPAsyncapiComDefinitions240ParameterJSON(h), h.MapOfAnything)
}

// HTTPAsyncapiComDefinitions240OperationJSON structure is generated from "http://asyncapi.com/definitions/2.4.0/operation.json".
type HTTPAsyncapiComDefinitions240OperationJSON struct {
	Traits        []HTTPAsyncapiComDefinitions240OperationJSONTraitsItems `json:"traits,omitempty"`
	Summary       string                                                  `json:"summary,omitempty"`
	Description   string                                                  `json:"description,omitempty"`
	Security      []map[string][]string                                   `json:"security,omitempty"`
	Tags          []HTTPAsyncapiComDefinitions240TagJSON                  `json:"tags,omitempty"`
	ExternalDocs  *HTTPAsyncapiComDefinitions240ExternalDocsJSON          `json:"externalDocs,omitempty"` // Information about external documentation.
	OperationID   string                                                  `json:"operationId,omitempty"`
	Bindings      *ChannelBindingsObject                                  `json:"bindings,omitempty"`
	Message       *HTTPAsyncapiComDefinitions240MessageJSON               `json:"message,omitempty"`
	MapOfAnything map[string]interface{}                                  `json:"-"` // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

type marshalHTTPAsyncapiComDefinitions240OperationJSON HTTPAsyncapiComDefinitions240OperationJSON

var knownKeysHTTPAsyncapiComDefinitions240OperationJSON = []string{
	"traits",
	"summary",
	"description",
	"security",
	"tags",
	"externalDocs",
	"operationId",
	"bindings",
	"message",
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240OperationJSON) UnmarshalJSON(data []byte) error {
	var err error

	mh := marshalHTTPAsyncapiComDefinitions240OperationJSON(*h)

	err = json.Unmarshal(data, &mh)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysHTTPAsyncapiComDefinitions240OperationJSON {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if mh.MapOfAnything == nil {
				mh.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			mh.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in HTTPAsyncapiComDefinitions240OperationJSON: %v", offendingKeys)
	}

	*h = HTTPAsyncapiComDefinitions240OperationJSON(mh)

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240OperationJSON) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalHTTPAsyncapiComDefinitions240OperationJSON(h), h.MapOfAnything)
}

// HTTPAsyncapiComDefinitions240OperationTraitJSON structure is generated from "http://asyncapi.com/definitions/2.4.0/operationTrait.json".
type HTTPAsyncapiComDefinitions240OperationTraitJSON struct {
	Summary       string                                         `json:"summary,omitempty"`
	Description   string                                         `json:"description,omitempty"`
	Tags          []HTTPAsyncapiComDefinitions240TagJSON         `json:"tags,omitempty"`
	ExternalDocs  *HTTPAsyncapiComDefinitions240ExternalDocsJSON `json:"externalDocs,omitempty"` // Information about external documentation.
	OperationID   string                                         `json:"operationId,omitempty"`
	Security      []map[string][]string                          `json:"security,omitempty"`
	Bindings      *ChannelBindingsObject                         `json:"bindings,omitempty"`
	MapOfAnything map[string]interface{}                         `json:"-"` // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

type marshalHTTPAsyncapiComDefinitions240OperationTraitJSON HTTPAsyncapiComDefinitions240OperationTraitJSON

var knownKeysHTTPAsyncapiComDefinitions240OperationTraitJSON = []string{
	"summary",
	"description",
	"tags",
	"externalDocs",
	"operationId",
	"security",
	"bindings",
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240OperationTraitJSON) UnmarshalJSON(data []byte) error {
	var err error

	mh := marshalHTTPAsyncapiComDefinitions240OperationTraitJSON(*h)

	err = json.Unmarshal(data, &mh)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysHTTPAsyncapiComDefinitions240OperationTraitJSON {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if mh.MapOfAnything == nil {
				mh.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			mh.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in HTTPAsyncapiComDefinitions240OperationTraitJSON: %v", offendingKeys)
	}

	*h = HTTPAsyncapiComDefinitions240OperationTraitJSON(mh)

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240OperationTraitJSON) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalHTTPAsyncapiComDefinitions240OperationTraitJSON(h), h.MapOfAnything)
}

// HTTPAsyncapiComDefinitions240TagJSON structure is generated from "http://asyncapi.com/definitions/2.4.0/tag.json".
type HTTPAsyncapiComDefinitions240TagJSON struct {
	Name          string                                         `json:"name"` // Required.
	Description   string                                         `json:"description,omitempty"`
	ExternalDocs  *HTTPAsyncapiComDefinitions240ExternalDocsJSON `json:"externalDocs,omitempty"` // Information about external documentation.
	MapOfAnything map[string]interface{}                         `json:"-"`                      // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

type marshalHTTPAsyncapiComDefinitions240TagJSON HTTPAsyncapiComDefinitions240TagJSON

var knownKeysHTTPAsyncapiComDefinitions240TagJSON = []string{
	"name",
	"description",
	"externalDocs",
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240TagJSON) UnmarshalJSON(data []byte) error {
	var err error

	mh := marshalHTTPAsyncapiComDefinitions240TagJSON(*h)

	err = json.Unmarshal(data, &mh)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysHTTPAsyncapiComDefinitions240TagJSON {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if mh.MapOfAnything == nil {
				mh.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			mh.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in HTTPAsyncapiComDefinitions240TagJSON: %v", offendingKeys)
	}

	*h = HTTPAsyncapiComDefinitions240TagJSON(mh)

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240TagJSON) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalHTTPAsyncapiComDefinitions240TagJSON(h), h.MapOfAnything)
}

// HTTPAsyncapiComDefinitions240ExternalDocsJSON structure is generated from "http://asyncapi.com/definitions/2.4.0/externalDocs.json".
//
// information about external documentation.
type HTTPAsyncapiComDefinitions240ExternalDocsJSON struct {
	Description string `json:"description,omitempty"`
	// Format: uri.
	// Required.
	URL           string                 `json:"url"`
	MapOfAnything map[string]interface{} `json:"-"` // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

type marshalHTTPAsyncapiComDefinitions240ExternalDocsJSON HTTPAsyncapiComDefinitions240ExternalDocsJSON

var knownKeysHTTPAsyncapiComDefinitions240ExternalDocsJSON = []string{
	"description",
	"url",
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240ExternalDocsJSON) UnmarshalJSON(data []byte) error {
	var err error

	mh := marshalHTTPAsyncapiComDefinitions240ExternalDocsJSON(*h)

	err = json.Unmarshal(data, &mh)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysHTTPAsyncapiComDefinitions240ExternalDocsJSON {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if mh.MapOfAnything == nil {
				mh.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			mh.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in HTTPAsyncapiComDefinitions240ExternalDocsJSON: %v", offendingKeys)
	}

	*h = HTTPAsyncapiComDefinitions240ExternalDocsJSON(mh)

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240ExternalDocsJSON) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalHTTPAsyncapiComDefinitions240ExternalDocsJSON(h), h.MapOfAnything)
}

// HTTPAsyncapiComDefinitions240OperationJSONTraitsItems structure is generated from "http://asyncapi.com/definitions/2.4.0/operation.json->traits->items".
type HTTPAsyncapiComDefinitions240OperationJSONTraitsItems struct {
	HTTPAsyncapiComDefinitions240ReferenceJSON      *HTTPAsyncapiComDefinitions240ReferenceJSON      `json:"-"`
	HTTPAsyncapiComDefinitions240OperationTraitJSON *HTTPAsyncapiComDefinitions240OperationTraitJSON `json:"-"`
	SliceOfAnything                                 []interface{}                                    `json:"-"`
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240OperationJSONTraitsItems) UnmarshalJSON(data []byte) error {
	var err error

	oneOfErrors := make(map[string]error, 3)
	oneOfValid := 0

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240ReferenceJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240ReferenceJSON"] = err
		h.HTTPAsyncapiComDefinitions240ReferenceJSON = nil
	} else {
		oneOfValid++
	}

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240OperationTraitJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240OperationTraitJSON"] = err
		h.HTTPAsyncapiComDefinitions240OperationTraitJSON = nil
	} else {
		oneOfValid++
	}

	err = json.Unmarshal(data, &h.SliceOfAnything)
	if err != nil {
		oneOfErrors["SliceOfAnything"] = err
		h.SliceOfAnything = nil
	} else {
		oneOfValid++
	}

	if oneOfValid != 1 {
		return fmt.Errorf("oneOf constraint failed for HTTPAsyncapiComDefinitions240OperationJSONTraitsItems with %d valid results: %v", oneOfValid, oneOfErrors)
	}

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240OperationJSONTraitsItems) MarshalJSON() ([]byte, error) {
	return marshalUnion(h.HTTPAsyncapiComDefinitions240ReferenceJSON, h.HTTPAsyncapiComDefinitions240OperationTraitJSON, h.SliceOfAnything)
}

// HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf0 structure is generated from "http://asyncapi.com/definitions/2.4.0/message.json/oneOf/1/oneOf/0".
type HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf0 struct {
	OneOf []HTTPAsyncapiComDefinitions240MessageJSON `json:"oneOf"` // Required.
}

type marshalHTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf0 HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf0

var knownKeysHTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf0 = []string{
	"oneOf",
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf0) UnmarshalJSON(data []byte) error {
	var err error

	mh := marshalHTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf0(*h)

	err = json.Unmarshal(data, &mh)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysHTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf0 {
		delete(rawMap, key)
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf0: %v", offendingKeys)
	}

	*h = HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf0(mh)

	return nil
}

// MessageEntity structure is generated from "http://asyncapi.com/definitions/2.4.0/message.json/oneOf/1/oneOf/1".
type MessageEntity struct {
	SchemaFormat  string                                                              `json:"schemaFormat,omitempty"`
	ContentType   string                                                              `json:"contentType,omitempty"`
	Headers       *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1Headers        `json:"headers,omitempty"`
	MessageID     string                                                              `json:"messageId,omitempty"`
	Payload       *interface{}                                                        `json:"payload,omitempty"`
	CorrelationID *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1CorrelationID  `json:"correlationId,omitempty"`
	Tags          []HTTPAsyncapiComDefinitions240TagJSON                              `json:"tags,omitempty"`
	Summary       string                                                              `json:"summary,omitempty"`      // A brief summary of the message.
	Name          string                                                              `json:"name,omitempty"`         // Name of the message.
	Title         string                                                              `json:"title,omitempty"`        // A human-friendly title for the message.
	Description   string                                                              `json:"description,omitempty"`  // A longer description of the message. CommonMark is allowed.
	ExternalDocs  *HTTPAsyncapiComDefinitions240ExternalDocsJSON                      `json:"externalDocs,omitempty"` // Information about external documentation.
	Deprecated    bool                                                                `json:"deprecated,omitempty"`
	Examples      []HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1ExamplesItems `json:"examples,omitempty"`
	Bindings      *ChannelBindingsObject                                              `json:"bindings,omitempty"`
	Traits        []HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1TraitsItems   `json:"traits,omitempty"`
	MapOfAnything map[string]interface{}                                              `json:"-"` // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

type marshalMessageEntity MessageEntity

var knownKeysMessageEntity = []string{
	"schemaFormat",
	"contentType",
	"headers",
	"messageId",
	"payload",
	"correlationId",
	"tags",
	"summary",
	"name",
	"title",
	"description",
	"externalDocs",
	"deprecated",
	"examples",
	"bindings",
	"traits",
}

// UnmarshalJSON decodes JSON.
func (m *MessageEntity) UnmarshalJSON(data []byte) error {
	var err error

	mm := marshalMessageEntity(*m)

	err = json.Unmarshal(data, &mm)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	if mm.Payload == nil {
		if _, ok := rawMap["payload"]; ok {
			var v interface{}
			mm.Payload = &v
		}
	}

	for _, key := range knownKeysMessageEntity {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if mm.MapOfAnything == nil {
				mm.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			mm.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in MessageEntity: %v", offendingKeys)
	}

	*m = MessageEntity(mm)

	return nil
}

// MarshalJSON encodes JSON.
func (m MessageEntity) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalMessageEntity(m), m.MapOfAnything)
}

// JSONSchema structure is generated from "jsonSchema".
//
// Core schema meta-schema.
type JSONSchema struct {
	ID                   string                                                `json:"id,omitempty"`      // Format: uri.
	Schema               string                                                `json:"$schema,omitempty"` // Format: uri.
	Title                string                                                `json:"title,omitempty"`
	Description          string                                                `json:"description,omitempty"`
	Default              *interface{}                                          `json:"default,omitempty"`
	MultipleOf           float64                                               `json:"multipleOf,omitempty"`
	Maximum              float64                                               `json:"maximum,omitempty"`
	ExclusiveMaximum     *JSONSchemaExclusiveMaximum                           `json:"exclusiveMaximum,omitempty"`
	Minimum              float64                                               `json:"minimum,omitempty"`
	ExclusiveMinimum     *JSONSchemaExclusiveMinimum                           `json:"exclusiveMinimum,omitempty"`
	MaxLength            int64                                                 `json:"maxLength,omitempty"`
	MinLength            int64                                                 `json:"minLength,omitempty"`
	Pattern              string                                                `json:"pattern,omitempty"` // Format: regex.
	TypeObject           *JSONSchema                                           `json:"-"`
	TypeBoolean          *bool                                                 `json:"-"`
	AdditionalItems      *JSONSchemaAdditionalItems                            `json:"additionalItems,omitempty"`
	Items                *JSONSchemaItems                                      `json:"items,omitempty"`
	MaxItems             int64                                                 `json:"maxItems,omitempty"`
	MinItems             int64                                                 `json:"minItems,omitempty"`
	UniqueItems          bool                                                  `json:"uniqueItems,omitempty"`
	MaxProperties        int64                                                 `json:"maxProperties,omitempty"`
	MinProperties        int64                                                 `json:"minProperties,omitempty"`
	Required             []string                                              `json:"required,omitempty"`
	AdditionalProperties *JSONSchemaAdditionalProperties                       `json:"additionalProperties,omitempty"`
	Definitions          map[string]interface{}                                `json:"definitions,omitempty"`
	Properties           map[string]interface{}                                `json:"properties,omitempty"`
	PatternProperties    map[string]interface{}                                `json:"patternProperties,omitempty"`
	Dependencies         map[string]JSONSchemaDependenciesAdditionalProperties `json:"dependencies,omitempty"`
	Enum                 []interface{}                                         `json:"enum,omitempty"`
	Type                 *JSONSchemaType                                       `json:"type,omitempty"`
	Format               string                                                `json:"format,omitempty"`
	Ref                  string                                                `json:"$ref,omitempty"` // Format: uri-reference.
	AllOf                []interface{}                                         `json:"allOf,omitempty"`
	AnyOf                []interface{}                                         `json:"anyOf,omitempty"`
	OneOf                []interface{}                                         `json:"oneOf,omitempty"`
	Not                  *JSONSchema                                           `json:"not,omitempty"` // Core schema meta-schema.
	Const                *interface{}                                          `json:"const,omitempty"`
	Contains             *JSONSchema                                           `json:"contains,omitempty"`      // Core schema meta-schema.
	PropertyNames        *JSONSchema                                           `json:"propertyNames,omitempty"` // Core schema meta-schema.
	If                   *JSONSchema                                           `json:"if,omitempty"`            // Core schema meta-schema.
	Then                 *JSONSchema                                           `json:"then,omitempty"`          // Core schema meta-schema.
	Else                 *JSONSchema                                           `json:"else,omitempty"`          // Core schema meta-schema.
	ContentEncoding      string                                                `json:"contentEncoding,omitempty"`
	ContentMediaType     string                                                `json:"contentMediaType,omitempty"`
}

type marshalJSONSchema JSONSchema

// UnmarshalJSON decodes JSON.
func (j *JSONSchema) UnmarshalJSON(data []byte) error {
	var err error

	mj := marshalJSONSchema(*j)

	err = json.Unmarshal(data, &mj)
	if err != nil {
		return err
	}

	typeValid := false

	if !typeValid {
		err = json.Unmarshal(data, &mj.TypeObject)
		if err != nil {
			mj.TypeObject = nil
		} else {
			typeValid = true
		}
	}

	if !typeValid {
		err = json.Unmarshal(data, &mj.TypeBoolean)
		if err != nil {
			mj.TypeBoolean = nil
		} else {
			typeValid = true
		}
	}

	if !typeValid {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	if mj.Default == nil {
		if _, ok := rawMap["default"]; ok {
			var v interface{}
			mj.Default = &v
		}
	}

	if mj.Const == nil {
		if _, ok := rawMap["const"]; ok {
			var v interface{}
			mj.Const = &v
		}
	}

	*j = JSONSchema(mj)

	return nil
}

// MarshalJSON encodes JSON.
func (j JSONSchema) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalJSONSchema(j), j.TypeObject, j.TypeBoolean)
}

// JSONSchemaExclusiveMaximum structure is generated from "jsonSchema->exclusiveMaximum".
type JSONSchemaExclusiveMaximum struct {
	TypeBoolean *bool    `json:"-"`
	TypeNumber  *float64 `json:"-"`
}

// UnmarshalJSON decodes JSON.
func (j *JSONSchemaExclusiveMaximum) UnmarshalJSON(data []byte) error {
	var err error

	typeValid := false

	if !typeValid {
		err = json.Unmarshal(data, &j.TypeBoolean)
		if err != nil {
			j.TypeBoolean = nil
		} else {
			typeValid = true
		}
	}

	if !typeValid {
		err = json.Unmarshal(data, &j.TypeNumber)
		if err != nil {
			j.TypeNumber = nil
		} else {
			typeValid = true
		}
	}

	if !typeValid {
		return err
	}

	return nil
}

// MarshalJSON encodes JSON.
func (j JSONSchemaExclusiveMaximum) MarshalJSON() ([]byte, error) {
	return marshalUnion(j.TypeBoolean, j.TypeNumber)
}

// JSONSchemaExclusiveMinimum structure is generated from "jsonSchema->exclusiveMinimum".
type JSONSchemaExclusiveMinimum struct {
	TypeBoolean *bool    `json:"-"`
	TypeNumber  *float64 `json:"-"`
}

// UnmarshalJSON decodes JSON.
func (j *JSONSchemaExclusiveMinimum) UnmarshalJSON(data []byte) error {
	var err error

	typeValid := false

	if !typeValid {
		err = json.Unmarshal(data, &j.TypeBoolean)
		if err != nil {
			j.TypeBoolean = nil
		} else {
			typeValid = true
		}
	}

	if !typeValid {
		err = json.Unmarshal(data, &j.TypeNumber)
		if err != nil {
			j.TypeNumber = nil
		} else {
			typeValid = true
		}
	}

	if !typeValid {
		return err
	}

	return nil
}

// MarshalJSON encodes JSON.
func (j JSONSchemaExclusiveMinimum) MarshalJSON() ([]byte, error) {
	return marshalUnion(j.TypeBoolean, j.TypeNumber)
}

// JSONSchemaAdditionalItems structure is generated from "jsonSchema->additionalItems".
type JSONSchemaAdditionalItems struct {
	Bool *bool `json:"-"`
}

// UnmarshalJSON decodes JSON.
func (j *JSONSchemaAdditionalItems) UnmarshalJSON(data []byte) error {
	var err error

	anyOfErrors := make(map[string]error, 1)
	anyOfValid := 0

	err = json.Unmarshal(data, &j.Bool)
	if err != nil {
		anyOfErrors["Bool"] = err
		j.Bool = nil
	} else {
		anyOfValid++
	}

	if anyOfValid == 0 {
		return fmt.Errorf("anyOf constraint for JSONSchemaAdditionalItems failed with %d valid results: %v", anyOfValid, anyOfErrors)
	}

	return nil
}

// MarshalJSON encodes JSON.
func (j JSONSchemaAdditionalItems) MarshalJSON() ([]byte, error) {
	return marshalUnion(j.Bool)
}

// JSONSchemaItems structure is generated from "jsonSchema->items".
type JSONSchemaItems struct {
	SliceOfAnything []interface{} `json:"-"`
}

// UnmarshalJSON decodes JSON.
func (j *JSONSchemaItems) UnmarshalJSON(data []byte) error {
	var err error

	anyOfErrors := make(map[string]error, 1)
	anyOfValid := 0

	err = json.Unmarshal(data, &j.SliceOfAnything)
	if err != nil {
		anyOfErrors["SliceOfAnything"] = err
		j.SliceOfAnything = nil
	} else {
		anyOfValid++
	}

	if anyOfValid == 0 {
		return fmt.Errorf("anyOf constraint for JSONSchemaItems failed with %d valid results: %v", anyOfValid, anyOfErrors)
	}

	return nil
}

// MarshalJSON encodes JSON.
func (j JSONSchemaItems) MarshalJSON() ([]byte, error) {
	return marshalUnion(j.SliceOfAnything)
}

// JSONSchemaAdditionalProperties structure is generated from "jsonSchema->additionalProperties".
type JSONSchemaAdditionalProperties struct {
	Bool *bool `json:"-"`
}

// UnmarshalJSON decodes JSON.
func (j *JSONSchemaAdditionalProperties) UnmarshalJSON(data []byte) error {
	var err error

	anyOfErrors := make(map[string]error, 1)
	anyOfValid := 0

	err = json.Unmarshal(data, &j.Bool)
	if err != nil {
		anyOfErrors["Bool"] = err
		j.Bool = nil
	} else {
		anyOfValid++
	}

	if anyOfValid == 0 {
		return fmt.Errorf("anyOf constraint for JSONSchemaAdditionalProperties failed with %d valid results: %v", anyOfValid, anyOfErrors)
	}

	return nil
}

// MarshalJSON encodes JSON.
func (j JSONSchemaAdditionalProperties) MarshalJSON() ([]byte, error) {
	return marshalUnion(j.Bool)
}

// JSONSchemaDependenciesAdditionalProperties structure is generated from "jsonSchema->dependencies->additionalProperties".
type JSONSchemaDependenciesAdditionalProperties struct {
	SliceOfStringValues []string `json:"-"`
}

// UnmarshalJSON decodes JSON.
func (j *JSONSchemaDependenciesAdditionalProperties) UnmarshalJSON(data []byte) error {
	var err error

	anyOfErrors := make(map[string]error, 1)
	anyOfValid := 0

	err = json.Unmarshal(data, &j.SliceOfStringValues)
	if err != nil {
		anyOfErrors["SliceOfStringValues"] = err
		j.SliceOfStringValues = nil
	} else {
		anyOfValid++
	}

	if anyOfValid == 0 {
		return fmt.Errorf("anyOf constraint for JSONSchemaDependenciesAdditionalProperties failed with %d valid results: %v", anyOfValid, anyOfErrors)
	}

	return nil
}

// MarshalJSON encodes JSON.
func (j JSONSchemaDependenciesAdditionalProperties) MarshalJSON() ([]byte, error) {
	return marshalUnion(j.SliceOfStringValues)
}

// JSONSchemaType structure is generated from "jsonSchema->type".
type JSONSchemaType struct {
	AnyOf0                                 *JSONSchemaTypeAnyOf0       `json:"-"`
	SliceOfJSONSchemaTypeAnyOf1ItemsValues []JSONSchemaTypeAnyOf1Items `json:"-"`
}

// UnmarshalJSON decodes JSON.
func (j *JSONSchemaType) UnmarshalJSON(data []byte) error {
	var err error

	anyOfErrors := make(map[string]error, 2)
	anyOfValid := 0

	err = json.Unmarshal(data, &j.AnyOf0)
	if err != nil {
		anyOfErrors["AnyOf0"] = err
		j.AnyOf0 = nil
	} else {
		anyOfValid++
	}

	err = json.Unmarshal(data, &j.SliceOfJSONSchemaTypeAnyOf1ItemsValues)
	if err != nil {
		anyOfErrors["SliceOfJSONSchemaTypeAnyOf1ItemsValues"] = err
		j.SliceOfJSONSchemaTypeAnyOf1ItemsValues = nil
	} else {
		anyOfValid++
	}

	if anyOfValid == 0 {
		return fmt.Errorf("anyOf constraint for JSONSchemaType failed with %d valid results: %v", anyOfValid, anyOfErrors)
	}

	return nil
}

// MarshalJSON encodes JSON.
func (j JSONSchemaType) MarshalJSON() ([]byte, error) {
	return marshalUnion(j.AnyOf0, j.SliceOfJSONSchemaTypeAnyOf1ItemsValues)
}

// HTTPAsyncapiComDefinitions240SchemaJSONAllOf1 structure is generated from "http://asyncapi.com/definitions/2.4.0/schema.json/allOf/1".
type HTTPAsyncapiComDefinitions240SchemaJSONAllOf1 struct {
	AdditionalProperties *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1AdditionalProperties `json:"additionalProperties,omitempty"`
	Items                *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1Items                `json:"items,omitempty"`
	AllOf                []HTTPAsyncapiComDefinitions240SchemaJSON                          `json:"allOf,omitempty"`
	OneOf                []HTTPAsyncapiComDefinitions240SchemaJSON                          `json:"oneOf,omitempty"`
	AnyOf                []HTTPAsyncapiComDefinitions240SchemaJSON                          `json:"anyOf,omitempty"`
	Not                  *HTTPAsyncapiComDefinitions240SchemaJSON                           `json:"not,omitempty"`
	Properties           map[string]HTTPAsyncapiComDefinitions240SchemaJSON                 `json:"properties,omitempty"`
	PatternProperties    map[string]HTTPAsyncapiComDefinitions240SchemaJSON                 `json:"patternProperties,omitempty"`
	PropertyNames        *HTTPAsyncapiComDefinitions240SchemaJSON                           `json:"propertyNames,omitempty"`
	Contains             *HTTPAsyncapiComDefinitions240SchemaJSON                           `json:"contains,omitempty"`
	Discriminator        string                                                             `json:"discriminator,omitempty"`
	ExternalDocs         *HTTPAsyncapiComDefinitions240ExternalDocsJSON                     `json:"externalDocs,omitempty"` // Information about external documentation.
	Deprecated           bool                                                               `json:"deprecated,omitempty"`
	MapOfAnything        map[string]interface{}                                             `json:"-"` // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

type marshalHTTPAsyncapiComDefinitions240SchemaJSONAllOf1 HTTPAsyncapiComDefinitions240SchemaJSONAllOf1

var knownKeysHTTPAsyncapiComDefinitions240SchemaJSONAllOf1 = []string{
	"additionalProperties",
	"items",
	"allOf",
	"oneOf",
	"anyOf",
	"not",
	"properties",
	"patternProperties",
	"propertyNames",
	"contains",
	"discriminator",
	"externalDocs",
	"deprecated",
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1) UnmarshalJSON(data []byte) error {
	var err error

	mh := marshalHTTPAsyncapiComDefinitions240SchemaJSONAllOf1(*h)

	err = json.Unmarshal(data, &mh)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysHTTPAsyncapiComDefinitions240SchemaJSONAllOf1 {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if mh.MapOfAnything == nil {
				mh.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			mh.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	*h = HTTPAsyncapiComDefinitions240SchemaJSONAllOf1(mh)

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240SchemaJSONAllOf1) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalHTTPAsyncapiComDefinitions240SchemaJSONAllOf1(h), h.MapOfAnything)
}

// HTTPAsyncapiComDefinitions240SchemaJSON structure is generated from "http://asyncapi.com/definitions/2.4.0/schema.json".
type HTTPAsyncapiComDefinitions240SchemaJSON struct {
	AllOf1 *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1 `json:"-"`
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240SchemaJSON) UnmarshalJSON(data []byte) error {
	var err error

	err = json.Unmarshal(data, &h.AllOf1)
	if err != nil {
		return err
	}

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240SchemaJSON) MarshalJSON() ([]byte, error) {
	return marshalUnion(h.AllOf1)
}

// HTTPAsyncapiComDefinitions240SchemaJSONAllOf1AdditionalProperties structure is generated from "http://asyncapi.com/definitions/2.4.0/schema.json/allOf/1->additionalProperties".
type HTTPAsyncapiComDefinitions240SchemaJSONAllOf1AdditionalProperties struct {
	HTTPAsyncapiComDefinitions240SchemaJSON *HTTPAsyncapiComDefinitions240SchemaJSON `json:"-"`
	Bool                                    *bool                                    `json:"-"`
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1AdditionalProperties) UnmarshalJSON(data []byte) error {
	var err error

	anyOfErrors := make(map[string]error, 2)
	anyOfValid := 0

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240SchemaJSON)
	if err != nil {
		anyOfErrors["HTTPAsyncapiComDefinitions240SchemaJSON"] = err
		h.HTTPAsyncapiComDefinitions240SchemaJSON = nil
	} else {
		anyOfValid++
	}

	err = json.Unmarshal(data, &h.Bool)
	if err != nil {
		anyOfErrors["Bool"] = err
		h.Bool = nil
	} else {
		anyOfValid++
	}

	if anyOfValid == 0 {
		return fmt.Errorf("anyOf constraint for HTTPAsyncapiComDefinitions240SchemaJSONAllOf1AdditionalProperties failed with %d valid results: %v", anyOfValid, anyOfErrors)
	}

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240SchemaJSONAllOf1AdditionalProperties) MarshalJSON() ([]byte, error) {
	return marshalUnion(h.HTTPAsyncapiComDefinitions240SchemaJSON, h.Bool)
}

// HTTPAsyncapiComDefinitions240SchemaJSONAllOf1Items structure is generated from "http://asyncapi.com/definitions/2.4.0/schema.json/allOf/1->items".
type HTTPAsyncapiComDefinitions240SchemaJSONAllOf1Items struct {
	HTTPAsyncapiComDefinitions240SchemaJSON              *HTTPAsyncapiComDefinitions240SchemaJSON  `json:"-"`
	SliceOfHTTPAsyncapiComDefinitions240SchemaJSONValues []HTTPAsyncapiComDefinitions240SchemaJSON `json:"-"`
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240SchemaJSONAllOf1Items) UnmarshalJSON(data []byte) error {
	var err error

	anyOfErrors := make(map[string]error, 2)
	anyOfValid := 0

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240SchemaJSON)
	if err != nil {
		anyOfErrors["HTTPAsyncapiComDefinitions240SchemaJSON"] = err
		h.HTTPAsyncapiComDefinitions240SchemaJSON = nil
	} else {
		anyOfValid++
	}

	err = json.Unmarshal(data, &h.SliceOfHTTPAsyncapiComDefinitions240SchemaJSONValues)
	if err != nil {
		anyOfErrors["SliceOfHTTPAsyncapiComDefinitions240SchemaJSONValues"] = err
		h.SliceOfHTTPAsyncapiComDefinitions240SchemaJSONValues = nil
	} else {
		anyOfValid++
	}

	if anyOfValid == 0 {
		return fmt.Errorf("anyOf constraint for HTTPAsyncapiComDefinitions240SchemaJSONAllOf1Items failed with %d valid results: %v", anyOfValid, anyOfErrors)
	}

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240SchemaJSONAllOf1Items) MarshalJSON() ([]byte, error) {
	return marshalUnion(h.HTTPAsyncapiComDefinitions240SchemaJSON, h.SliceOfHTTPAsyncapiComDefinitions240SchemaJSONValues)
}

// HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1HeadersAllOf1 structure is generated from "http://asyncapi.com/definitions/2.4.0/message.json/oneOf/1/oneOf/1->headers/allOf/1".
type HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1HeadersAllOf1 struct{}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1HeadersAllOf1) UnmarshalJSON(data []byte) error {
	var err error

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	if v, exists := rawMap["type"]; exists && string(v) != `"object"` {
		return fmt.Errorf(`bad const value for "type" ("object" expected, %s received)`, v)
	}

	delete(rawMap, "type")

	return nil
}

// constHTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1HeadersAllOf1 is unconditionally added to JSON.
var constHTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1HeadersAllOf1 = json.RawMessage(`{"type":"object"}`)

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1HeadersAllOf1) MarshalJSON() ([]byte, error) {
	return marshalUnion(constHTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1HeadersAllOf1)
}

// HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1Headers structure is generated from "http://asyncapi.com/definitions/2.4.0/message.json/oneOf/1/oneOf/1->headers".
type HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1Headers struct {
	HTTPAsyncapiComDefinitions240SchemaJSON *HTTPAsyncapiComDefinitions240SchemaJSON                           `json:"-"`
	AllOf1                                  *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1HeadersAllOf1 `json:"-"`
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1Headers) UnmarshalJSON(data []byte) error {
	var err error

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240SchemaJSON)
	if err != nil {
		return err
	}

	err = json.Unmarshal(data, &h.AllOf1)
	if err != nil {
		return err
	}

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1Headers) MarshalJSON() ([]byte, error) {
	return marshalUnion(h.HTTPAsyncapiComDefinitions240SchemaJSON, h.AllOf1)
}

// HTTPAsyncapiComDefinitions240CorrelationIDJSON structure is generated from "http://asyncapi.com/definitions/2.4.0/correlationId.json".
type HTTPAsyncapiComDefinitions240CorrelationIDJSON struct {
	Description string `json:"description,omitempty"` // A optional description of the correlation ID. GitHub Flavored Markdown is allowed.
	// A runtime expression that specifies the location of the correlation ID.
	// Value must match pattern: `^\$message\.(header|payload)#(\/(([^\/~])|(~[01]))*)*`.
	// Required.
	Location      string                 `json:"location"`
	MapOfAnything map[string]interface{} `json:"-"` // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

type marshalHTTPAsyncapiComDefinitions240CorrelationIDJSON HTTPAsyncapiComDefinitions240CorrelationIDJSON

var knownKeysHTTPAsyncapiComDefinitions240CorrelationIDJSON = []string{
	"description",
	"location",
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240CorrelationIDJSON) UnmarshalJSON(data []byte) error {
	var err error

	mh := marshalHTTPAsyncapiComDefinitions240CorrelationIDJSON(*h)

	err = json.Unmarshal(data, &mh)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysHTTPAsyncapiComDefinitions240CorrelationIDJSON {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if mh.MapOfAnything == nil {
				mh.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			mh.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in HTTPAsyncapiComDefinitions240CorrelationIDJSON: %v", offendingKeys)
	}

	*h = HTTPAsyncapiComDefinitions240CorrelationIDJSON(mh)

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240CorrelationIDJSON) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalHTTPAsyncapiComDefinitions240CorrelationIDJSON(h), h.MapOfAnything)
}

// HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1CorrelationID structure is generated from "http://asyncapi.com/definitions/2.4.0/message.json/oneOf/1/oneOf/1->correlationId".
type HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1CorrelationID struct {
	HTTPAsyncapiComDefinitions240ReferenceJSON     *HTTPAsyncapiComDefinitions240ReferenceJSON     `json:"-"`
	HTTPAsyncapiComDefinitions240CorrelationIDJSON *HTTPAsyncapiComDefinitions240CorrelationIDJSON `json:"-"`
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1CorrelationID) UnmarshalJSON(data []byte) error {
	var err error

	oneOfErrors := make(map[string]error, 2)
	oneOfValid := 0

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240ReferenceJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240ReferenceJSON"] = err
		h.HTTPAsyncapiComDefinitions240ReferenceJSON = nil
	} else {
		oneOfValid++
	}

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240CorrelationIDJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240CorrelationIDJSON"] = err
		h.HTTPAsyncapiComDefinitions240CorrelationIDJSON = nil
	} else {
		oneOfValid++
	}

	if oneOfValid != 1 {
		return fmt.Errorf("oneOf constraint failed for HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1CorrelationID with %d valid results: %v", oneOfValid, oneOfErrors)
	}

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1CorrelationID) MarshalJSON() ([]byte, error) {
	return marshalUnion(h.HTTPAsyncapiComDefinitions240ReferenceJSON, h.HTTPAsyncapiComDefinitions240CorrelationIDJSON)
}

// HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1ExamplesItems structure is generated from "http://asyncapi.com/definitions/2.4.0/message.json/oneOf/1/oneOf/1->examples->items".
type HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1ExamplesItems struct {
	Name    string                 `json:"name,omitempty"`    // Machine readable name of the message example.
	Summary string                 `json:"summary,omitempty"` // A brief summary of the message example.
	Headers map[string]interface{} `json:"headers,omitempty"`
	Payload *interface{}           `json:"payload,omitempty"`
}

type marshalHTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1ExamplesItems HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1ExamplesItems

var knownKeysHTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1ExamplesItems = []string{
	"name",
	"summary",
	"headers",
	"payload",
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1ExamplesItems) UnmarshalJSON(data []byte) error {
	var err error

	mh := marshalHTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1ExamplesItems(*h)

	err = json.Unmarshal(data, &mh)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	if mh.Payload == nil {
		if _, ok := rawMap["payload"]; ok {
			var v interface{}
			mh.Payload = &v
		}
	}

	for _, key := range knownKeysHTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1ExamplesItems {
		delete(rawMap, key)
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1ExamplesItems: %v", offendingKeys)
	}

	*h = HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1ExamplesItems(mh)

	return nil
}

// HTTPAsyncapiComDefinitions240MessageTraitJSON structure is generated from "http://asyncapi.com/definitions/2.4.0/messageTrait.json".
type HTTPAsyncapiComDefinitions240MessageTraitJSON struct {
	SchemaFormat  string                                                      `json:"schemaFormat,omitempty"`
	ContentType   string                                                      `json:"contentType,omitempty"`
	Headers       *HTTPAsyncapiComDefinitions240MessageTraitJSONHeaders       `json:"headers,omitempty"`
	MessageID     string                                                      `json:"messageId,omitempty"`
	CorrelationID *HTTPAsyncapiComDefinitions240MessageTraitJSONCorrelationID `json:"correlationId,omitempty"`
	Tags          []HTTPAsyncapiComDefinitions240TagJSON                      `json:"tags,omitempty"`
	Summary       string                                                      `json:"summary,omitempty"`      // A brief summary of the message.
	Name          string                                                      `json:"name,omitempty"`         // Name of the message.
	Title         string                                                      `json:"title,omitempty"`        // A human-friendly title for the message.
	Description   string                                                      `json:"description,omitempty"`  // A longer description of the message. CommonMark is allowed.
	ExternalDocs  *HTTPAsyncapiComDefinitions240ExternalDocsJSON              `json:"externalDocs,omitempty"` // Information about external documentation.
	Deprecated    bool                                                        `json:"deprecated,omitempty"`
	Examples      []map[string]interface{}                                    `json:"examples,omitempty"`
	Bindings      *ChannelBindingsObject                                      `json:"bindings,omitempty"`
	MapOfAnything map[string]interface{}                                      `json:"-"` // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

type marshalHTTPAsyncapiComDefinitions240MessageTraitJSON HTTPAsyncapiComDefinitions240MessageTraitJSON

var knownKeysHTTPAsyncapiComDefinitions240MessageTraitJSON = []string{
	"schemaFormat",
	"contentType",
	"headers",
	"messageId",
	"correlationId",
	"tags",
	"summary",
	"name",
	"title",
	"description",
	"externalDocs",
	"deprecated",
	"examples",
	"bindings",
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240MessageTraitJSON) UnmarshalJSON(data []byte) error {
	var err error

	mh := marshalHTTPAsyncapiComDefinitions240MessageTraitJSON(*h)

	err = json.Unmarshal(data, &mh)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysHTTPAsyncapiComDefinitions240MessageTraitJSON {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if mh.MapOfAnything == nil {
				mh.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			mh.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in HTTPAsyncapiComDefinitions240MessageTraitJSON: %v", offendingKeys)
	}

	*h = HTTPAsyncapiComDefinitions240MessageTraitJSON(mh)

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240MessageTraitJSON) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalHTTPAsyncapiComDefinitions240MessageTraitJSON(h), h.MapOfAnything)
}

// HTTPAsyncapiComDefinitions240MessageTraitJSONHeadersAllOf1 structure is generated from "http://asyncapi.com/definitions/2.4.0/messageTrait.json->headers/allOf/1".
type HTTPAsyncapiComDefinitions240MessageTraitJSONHeadersAllOf1 struct{}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240MessageTraitJSONHeadersAllOf1) UnmarshalJSON(data []byte) error {
	var err error

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	if v, exists := rawMap["type"]; exists && string(v) != `"object"` {
		return fmt.Errorf(`bad const value for "type" ("object" expected, %s received)`, v)
	}

	delete(rawMap, "type")

	return nil
}

// constHTTPAsyncapiComDefinitions240MessageTraitJSONHeadersAllOf1 is unconditionally added to JSON.
var constHTTPAsyncapiComDefinitions240MessageTraitJSONHeadersAllOf1 = json.RawMessage(`{"type":"object"}`)

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240MessageTraitJSONHeadersAllOf1) MarshalJSON() ([]byte, error) {
	return marshalUnion(constHTTPAsyncapiComDefinitions240MessageTraitJSONHeadersAllOf1)
}

// HTTPAsyncapiComDefinitions240MessageTraitJSONHeaders structure is generated from "http://asyncapi.com/definitions/2.4.0/messageTrait.json->headers".
type HTTPAsyncapiComDefinitions240MessageTraitJSONHeaders struct {
	HTTPAsyncapiComDefinitions240SchemaJSON *HTTPAsyncapiComDefinitions240SchemaJSON                    `json:"-"`
	AllOf1                                  *HTTPAsyncapiComDefinitions240MessageTraitJSONHeadersAllOf1 `json:"-"`
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240MessageTraitJSONHeaders) UnmarshalJSON(data []byte) error {
	var err error

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240SchemaJSON)
	if err != nil {
		return err
	}

	err = json.Unmarshal(data, &h.AllOf1)
	if err != nil {
		return err
	}

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240MessageTraitJSONHeaders) MarshalJSON() ([]byte, error) {
	return marshalUnion(h.HTTPAsyncapiComDefinitions240SchemaJSON, h.AllOf1)
}

// HTTPAsyncapiComDefinitions240MessageTraitJSONCorrelationID structure is generated from "http://asyncapi.com/definitions/2.4.0/messageTrait.json->correlationId".
type HTTPAsyncapiComDefinitions240MessageTraitJSONCorrelationID struct {
	HTTPAsyncapiComDefinitions240ReferenceJSON     *HTTPAsyncapiComDefinitions240ReferenceJSON     `json:"-"`
	HTTPAsyncapiComDefinitions240CorrelationIDJSON *HTTPAsyncapiComDefinitions240CorrelationIDJSON `json:"-"`
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240MessageTraitJSONCorrelationID) UnmarshalJSON(data []byte) error {
	var err error

	oneOfErrors := make(map[string]error, 2)
	oneOfValid := 0

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240ReferenceJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240ReferenceJSON"] = err
		h.HTTPAsyncapiComDefinitions240ReferenceJSON = nil
	} else {
		oneOfValid++
	}

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240CorrelationIDJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240CorrelationIDJSON"] = err
		h.HTTPAsyncapiComDefinitions240CorrelationIDJSON = nil
	} else {
		oneOfValid++
	}

	if oneOfValid != 1 {
		return fmt.Errorf("oneOf constraint failed for HTTPAsyncapiComDefinitions240MessageTraitJSONCorrelationID with %d valid results: %v", oneOfValid, oneOfErrors)
	}

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240MessageTraitJSONCorrelationID) MarshalJSON() ([]byte, error) {
	return marshalUnion(h.HTTPAsyncapiComDefinitions240ReferenceJSON, h.HTTPAsyncapiComDefinitions240CorrelationIDJSON)
}

// HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1TraitsItems structure is generated from "http://asyncapi.com/definitions/2.4.0/message.json/oneOf/1/oneOf/1->traits->items".
type HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1TraitsItems struct {
	HTTPAsyncapiComDefinitions240ReferenceJSON    *HTTPAsyncapiComDefinitions240ReferenceJSON    `json:"-"`
	HTTPAsyncapiComDefinitions240MessageTraitJSON *HTTPAsyncapiComDefinitions240MessageTraitJSON `json:"-"`
	SliceOfAnything                               []interface{}                                  `json:"-"`
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1TraitsItems) UnmarshalJSON(data []byte) error {
	var err error

	oneOfErrors := make(map[string]error, 3)
	oneOfValid := 0

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240ReferenceJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240ReferenceJSON"] = err
		h.HTTPAsyncapiComDefinitions240ReferenceJSON = nil
	} else {
		oneOfValid++
	}

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240MessageTraitJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240MessageTraitJSON"] = err
		h.HTTPAsyncapiComDefinitions240MessageTraitJSON = nil
	} else {
		oneOfValid++
	}

	err = json.Unmarshal(data, &h.SliceOfAnything)
	if err != nil {
		oneOfErrors["SliceOfAnything"] = err
		h.SliceOfAnything = nil
	} else {
		oneOfValid++
	}

	if oneOfValid != 1 {
		return fmt.Errorf("oneOf constraint failed for HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1TraitsItems with %d valid results: %v", oneOfValid, oneOfErrors)
	}

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf1TraitsItems) MarshalJSON() ([]byte, error) {
	return marshalUnion(h.HTTPAsyncapiComDefinitions240ReferenceJSON, h.HTTPAsyncapiComDefinitions240MessageTraitJSON, h.SliceOfAnything)
}

// HTTPAsyncapiComDefinitions240MessageJSONOneOf1 structure is generated from "http://asyncapi.com/definitions/2.4.0/message.json/oneOf/1".
type HTTPAsyncapiComDefinitions240MessageJSONOneOf1 struct {
	OneOf0        *HTTPAsyncapiComDefinitions240MessageJSONOneOf1OneOf0 `json:"-"`
	MessageEntity *MessageEntity                                        `json:"-"`
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240MessageJSONOneOf1) UnmarshalJSON(data []byte) error {
	var err error

	oneOfErrors := make(map[string]error, 2)
	oneOfValid := 0

	err = json.Unmarshal(data, &h.OneOf0)
	if err != nil {
		oneOfErrors["OneOf0"] = err
		h.OneOf0 = nil
	} else {
		oneOfValid++
	}

	err = json.Unmarshal(data, &h.MessageEntity)
	if err != nil {
		oneOfErrors["MessageEntity"] = err
		h.MessageEntity = nil
	} else {
		oneOfValid++
	}

	if oneOfValid != 1 {
		return fmt.Errorf("oneOf constraint failed for HTTPAsyncapiComDefinitions240MessageJSONOneOf1 with %d valid results: %v", oneOfValid, oneOfErrors)
	}

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240MessageJSONOneOf1) MarshalJSON() ([]byte, error) {
	return marshalUnion(h.OneOf0, h.MessageEntity)
}

// HTTPAsyncapiComDefinitions240MessageJSON structure is generated from "http://asyncapi.com/definitions/2.4.0/message.json".
type HTTPAsyncapiComDefinitions240MessageJSON struct {
	HTTPAsyncapiComDefinitions240ReferenceJSON *HTTPAsyncapiComDefinitions240ReferenceJSON     `json:"-"`
	OneOf1                                     *HTTPAsyncapiComDefinitions240MessageJSONOneOf1 `json:"-"`
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240MessageJSON) UnmarshalJSON(data []byte) error {
	var err error

	oneOfErrors := make(map[string]error, 2)
	oneOfValid := 0

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240ReferenceJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240ReferenceJSON"] = err
		h.HTTPAsyncapiComDefinitions240ReferenceJSON = nil
	} else {
		oneOfValid++
	}

	err = json.Unmarshal(data, &h.OneOf1)
	if err != nil {
		oneOfErrors["OneOf1"] = err
		h.OneOf1 = nil
	} else {
		oneOfValid++
	}

	if oneOfValid != 1 {
		return fmt.Errorf("oneOf constraint failed for HTTPAsyncapiComDefinitions240MessageJSON with %d valid results: %v", oneOfValid, oneOfErrors)
	}

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240MessageJSON) MarshalJSON() ([]byte, error) {
	return marshalUnion(h.HTTPAsyncapiComDefinitions240ReferenceJSON, h.OneOf1)
}

// HTTPAsyncapiComDefinitions240ComponentsJSON structure is generated from "http://asyncapi.com/definitions/2.4.0/components.json".
//
// An object to hold a set of reusable objects for different aspects of the AsyncAPI Specification.
type HTTPAsyncapiComDefinitions240ComponentsJSON struct {
	Schemas           map[string]HTTPAsyncapiComDefinitions240SchemaJSON                      `json:"schemas,omitempty"` // JSON objects describing schemas the API uses.
	Servers           map[string]HTTPAsyncapiComDefinitions240ServersJSONAdditionalProperties `json:"servers,omitempty"` // An object representing multiple servers.
	Channels          map[string]ChannelItem                                                  `json:"channels,omitempty"`
	ServerVariables   map[string]ServerVariable                                               `json:"serverVariables,omitempty"`
	Messages          map[string]HTTPAsyncapiComDefinitions240MessageJSON                     `json:"messages,omitempty"` // JSON objects describing the messages being consumed and produced by the API.
	SecuritySchemes   *HTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemes             `json:"securitySchemes,omitempty"`
	Parameters        map[string]HTTPAsyncapiComDefinitions240ParameterJSON                   `json:"parameters,omitempty"` // JSON objects describing re-usable channel parameters.
	CorrelationIds    *HTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIds              `json:"correlationIds,omitempty"`
	OperationTraits   map[string]HTTPAsyncapiComDefinitions240OperationTraitJSON              `json:"operationTraits,omitempty"`
	MessageTraits     map[string]HTTPAsyncapiComDefinitions240MessageTraitJSON                `json:"messageTraits,omitempty"`
	ServerBindings    map[string]ChannelBindingsObject                                        `json:"serverBindings,omitempty"`
	ChannelBindings   map[string]ChannelBindingsObject                                        `json:"channelBindings,omitempty"`
	OperationBindings map[string]ChannelBindingsObject                                        `json:"operationBindings,omitempty"`
	MessageBindings   map[string]ChannelBindingsObject                                        `json:"messageBindings,omitempty"`
	MapOfAnything     map[string]interface{}                                                  `json:"-"` // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

type marshalHTTPAsyncapiComDefinitions240ComponentsJSON HTTPAsyncapiComDefinitions240ComponentsJSON

var knownKeysHTTPAsyncapiComDefinitions240ComponentsJSON = []string{
	"schemas",
	"servers",
	"channels",
	"serverVariables",
	"messages",
	"securitySchemes",
	"parameters",
	"correlationIds",
	"operationTraits",
	"messageTraits",
	"serverBindings",
	"channelBindings",
	"operationBindings",
	"messageBindings",
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240ComponentsJSON) UnmarshalJSON(data []byte) error {
	var err error

	mh := marshalHTTPAsyncapiComDefinitions240ComponentsJSON(*h)

	err = json.Unmarshal(data, &mh)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysHTTPAsyncapiComDefinitions240ComponentsJSON {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if mh.MapOfAnything == nil {
				mh.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			mh.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in HTTPAsyncapiComDefinitions240ComponentsJSON: %v", offendingKeys)
	}

	*h = HTTPAsyncapiComDefinitions240ComponentsJSON(mh)

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240ComponentsJSON) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalHTTPAsyncapiComDefinitions240ComponentsJSON(h), h.MapOfAnything)
}

// HTTPAsyncapiComDefinitions240UserPasswordJSON structure is generated from "http://asyncapi.com/definitions/2.4.0/userPassword.json".
type HTTPAsyncapiComDefinitions240UserPasswordJSON struct {
	Description   string                 `json:"description,omitempty"`
	MapOfAnything map[string]interface{} `json:"-"` // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

type marshalHTTPAsyncapiComDefinitions240UserPasswordJSON HTTPAsyncapiComDefinitions240UserPasswordJSON

var knownKeysHTTPAsyncapiComDefinitions240UserPasswordJSON = []string{
	"description",
	"type",
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240UserPasswordJSON) UnmarshalJSON(data []byte) error {
	var err error

	mh := marshalHTTPAsyncapiComDefinitions240UserPasswordJSON(*h)

	err = json.Unmarshal(data, &mh)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	if v, exists := rawMap["type"]; exists && string(v) != `"userPassword"` {
		return fmt.Errorf(`bad const value for "type" ("userPassword" expected, %s received)`, v)
	}

	delete(rawMap, "type")

	for _, key := range knownKeysHTTPAsyncapiComDefinitions240UserPasswordJSON {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if mh.MapOfAnything == nil {
				mh.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			mh.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in HTTPAsyncapiComDefinitions240UserPasswordJSON: %v", offendingKeys)
	}

	*h = HTTPAsyncapiComDefinitions240UserPasswordJSON(mh)

	return nil
}

// constHTTPAsyncapiComDefinitions240UserPasswordJSON is unconditionally added to JSON.
var constHTTPAsyncapiComDefinitions240UserPasswordJSON = json.RawMessage(`{"type":"userPassword"}`)

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240UserPasswordJSON) MarshalJSON() ([]byte, error) {
	return marshalUnion(constHTTPAsyncapiComDefinitions240UserPasswordJSON, marshalHTTPAsyncapiComDefinitions240UserPasswordJSON(h), h.MapOfAnything)
}

// HTTPAsyncapiComDefinitions240APIKeyJSON structure is generated from "http://asyncapi.com/definitions/2.4.0/apiKey.json".
type HTTPAsyncapiComDefinitions240APIKeyJSON struct {
	In            HTTPAsyncapiComDefinitions240APIKeyJSONIn `json:"in"` // Required.
	Description   string                                    `json:"description,omitempty"`
	MapOfAnything map[string]interface{}                    `json:"-"` // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

type marshalHTTPAsyncapiComDefinitions240APIKeyJSON HTTPAsyncapiComDefinitions240APIKeyJSON

var knownKeysHTTPAsyncapiComDefinitions240APIKeyJSON = []string{
	"in",
	"description",
	"type",
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240APIKeyJSON) UnmarshalJSON(data []byte) error {
	var err error

	mh := marshalHTTPAsyncapiComDefinitions240APIKeyJSON(*h)

	err = json.Unmarshal(data, &mh)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	if v, exists := rawMap["type"]; exists && string(v) != `"apiKey"` {
		return fmt.Errorf(`bad const value for "type" ("apiKey" expected, %s received)`, v)
	}

	delete(rawMap, "type")

	for _, key := range knownKeysHTTPAsyncapiComDefinitions240APIKeyJSON {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if mh.MapOfAnything == nil {
				mh.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			mh.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in HTTPAsyncapiComDefinitions240APIKeyJSON: %v", offendingKeys)
	}

	*h = HTTPAsyncapiComDefinitions240APIKeyJSON(mh)

	return nil
}

// constHTTPAsyncapiComDefinitions240APIKeyJSON is unconditionally added to JSON.
var constHTTPAsyncapiComDefinitions240APIKeyJSON = json.RawMessage(`{"type":"apiKey"}`)

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240APIKeyJSON) MarshalJSON() ([]byte, error) {
	return marshalUnion(constHTTPAsyncapiComDefinitions240APIKeyJSON, marshalHTTPAsyncapiComDefinitions240APIKeyJSON(h), h.MapOfAnything)
}

// HTTPAsyncapiComDefinitions240X509JSON structure is generated from "http://asyncapi.com/definitions/2.4.0/X509.json".
type HTTPAsyncapiComDefinitions240X509JSON struct {
	Description   string                 `json:"description,omitempty"`
	MapOfAnything map[string]interface{} `json:"-"` // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

type marshalHTTPAsyncapiComDefinitions240X509JSON HTTPAsyncapiComDefinitions240X509JSON

var knownKeysHTTPAsyncapiComDefinitions240X509JSON = []string{
	"description",
	"type",
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240X509JSON) UnmarshalJSON(data []byte) error {
	var err error

	mh := marshalHTTPAsyncapiComDefinitions240X509JSON(*h)

	err = json.Unmarshal(data, &mh)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	if v, exists := rawMap["type"]; exists && string(v) != `"X509"` {
		return fmt.Errorf(`bad const value for "type" ("X509" expected, %s received)`, v)
	}

	delete(rawMap, "type")

	for _, key := range knownKeysHTTPAsyncapiComDefinitions240X509JSON {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if mh.MapOfAnything == nil {
				mh.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			mh.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in HTTPAsyncapiComDefinitions240X509JSON: %v", offendingKeys)
	}

	*h = HTTPAsyncapiComDefinitions240X509JSON(mh)

	return nil
}

// constHTTPAsyncapiComDefinitions240X509JSON is unconditionally added to JSON.
var constHTTPAsyncapiComDefinitions240X509JSON = json.RawMessage(`{"type":"X509"}`)

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240X509JSON) MarshalJSON() ([]byte, error) {
	return marshalUnion(constHTTPAsyncapiComDefinitions240X509JSON, marshalHTTPAsyncapiComDefinitions240X509JSON(h), h.MapOfAnything)
}

// HTTPAsyncapiComDefinitions240SymmetricEncryptionJSON structure is generated from "http://asyncapi.com/definitions/2.4.0/symmetricEncryption.json".
type HTTPAsyncapiComDefinitions240SymmetricEncryptionJSON struct {
	Description   string                 `json:"description,omitempty"`
	MapOfAnything map[string]interface{} `json:"-"` // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

type marshalHTTPAsyncapiComDefinitions240SymmetricEncryptionJSON HTTPAsyncapiComDefinitions240SymmetricEncryptionJSON

var knownKeysHTTPAsyncapiComDefinitions240SymmetricEncryptionJSON = []string{
	"description",
	"type",
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240SymmetricEncryptionJSON) UnmarshalJSON(data []byte) error {
	var err error

	mh := marshalHTTPAsyncapiComDefinitions240SymmetricEncryptionJSON(*h)

	err = json.Unmarshal(data, &mh)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	if v, exists := rawMap["type"]; exists && string(v) != `"symmetricEncryption"` {
		return fmt.Errorf(`bad const value for "type" ("symmetricEncryption" expected, %s received)`, v)
	}

	delete(rawMap, "type")

	for _, key := range knownKeysHTTPAsyncapiComDefinitions240SymmetricEncryptionJSON {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if mh.MapOfAnything == nil {
				mh.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			mh.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in HTTPAsyncapiComDefinitions240SymmetricEncryptionJSON: %v", offendingKeys)
	}

	*h = HTTPAsyncapiComDefinitions240SymmetricEncryptionJSON(mh)

	return nil
}

// constHTTPAsyncapiComDefinitions240SymmetricEncryptionJSON is unconditionally added to JSON.
var constHTTPAsyncapiComDefinitions240SymmetricEncryptionJSON = json.RawMessage(`{"type":"symmetricEncryption"}`)

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240SymmetricEncryptionJSON) MarshalJSON() ([]byte, error) {
	return marshalUnion(constHTTPAsyncapiComDefinitions240SymmetricEncryptionJSON, marshalHTTPAsyncapiComDefinitions240SymmetricEncryptionJSON(h), h.MapOfAnything)
}

// HTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON structure is generated from "http://asyncapi.com/definitions/2.4.0/asymmetricEncryption.json".
type HTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON struct {
	Description   string                 `json:"description,omitempty"`
	MapOfAnything map[string]interface{} `json:"-"` // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

type marshalHTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON HTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON

var knownKeysHTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON = []string{
	"description",
	"type",
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON) UnmarshalJSON(data []byte) error {
	var err error

	mh := marshalHTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON(*h)

	err = json.Unmarshal(data, &mh)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	if v, exists := rawMap["type"]; exists && string(v) != `"asymmetricEncryption"` {
		return fmt.Errorf(`bad const value for "type" ("asymmetricEncryption" expected, %s received)`, v)
	}

	delete(rawMap, "type")

	for _, key := range knownKeysHTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if mh.MapOfAnything == nil {
				mh.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			mh.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in HTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON: %v", offendingKeys)
	}

	*h = HTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON(mh)

	return nil
}

// constHTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON is unconditionally added to JSON.
var constHTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON = json.RawMessage(`{"type":"asymmetricEncryption"}`)

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON) MarshalJSON() ([]byte, error) {
	return marshalUnion(constHTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON, marshalHTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON(h), h.MapOfAnything)
}

// HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON structure is generated from "http://asyncapi.com/definitions/2.4.0/NonBearerHTTPSecurityScheme.json".
type HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON struct {
	Scheme        string                 `json:"scheme"` // Required.
	Description   string                 `json:"description,omitempty"`
	MapOfAnything map[string]interface{} `json:"-"` // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

type marshalHTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON

var knownKeysHTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON = []string{
	"scheme",
	"description",
	"type",
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON) UnmarshalJSON(data []byte) error {
	var err error

	var not HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSONNot

	if json.Unmarshal(data, &not) == nil {
		return errors.New("not constraint failed for HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON")
	}

	mh := marshalHTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON(*h)

	err = json.Unmarshal(data, &mh)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	if v, exists := rawMap["type"]; exists && string(v) != `"http"` {
		return fmt.Errorf(`bad const value for "type" ("http" expected, %s received)`, v)
	}

	delete(rawMap, "type")

	for _, key := range knownKeysHTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if mh.MapOfAnything == nil {
				mh.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			mh.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON: %v", offendingKeys)
	}

	*h = HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON(mh)

	return nil
}

// constHTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON is unconditionally added to JSON.
var constHTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON = json.RawMessage(`{"type":"http"}`)

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON) MarshalJSON() ([]byte, error) {
	return marshalUnion(constHTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON, marshalHTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON(h), h.MapOfAnything)
}

// HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSONNot structure is generated from "http://asyncapi.com/definitions/2.4.0/NonBearerHTTPSecurityScheme.json->not".
type HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSONNot struct{}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSONNot) UnmarshalJSON(data []byte) error {
	var err error

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	if v, exists := rawMap["scheme"]; exists && string(v) != `"bearer"` {
		return fmt.Errorf(`bad const value for "scheme" ("bearer" expected, %s received)`, v)
	}

	delete(rawMap, "scheme")

	return nil
}

// constHTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSONNot is unconditionally added to JSON.
var constHTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSONNot = json.RawMessage(`{"scheme":"bearer"}`)

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSONNot) MarshalJSON() ([]byte, error) {
	return marshalUnion(constHTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSONNot)
}

// HTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON structure is generated from "http://asyncapi.com/definitions/2.4.0/BearerHTTPSecurityScheme.json".
type HTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON struct {
	BearerFormat  string                 `json:"bearerFormat,omitempty"`
	Description   string                 `json:"description,omitempty"`
	MapOfAnything map[string]interface{} `json:"-"` // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

type marshalHTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON HTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON

var knownKeysHTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON = []string{
	"bearerFormat",
	"description",
	"scheme",
	"type",
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON) UnmarshalJSON(data []byte) error {
	var err error

	mh := marshalHTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON(*h)

	err = json.Unmarshal(data, &mh)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	if v, exists := rawMap["scheme"]; exists && string(v) != `"bearer"` {
		return fmt.Errorf(`bad const value for "scheme" ("bearer" expected, %s received)`, v)
	}

	delete(rawMap, "scheme")

	if v, exists := rawMap["type"]; exists && string(v) != `"http"` {
		return fmt.Errorf(`bad const value for "type" ("http" expected, %s received)`, v)
	}

	delete(rawMap, "type")

	for _, key := range knownKeysHTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if mh.MapOfAnything == nil {
				mh.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			mh.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in HTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON: %v", offendingKeys)
	}

	*h = HTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON(mh)

	return nil
}

// constHTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON is unconditionally added to JSON.
var constHTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON = json.RawMessage(`{"scheme":"bearer","type":"http"}`)

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON) MarshalJSON() ([]byte, error) {
	return marshalUnion(constHTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON, marshalHTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON(h), h.MapOfAnything)
}

// HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON structure is generated from "http://asyncapi.com/definitions/2.4.0/APIKeyHTTPSecurityScheme.json".
type HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON struct {
	Name          string                                                      `json:"name"` // Required.
	In            HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSONIn `json:"in"`   // Required.
	Description   string                                                      `json:"description,omitempty"`
	MapOfAnything map[string]interface{}                                      `json:"-"` // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

type marshalHTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON

var knownKeysHTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON = []string{
	"name",
	"in",
	"description",
	"type",
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON) UnmarshalJSON(data []byte) error {
	var err error

	mh := marshalHTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON(*h)

	err = json.Unmarshal(data, &mh)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	if v, exists := rawMap["type"]; exists && string(v) != `"httpApiKey"` {
		return fmt.Errorf(`bad const value for "type" ("httpApiKey" expected, %s received)`, v)
	}

	delete(rawMap, "type")

	for _, key := range knownKeysHTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if mh.MapOfAnything == nil {
				mh.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			mh.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON: %v", offendingKeys)
	}

	*h = HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON(mh)

	return nil
}

// constHTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON is unconditionally added to JSON.
var constHTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON = json.RawMessage(`{"type":"httpApiKey"}`)

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON) MarshalJSON() ([]byte, error) {
	return marshalUnion(constHTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON, marshalHTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON(h), h.MapOfAnything)
}

// HTTPAsyncapiComDefinitions240HTTPSecuritySchemeJSON structure is generated from "http://asyncapi.com/definitions/2.4.0/HTTPSecurityScheme.json".
type HTTPAsyncapiComDefinitions240HTTPSecuritySchemeJSON struct {
	HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON *HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON `json:"-"`
	HTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON    *HTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON    `json:"-"`
	HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON    *HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON    `json:"-"`
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240HTTPSecuritySchemeJSON) UnmarshalJSON(data []byte) error {
	var err error

	oneOfErrors := make(map[string]error, 3)
	oneOfValid := 0

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON"] = err
		h.HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON = nil
	} else {
		oneOfValid++
	}

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON"] = err
		h.HTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON = nil
	} else {
		oneOfValid++
	}

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON"] = err
		h.HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON = nil
	} else {
		oneOfValid++
	}

	if oneOfValid != 1 {
		return fmt.Errorf("oneOf constraint failed for HTTPAsyncapiComDefinitions240HTTPSecuritySchemeJSON with %d valid results: %v", oneOfValid, oneOfErrors)
	}

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240HTTPSecuritySchemeJSON) MarshalJSON() ([]byte, error) {
	return marshalUnion(h.HTTPAsyncapiComDefinitions240NonBearerHTTPSecuritySchemeJSON, h.HTTPAsyncapiComDefinitions240BearerHTTPSecuritySchemeJSON, h.HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSON)
}

// HTTPAsyncapiComDefinitions240Oauth2FlowsJSON structure is generated from "http://asyncapi.com/definitions/2.4.0/oauth2Flows.json".
type HTTPAsyncapiComDefinitions240Oauth2FlowsJSON struct {
	Description   string                                            `json:"description,omitempty"`
	Flows         HTTPAsyncapiComDefinitions240Oauth2FlowsJSONFlows `json:"flows"` // Required.
	MapOfAnything map[string]interface{}                            `json:"-"`     // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

type marshalHTTPAsyncapiComDefinitions240Oauth2FlowsJSON HTTPAsyncapiComDefinitions240Oauth2FlowsJSON

var knownKeysHTTPAsyncapiComDefinitions240Oauth2FlowsJSON = []string{
	"description",
	"flows",
	"type",
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240Oauth2FlowsJSON) UnmarshalJSON(data []byte) error {
	var err error

	mh := marshalHTTPAsyncapiComDefinitions240Oauth2FlowsJSON(*h)

	err = json.Unmarshal(data, &mh)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	if v, exists := rawMap["type"]; exists && string(v) != `"oauth2"` {
		return fmt.Errorf(`bad const value for "type" ("oauth2" expected, %s received)`, v)
	}

	delete(rawMap, "type")

	for _, key := range knownKeysHTTPAsyncapiComDefinitions240Oauth2FlowsJSON {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if mh.MapOfAnything == nil {
				mh.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			mh.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	*h = HTTPAsyncapiComDefinitions240Oauth2FlowsJSON(mh)

	return nil
}

// constHTTPAsyncapiComDefinitions240Oauth2FlowsJSON is unconditionally added to JSON.
var constHTTPAsyncapiComDefinitions240Oauth2FlowsJSON = json.RawMessage(`{"type":"oauth2"}`)

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240Oauth2FlowsJSON) MarshalJSON() ([]byte, error) {
	return marshalUnion(constHTTPAsyncapiComDefinitions240Oauth2FlowsJSON, marshalHTTPAsyncapiComDefinitions240Oauth2FlowsJSON(h), h.MapOfAnything)
}

// HTTPAsyncapiComDefinitions240Oauth2FlowsJSONFlows structure is generated from "http://asyncapi.com/definitions/2.4.0/oauth2Flows.json->flows".
type HTTPAsyncapiComDefinitions240Oauth2FlowsJSONFlows struct {
	Implicit          *HTTPAsyncapiComDefinitions240Oauth2FlowJSON `json:"implicit,omitempty"`
	Password          *HTTPAsyncapiComDefinitions240Oauth2FlowJSON `json:"password,omitempty"`
	ClientCredentials *HTTPAsyncapiComDefinitions240Oauth2FlowJSON `json:"clientCredentials,omitempty"`
	AuthorizationCode *HTTPAsyncapiComDefinitions240Oauth2FlowJSON `json:"authorizationCode,omitempty"`
}

type marshalHTTPAsyncapiComDefinitions240Oauth2FlowsJSONFlows HTTPAsyncapiComDefinitions240Oauth2FlowsJSONFlows

var knownKeysHTTPAsyncapiComDefinitions240Oauth2FlowsJSONFlows = []string{
	"implicit",
	"password",
	"clientCredentials",
	"authorizationCode",
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240Oauth2FlowsJSONFlows) UnmarshalJSON(data []byte) error {
	var err error

	mh := marshalHTTPAsyncapiComDefinitions240Oauth2FlowsJSONFlows(*h)

	err = json.Unmarshal(data, &mh)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysHTTPAsyncapiComDefinitions240Oauth2FlowsJSONFlows {
		delete(rawMap, key)
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in HTTPAsyncapiComDefinitions240Oauth2FlowsJSONFlows: %v", offendingKeys)
	}

	*h = HTTPAsyncapiComDefinitions240Oauth2FlowsJSONFlows(mh)

	return nil
}

// HTTPAsyncapiComDefinitions240Oauth2FlowJSON structure is generated from "http://asyncapi.com/definitions/2.4.0/oauth2Flow.json".
type HTTPAsyncapiComDefinitions240Oauth2FlowJSON struct {
	AuthorizationURL string                 `json:"authorizationUrl,omitempty"` // Format: uri.
	TokenURL         string                 `json:"tokenUrl,omitempty"`         // Format: uri.
	RefreshURL       string                 `json:"refreshUrl,omitempty"`       // Format: uri.
	Scopes           map[string]string      `json:"scopes,omitempty"`
	MapOfAnything    map[string]interface{} `json:"-"` // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

type marshalHTTPAsyncapiComDefinitions240Oauth2FlowJSON HTTPAsyncapiComDefinitions240Oauth2FlowJSON

var knownKeysHTTPAsyncapiComDefinitions240Oauth2FlowJSON = []string{
	"authorizationUrl",
	"tokenUrl",
	"refreshUrl",
	"scopes",
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240Oauth2FlowJSON) UnmarshalJSON(data []byte) error {
	var err error

	mh := marshalHTTPAsyncapiComDefinitions240Oauth2FlowJSON(*h)

	err = json.Unmarshal(data, &mh)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysHTTPAsyncapiComDefinitions240Oauth2FlowJSON {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if mh.MapOfAnything == nil {
				mh.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			mh.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in HTTPAsyncapiComDefinitions240Oauth2FlowJSON: %v", offendingKeys)
	}

	*h = HTTPAsyncapiComDefinitions240Oauth2FlowJSON(mh)

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240Oauth2FlowJSON) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalHTTPAsyncapiComDefinitions240Oauth2FlowJSON(h), h.MapOfAnything)
}

// HTTPAsyncapiComDefinitions240OpenIDConnectJSON structure is generated from "http://asyncapi.com/definitions/2.4.0/openIdConnect.json".
type HTTPAsyncapiComDefinitions240OpenIDConnectJSON struct {
	Description string `json:"description,omitempty"`
	// Format: uri.
	// Required.
	OpenIDConnectURL string                 `json:"openIdConnectUrl"`
	MapOfAnything    map[string]interface{} `json:"-"` // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

type marshalHTTPAsyncapiComDefinitions240OpenIDConnectJSON HTTPAsyncapiComDefinitions240OpenIDConnectJSON

var knownKeysHTTPAsyncapiComDefinitions240OpenIDConnectJSON = []string{
	"description",
	"openIdConnectUrl",
	"type",
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240OpenIDConnectJSON) UnmarshalJSON(data []byte) error {
	var err error

	mh := marshalHTTPAsyncapiComDefinitions240OpenIDConnectJSON(*h)

	err = json.Unmarshal(data, &mh)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	if v, exists := rawMap["type"]; exists && string(v) != `"openIdConnect"` {
		return fmt.Errorf(`bad const value for "type" ("openIdConnect" expected, %s received)`, v)
	}

	delete(rawMap, "type")

	for _, key := range knownKeysHTTPAsyncapiComDefinitions240OpenIDConnectJSON {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if mh.MapOfAnything == nil {
				mh.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			mh.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in HTTPAsyncapiComDefinitions240OpenIDConnectJSON: %v", offendingKeys)
	}

	*h = HTTPAsyncapiComDefinitions240OpenIDConnectJSON(mh)

	return nil
}

// constHTTPAsyncapiComDefinitions240OpenIDConnectJSON is unconditionally added to JSON.
var constHTTPAsyncapiComDefinitions240OpenIDConnectJSON = json.RawMessage(`{"type":"openIdConnect"}`)

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240OpenIDConnectJSON) MarshalJSON() ([]byte, error) {
	return marshalUnion(constHTTPAsyncapiComDefinitions240OpenIDConnectJSON, marshalHTTPAsyncapiComDefinitions240OpenIDConnectJSON(h), h.MapOfAnything)
}

// HTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON structure is generated from "http://asyncapi.com/definitions/2.4.0/SaslPlainSecurityScheme.json".
type HTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON struct {
	Description   string                 `json:"description,omitempty"`
	MapOfAnything map[string]interface{} `json:"-"` // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

type marshalHTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON HTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON

var knownKeysHTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON = []string{
	"description",
	"type",
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON) UnmarshalJSON(data []byte) error {
	var err error

	mh := marshalHTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON(*h)

	err = json.Unmarshal(data, &mh)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	if v, exists := rawMap["type"]; exists && string(v) != `"plain"` {
		return fmt.Errorf(`bad const value for "type" ("plain" expected, %s received)`, v)
	}

	delete(rawMap, "type")

	for _, key := range knownKeysHTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if mh.MapOfAnything == nil {
				mh.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			mh.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in HTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON: %v", offendingKeys)
	}

	*h = HTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON(mh)

	return nil
}

// constHTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON is unconditionally added to JSON.
var constHTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON = json.RawMessage(`{"type":"plain"}`)

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON) MarshalJSON() ([]byte, error) {
	return marshalUnion(constHTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON, marshalHTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON(h), h.MapOfAnything)
}

// HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON structure is generated from "http://asyncapi.com/definitions/2.4.0/SaslScramSecurityScheme.json".
type HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON struct {
	Type          HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSONType `json:"type"` // Required.
	Description   string                                                       `json:"description,omitempty"`
	MapOfAnything map[string]interface{}                                       `json:"-"` // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

type marshalHTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON

var knownKeysHTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON = []string{
	"type",
	"description",
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON) UnmarshalJSON(data []byte) error {
	var err error

	mh := marshalHTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON(*h)

	err = json.Unmarshal(data, &mh)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for _, key := range knownKeysHTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if mh.MapOfAnything == nil {
				mh.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			mh.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON: %v", offendingKeys)
	}

	*h = HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON(mh)

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalHTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON(h), h.MapOfAnything)
}

// HTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON structure is generated from "http://asyncapi.com/definitions/2.4.0/SaslGssapiSecurityScheme.json".
type HTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON struct {
	Description   string                 `json:"description,omitempty"`
	MapOfAnything map[string]interface{} `json:"-"` // Key must match pattern: `^x-[\w\d\.\x2d_]+$`.
}

type marshalHTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON HTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON

var knownKeysHTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON = []string{
	"description",
	"type",
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON) UnmarshalJSON(data []byte) error {
	var err error

	mh := marshalHTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON(*h)

	err = json.Unmarshal(data, &mh)
	if err != nil {
		return err
	}

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	if v, exists := rawMap["type"]; exists && string(v) != `"gssapi"` {
		return fmt.Errorf(`bad const value for "type" ("gssapi" expected, %s received)`, v)
	}

	delete(rawMap, "type")

	for _, key := range knownKeysHTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON {
		delete(rawMap, key)
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexXWDX2D.MatchString(key) {
			matched = true

			if mh.MapOfAnything == nil {
				mh.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			mh.MapOfAnything[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	if len(rawMap) != 0 {
		offendingKeys := make([]string, 0, len(rawMap))

		for key := range rawMap {
			offendingKeys = append(offendingKeys, key)
		}

		return fmt.Errorf("additional properties not allowed in HTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON: %v", offendingKeys)
	}

	*h = HTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON(mh)

	return nil
}

// constHTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON is unconditionally added to JSON.
var constHTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON = json.RawMessage(`{"type":"gssapi"}`)

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON) MarshalJSON() ([]byte, error) {
	return marshalUnion(constHTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON, marshalHTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON(h), h.MapOfAnything)
}

// HTTPAsyncapiComDefinitions240SaslSecuritySchemeJSON structure is generated from "http://asyncapi.com/definitions/2.4.0/SaslSecurityScheme.json".
type HTTPAsyncapiComDefinitions240SaslSecuritySchemeJSON struct {
	HTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON  *HTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON  `json:"-"`
	HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON  *HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON  `json:"-"`
	HTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON *HTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON `json:"-"`
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240SaslSecuritySchemeJSON) UnmarshalJSON(data []byte) error {
	var err error

	oneOfErrors := make(map[string]error, 3)
	oneOfValid := 0

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON"] = err
		h.HTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON = nil
	} else {
		oneOfValid++
	}

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON"] = err
		h.HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON = nil
	} else {
		oneOfValid++
	}

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON"] = err
		h.HTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON = nil
	} else {
		oneOfValid++
	}

	if oneOfValid != 1 {
		return fmt.Errorf("oneOf constraint failed for HTTPAsyncapiComDefinitions240SaslSecuritySchemeJSON with %d valid results: %v", oneOfValid, oneOfErrors)
	}

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240SaslSecuritySchemeJSON) MarshalJSON() ([]byte, error) {
	return marshalUnion(h.HTTPAsyncapiComDefinitions240SaslPlainSecuritySchemeJSON, h.HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSON, h.HTTPAsyncapiComDefinitions240SaslGssapiSecuritySchemeJSON)
}

// HTTPAsyncapiComDefinitions240SecuritySchemeJSON structure is generated from "http://asyncapi.com/definitions/2.4.0/SecurityScheme.json".
type HTTPAsyncapiComDefinitions240SecuritySchemeJSON struct {
	HTTPAsyncapiComDefinitions240UserPasswordJSON         *HTTPAsyncapiComDefinitions240UserPasswordJSON         `json:"-"`
	HTTPAsyncapiComDefinitions240APIKeyJSON               *HTTPAsyncapiComDefinitions240APIKeyJSON               `json:"-"`
	HTTPAsyncapiComDefinitions240X509JSON                 *HTTPAsyncapiComDefinitions240X509JSON                 `json:"-"`
	HTTPAsyncapiComDefinitions240SymmetricEncryptionJSON  *HTTPAsyncapiComDefinitions240SymmetricEncryptionJSON  `json:"-"`
	HTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON *HTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON `json:"-"`
	HTTPAsyncapiComDefinitions240HTTPSecuritySchemeJSON   *HTTPAsyncapiComDefinitions240HTTPSecuritySchemeJSON   `json:"-"`
	HTTPAsyncapiComDefinitions240Oauth2FlowsJSON          *HTTPAsyncapiComDefinitions240Oauth2FlowsJSON          `json:"-"`
	HTTPAsyncapiComDefinitions240OpenIDConnectJSON        *HTTPAsyncapiComDefinitions240OpenIDConnectJSON        `json:"-"`
	HTTPAsyncapiComDefinitions240SaslSecuritySchemeJSON   *HTTPAsyncapiComDefinitions240SaslSecuritySchemeJSON   `json:"-"`
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240SecuritySchemeJSON) UnmarshalJSON(data []byte) error {
	var err error

	oneOfErrors := make(map[string]error, 9)
	oneOfValid := 0

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240UserPasswordJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240UserPasswordJSON"] = err
		h.HTTPAsyncapiComDefinitions240UserPasswordJSON = nil
	} else {
		oneOfValid++
	}

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240APIKeyJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240APIKeyJSON"] = err
		h.HTTPAsyncapiComDefinitions240APIKeyJSON = nil
	} else {
		oneOfValid++
	}

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240X509JSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240X509JSON"] = err
		h.HTTPAsyncapiComDefinitions240X509JSON = nil
	} else {
		oneOfValid++
	}

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240SymmetricEncryptionJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240SymmetricEncryptionJSON"] = err
		h.HTTPAsyncapiComDefinitions240SymmetricEncryptionJSON = nil
	} else {
		oneOfValid++
	}

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON"] = err
		h.HTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON = nil
	} else {
		oneOfValid++
	}

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240HTTPSecuritySchemeJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240HTTPSecuritySchemeJSON"] = err
		h.HTTPAsyncapiComDefinitions240HTTPSecuritySchemeJSON = nil
	} else {
		oneOfValid++
	}

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240Oauth2FlowsJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240Oauth2FlowsJSON"] = err
		h.HTTPAsyncapiComDefinitions240Oauth2FlowsJSON = nil
	} else {
		oneOfValid++
	}

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240OpenIDConnectJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240OpenIDConnectJSON"] = err
		h.HTTPAsyncapiComDefinitions240OpenIDConnectJSON = nil
	} else {
		oneOfValid++
	}

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240SaslSecuritySchemeJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240SaslSecuritySchemeJSON"] = err
		h.HTTPAsyncapiComDefinitions240SaslSecuritySchemeJSON = nil
	} else {
		oneOfValid++
	}

	if oneOfValid != 1 {
		return fmt.Errorf("oneOf constraint failed for HTTPAsyncapiComDefinitions240SecuritySchemeJSON with %d valid results: %v", oneOfValid, oneOfErrors)
	}

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240SecuritySchemeJSON) MarshalJSON() ([]byte, error) {
	return marshalUnion(h.HTTPAsyncapiComDefinitions240UserPasswordJSON, h.HTTPAsyncapiComDefinitions240APIKeyJSON, h.HTTPAsyncapiComDefinitions240X509JSON, h.HTTPAsyncapiComDefinitions240SymmetricEncryptionJSON, h.HTTPAsyncapiComDefinitions240AsymmetricEncryptionJSON, h.HTTPAsyncapiComDefinitions240HTTPSecuritySchemeJSON, h.HTTPAsyncapiComDefinitions240Oauth2FlowsJSON, h.HTTPAsyncapiComDefinitions240OpenIDConnectJSON, h.HTTPAsyncapiComDefinitions240SaslSecuritySchemeJSON)
}

// HTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemesWD structure is generated from "http://asyncapi.com/definitions/2.4.0/components.json->securitySchemes->^[\w\d\.\-_]+$".
type HTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemesWD struct {
	HTTPAsyncapiComDefinitions240ReferenceJSON      *HTTPAsyncapiComDefinitions240ReferenceJSON      `json:"-"`
	HTTPAsyncapiComDefinitions240SecuritySchemeJSON *HTTPAsyncapiComDefinitions240SecuritySchemeJSON `json:"-"`
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemesWD) UnmarshalJSON(data []byte) error {
	var err error

	oneOfErrors := make(map[string]error, 2)
	oneOfValid := 0

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240ReferenceJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240ReferenceJSON"] = err
		h.HTTPAsyncapiComDefinitions240ReferenceJSON = nil
	} else {
		oneOfValid++
	}

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240SecuritySchemeJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240SecuritySchemeJSON"] = err
		h.HTTPAsyncapiComDefinitions240SecuritySchemeJSON = nil
	} else {
		oneOfValid++
	}

	if oneOfValid != 1 {
		return fmt.Errorf("oneOf constraint failed for HTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemesWD with %d valid results: %v", oneOfValid, oneOfErrors)
	}

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemesWD) MarshalJSON() ([]byte, error) {
	return marshalUnion(h.HTTPAsyncapiComDefinitions240ReferenceJSON, h.HTTPAsyncapiComDefinitions240SecuritySchemeJSON)
}

// HTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemes structure is generated from "http://asyncapi.com/definitions/2.4.0/components.json->securitySchemes".
type HTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemes struct {
	MapOfHTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemesWDValues map[string]HTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemesWD `json:"-"` // Key must match pattern: `^[\w\d\.\-_]+$`.
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemes) UnmarshalJSON(data []byte) error {
	var err error

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexWD.MatchString(key) {
			matched = true

			if h.MapOfHTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemesWDValues == nil {
				h.MapOfHTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemesWDValues = make(map[string]HTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemesWD, 1)
			}

			var val HTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemesWD

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			h.MapOfHTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemesWDValues[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemes) MarshalJSON() ([]byte, error) {
	return marshalUnion(h.MapOfHTTPAsyncapiComDefinitions240ComponentsJSONSecuritySchemesWDValues)
}

// HTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIdsWD structure is generated from "http://asyncapi.com/definitions/2.4.0/components.json->correlationIds->^[\w\d\.\-_]+$".
type HTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIdsWD struct {
	HTTPAsyncapiComDefinitions240ReferenceJSON     *HTTPAsyncapiComDefinitions240ReferenceJSON     `json:"-"`
	HTTPAsyncapiComDefinitions240CorrelationIDJSON *HTTPAsyncapiComDefinitions240CorrelationIDJSON `json:"-"`
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIdsWD) UnmarshalJSON(data []byte) error {
	var err error

	oneOfErrors := make(map[string]error, 2)
	oneOfValid := 0

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240ReferenceJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240ReferenceJSON"] = err
		h.HTTPAsyncapiComDefinitions240ReferenceJSON = nil
	} else {
		oneOfValid++
	}

	err = json.Unmarshal(data, &h.HTTPAsyncapiComDefinitions240CorrelationIDJSON)
	if err != nil {
		oneOfErrors["HTTPAsyncapiComDefinitions240CorrelationIDJSON"] = err
		h.HTTPAsyncapiComDefinitions240CorrelationIDJSON = nil
	} else {
		oneOfValid++
	}

	if oneOfValid != 1 {
		return fmt.Errorf("oneOf constraint failed for HTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIdsWD with %d valid results: %v", oneOfValid, oneOfErrors)
	}

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIdsWD) MarshalJSON() ([]byte, error) {
	return marshalUnion(h.HTTPAsyncapiComDefinitions240ReferenceJSON, h.HTTPAsyncapiComDefinitions240CorrelationIDJSON)
}

// HTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIds structure is generated from "http://asyncapi.com/definitions/2.4.0/components.json->correlationIds".
type HTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIds struct {
	MapOfHTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIdsWDValues map[string]HTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIdsWD `json:"-"` // Key must match pattern: `^[\w\d\.\-_]+$`.
}

// UnmarshalJSON decodes JSON.
func (h *HTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIds) UnmarshalJSON(data []byte) error {
	var err error

	var rawMap map[string]json.RawMessage

	err = json.Unmarshal(data, &rawMap)
	if err != nil {
		rawMap = nil
	}

	for key, rawValue := range rawMap {
		matched := false

		if regexWD.MatchString(key) {
			matched = true

			if h.MapOfHTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIdsWDValues == nil {
				h.MapOfHTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIdsWDValues = make(map[string]HTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIdsWD, 1)
			}

			var val HTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIdsWD

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			h.MapOfHTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIdsWDValues[key] = val
		}

		if matched {
			delete(rawMap, key)
		}
	}

	return nil
}

// MarshalJSON encodes JSON.
func (h HTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIds) MarshalJSON() ([]byte, error) {
	return marshalUnion(h.MapOfHTTPAsyncapiComDefinitions240ComponentsJSONCorrelationIdsWDValues)
}

// JSONSchemaTypeAnyOf0 is an enum type.
type JSONSchemaTypeAnyOf0 string

// JSONSchemaTypeAnyOf0 values enumeration.
const (
	JSONSchemaTypeAnyOf0Array   = JSONSchemaTypeAnyOf0("array")
	JSONSchemaTypeAnyOf0Boolean = JSONSchemaTypeAnyOf0("boolean")
	JSONSchemaTypeAnyOf0Integer = JSONSchemaTypeAnyOf0("integer")
	JSONSchemaTypeAnyOf0Null    = JSONSchemaTypeAnyOf0("null")
	JSONSchemaTypeAnyOf0Number  = JSONSchemaTypeAnyOf0("number")
	JSONSchemaTypeAnyOf0Object  = JSONSchemaTypeAnyOf0("object")
	JSONSchemaTypeAnyOf0String  = JSONSchemaTypeAnyOf0("string")
)

// MarshalJSON encodes JSON.
func (i JSONSchemaTypeAnyOf0) MarshalJSON() ([]byte, error) {
	switch i {
	case JSONSchemaTypeAnyOf0Array:
	case JSONSchemaTypeAnyOf0Boolean:
	case JSONSchemaTypeAnyOf0Integer:
	case JSONSchemaTypeAnyOf0Null:
	case JSONSchemaTypeAnyOf0Number:
	case JSONSchemaTypeAnyOf0Object:
	case JSONSchemaTypeAnyOf0String:

	default:
		return nil, fmt.Errorf("unexpected JSONSchemaTypeAnyOf0 value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *JSONSchemaTypeAnyOf0) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := JSONSchemaTypeAnyOf0(ii)

	switch v {
	case JSONSchemaTypeAnyOf0Array:
	case JSONSchemaTypeAnyOf0Boolean:
	case JSONSchemaTypeAnyOf0Integer:
	case JSONSchemaTypeAnyOf0Null:
	case JSONSchemaTypeAnyOf0Number:
	case JSONSchemaTypeAnyOf0Object:
	case JSONSchemaTypeAnyOf0String:

	default:
		return fmt.Errorf("unexpected JSONSchemaTypeAnyOf0 value: %v", v)
	}

	*i = v

	return nil
}

// JSONSchemaTypeAnyOf1Items is an enum type.
type JSONSchemaTypeAnyOf1Items string

// JSONSchemaTypeAnyOf1Items values enumeration.
const (
	JSONSchemaTypeAnyOf1ItemsArray   = JSONSchemaTypeAnyOf1Items("array")
	JSONSchemaTypeAnyOf1ItemsBoolean = JSONSchemaTypeAnyOf1Items("boolean")
	JSONSchemaTypeAnyOf1ItemsInteger = JSONSchemaTypeAnyOf1Items("integer")
	JSONSchemaTypeAnyOf1ItemsNull    = JSONSchemaTypeAnyOf1Items("null")
	JSONSchemaTypeAnyOf1ItemsNumber  = JSONSchemaTypeAnyOf1Items("number")
	JSONSchemaTypeAnyOf1ItemsObject  = JSONSchemaTypeAnyOf1Items("object")
	JSONSchemaTypeAnyOf1ItemsString  = JSONSchemaTypeAnyOf1Items("string")
)

// MarshalJSON encodes JSON.
func (i JSONSchemaTypeAnyOf1Items) MarshalJSON() ([]byte, error) {
	switch i {
	case JSONSchemaTypeAnyOf1ItemsArray:
	case JSONSchemaTypeAnyOf1ItemsBoolean:
	case JSONSchemaTypeAnyOf1ItemsInteger:
	case JSONSchemaTypeAnyOf1ItemsNull:
	case JSONSchemaTypeAnyOf1ItemsNumber:
	case JSONSchemaTypeAnyOf1ItemsObject:
	case JSONSchemaTypeAnyOf1ItemsString:

	default:
		return nil, fmt.Errorf("unexpected JSONSchemaTypeAnyOf1Items value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *JSONSchemaTypeAnyOf1Items) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := JSONSchemaTypeAnyOf1Items(ii)

	switch v {
	case JSONSchemaTypeAnyOf1ItemsArray:
	case JSONSchemaTypeAnyOf1ItemsBoolean:
	case JSONSchemaTypeAnyOf1ItemsInteger:
	case JSONSchemaTypeAnyOf1ItemsNull:
	case JSONSchemaTypeAnyOf1ItemsNumber:
	case JSONSchemaTypeAnyOf1ItemsObject:
	case JSONSchemaTypeAnyOf1ItemsString:

	default:
		return fmt.Errorf("unexpected JSONSchemaTypeAnyOf1Items value: %v", v)
	}

	*i = v

	return nil
}

// HTTPAsyncapiComDefinitions240APIKeyJSONIn is an enum type.
type HTTPAsyncapiComDefinitions240APIKeyJSONIn string

// HTTPAsyncapiComDefinitions240APIKeyJSONIn values enumeration.
const (
	HTTPAsyncapiComDefinitions240APIKeyJSONInUser     = HTTPAsyncapiComDefinitions240APIKeyJSONIn("user")
	HTTPAsyncapiComDefinitions240APIKeyJSONInPassword = HTTPAsyncapiComDefinitions240APIKeyJSONIn("password")
)

// MarshalJSON encodes JSON.
func (i HTTPAsyncapiComDefinitions240APIKeyJSONIn) MarshalJSON() ([]byte, error) {
	switch i {
	case HTTPAsyncapiComDefinitions240APIKeyJSONInUser:
	case HTTPAsyncapiComDefinitions240APIKeyJSONInPassword:

	default:
		return nil, fmt.Errorf("unexpected HTTPAsyncapiComDefinitions240APIKeyJSONIn value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *HTTPAsyncapiComDefinitions240APIKeyJSONIn) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := HTTPAsyncapiComDefinitions240APIKeyJSONIn(ii)

	switch v {
	case HTTPAsyncapiComDefinitions240APIKeyJSONInUser:
	case HTTPAsyncapiComDefinitions240APIKeyJSONInPassword:

	default:
		return fmt.Errorf("unexpected HTTPAsyncapiComDefinitions240APIKeyJSONIn value: %v", v)
	}

	*i = v

	return nil
}

// HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSONIn is an enum type.
type HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSONIn string

// HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSONIn values enumeration.
const (
	HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSONInHeader = HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSONIn("header")
	HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSONInQuery  = HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSONIn("query")
	HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSONInCookie = HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSONIn("cookie")
)

// MarshalJSON encodes JSON.
func (i HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSONIn) MarshalJSON() ([]byte, error) {
	switch i {
	case HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSONInHeader:
	case HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSONInQuery:
	case HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSONInCookie:

	default:
		return nil, fmt.Errorf("unexpected HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSONIn value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSONIn) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSONIn(ii)

	switch v {
	case HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSONInHeader:
	case HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSONInQuery:
	case HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSONInCookie:

	default:
		return fmt.Errorf("unexpected HTTPAsyncapiComDefinitions240APIKeyHTTPSecuritySchemeJSONIn value: %v", v)
	}

	*i = v

	return nil
}

// HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSONType is an enum type.
type HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSONType string

// HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSONType values enumeration.
const (
	HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSONTypeScramSha256 = HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSONType("scramSha256")
	HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSONTypeScramSha512 = HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSONType("scramSha512")
)

// MarshalJSON encodes JSON.
func (i HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSONType) MarshalJSON() ([]byte, error) {
	switch i {
	case HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSONTypeScramSha256:
	case HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSONTypeScramSha512:

	default:
		return nil, fmt.Errorf("unexpected HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSONType value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSONType) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSONType(ii)

	switch v {
	case HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSONTypeScramSha256:
	case HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSONTypeScramSha512:

	default:
		return fmt.Errorf("unexpected HTTPAsyncapiComDefinitions240SaslScramSecuritySchemeJSONType value: %v", v)
	}

	*i = v

	return nil
}

func marshalUnion(maps ...interface{}) ([]byte, error) {
	result := []byte("{")
	isObject := true

	for _, m := range maps {
		j, err := json.Marshal(m)
		if err != nil {
			return nil, err
		}

		if string(j) == "{}" {
			continue
		}

		if string(j) == "null" {
			continue
		}

		if j[0] != '{' {
			if len(result) == 1 && (isObject || bytes.Equal(result, j)) {
				result = j
				isObject = false

				continue
			}

			return nil, errors.New("failed to union map: object expected, " + string(j) + " received")
		}

		if !isObject {
			return nil, errors.New("failed to union " + string(result) + " and " + string(j))
		}

		if len(result) > 1 {
			result[len(result)-1] = ','
		}

		result = append(result, j[1:]...)
	}

	// Close empty result.
	if isObject && len(result) == 1 {
		result = append(result, '}')
	}

	return result, nil
}

// Regular expressions for pattern properties.
var (
	regexXWDX2D = regexp.MustCompile(`^x-[\w\d\.\x2d_]+$`)
	regexWD     = regexp.MustCompile(`^[\w\d\.\-_]+$`)
)
