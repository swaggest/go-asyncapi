// Code generated by github.com/swaggest/json-cli v1.6.7, DO NOT EDIT.

// Package spec contains JSON mapping structures.
package spec

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"regexp"
)

// AsyncAPI structure is generated from "#".
//
// AsyncAPI 2.0.0 schema.
type AsyncAPI struct {
	ID                 string                 `json:"id,omitempty"`   // A unique id representing the application.
	Info               *Info                  `json:"info,omitempty"` // General information about the API.
	Servers            map[string]Server      `json:"servers,omitempty"`
	DefaultContentType string                 `json:"defaultContentType,omitempty"`
	Channels           map[string]ChannelItem `json:"channels,omitempty"`
	Components         *Components            `json:"components,omitempty"` // An object to hold a set of reusable objects for different aspects of the AsyncAPI Specification.
	Tags               []Tag                  `json:"tags,omitempty"`
	ExternalDocs       *ExternalDocs          `json:"externalDocs,omitempty"` // information about external documentation
	MapOfAnything      map[string]interface{} `json:"-"`                      // Key must match pattern: ^x-[\w\d\.\-\_]+$
}

// WithID sets ID value.
func (v *AsyncAPI) WithID(val string) *AsyncAPI {
	v.ID = val
	return v
}

// WithInfo sets Info value.
func (v *AsyncAPI) WithInfo(val Info) *AsyncAPI {
	v.Info = &val
	return v
}

// WithServers sets Servers value.
func (v *AsyncAPI) WithServers(val map[string]Server) *AsyncAPI {
	v.Servers = val
	return v
}

// WithDefaultContentType sets DefaultContentType value.
func (v *AsyncAPI) WithDefaultContentType(val string) *AsyncAPI {
	v.DefaultContentType = val
	return v
}

// WithChannels sets Channels value.
func (v *AsyncAPI) WithChannels(val map[string]ChannelItem) *AsyncAPI {
	v.Channels = val
	return v
}

// WithComponents sets Components value.
func (v *AsyncAPI) WithComponents(val Components) *AsyncAPI {
	v.Components = &val
	return v
}

// WithTags sets Tags value.
func (v *AsyncAPI) WithTags(val ...Tag) *AsyncAPI {
	v.Tags = val
	return v
}

// WithExternalDocs sets ExternalDocs value.
func (v *AsyncAPI) WithExternalDocs(val ExternalDocs) *AsyncAPI {
	v.ExternalDocs = &val
	return v
}

// WithMapOfAnything sets MapOfAnything value.
func (v *AsyncAPI) WithMapOfAnything(val map[string]interface{}) *AsyncAPI {
	v.MapOfAnything = val
	return v
}

type marshalAsyncAPI AsyncAPI

var ignoreKeysAsyncAPI = []string{
	"id",
	"info",
	"servers",
	"defaultContentType",
	"channels",
	"components",
	"tags",
	"externalDocs",
	"asyncapi",
}

// UnmarshalJSON decodes JSON.
func (i *AsyncAPI) UnmarshalJSON(data []byte) error {
	var err error

	ii := marshalAsyncAPI(*i)

	err = json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	var m map[string]json.RawMessage

	err = json.Unmarshal(data, &m)
	if err != nil {
		m = nil
	}

	if v, ok := m["asyncapi"]; !ok || string(v) != `"2.0.0"` {
		return fmt.Errorf(`bad or missing const value for "asyncapi" ("2.0.0" expected, %s received)`, v)
	}

	delete(m, "asyncapi")

	for _, key := range ignoreKeysAsyncAPI {
		delete(m, key)
	}

	for key, rawValue := range m {
		matched := false

		if regexXWD.MatchString(key) {
			matched = true

			if ii.MapOfAnything == nil {
				ii.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			ii.MapOfAnything[key] = val
		}

		if matched {
			delete(m, key)
		}
	}

	*i = AsyncAPI(ii)

	return nil
}

var (
	// constAsyncAPI is unconditionally added to JSON.
	constAsyncAPI = json.RawMessage(`{"asyncapi":"2.0.0"}`)
)

// MarshalJSON encodes JSON.
func (i AsyncAPI) MarshalJSON() ([]byte, error) {
	return marshalUnion(constAsyncAPI, marshalAsyncAPI(i), i.MapOfAnything)
}

// Info structure is generated from "#/definitions/info".
//
// General information about the API.
type Info struct {
	Title          string                 `json:"title,omitempty"`          // A unique and precise title of the API.
	Version        string                 `json:"version,omitempty"`        // A semantic version number of the API.
	Description    string                 `json:"description,omitempty"`    // A longer description of the API. Should be different from the title. CommonMark is allowed.
	TermsOfService string                 `json:"termsOfService,omitempty"` // A URL to the Terms of Service for the API. MUST be in the format of a URL.
	Contact        *Contact               `json:"contact,omitempty"`        // Contact information for the owners of the API.
	License        *License               `json:"license,omitempty"`
	MapOfAnything  map[string]interface{} `json:"-"` // Key must match pattern: ^x-[\w\d\.\-\_]+$
}

// WithTitle sets Title value.
func (v *Info) WithTitle(val string) *Info {
	v.Title = val
	return v
}

// WithVersion sets Version value.
func (v *Info) WithVersion(val string) *Info {
	v.Version = val
	return v
}

// WithDescription sets Description value.
func (v *Info) WithDescription(val string) *Info {
	v.Description = val
	return v
}

// WithTermsOfService sets TermsOfService value.
func (v *Info) WithTermsOfService(val string) *Info {
	v.TermsOfService = val
	return v
}

// WithContact sets Contact value.
func (v *Info) WithContact(val Contact) *Info {
	v.Contact = &val
	return v
}

// WithLicense sets License value.
func (v *Info) WithLicense(val License) *Info {
	v.License = &val
	return v
}

// WithMapOfAnything sets MapOfAnything value.
func (v *Info) WithMapOfAnything(val map[string]interface{}) *Info {
	v.MapOfAnything = val
	return v
}

type marshalInfo Info

var ignoreKeysInfo = []string{
	"title",
	"version",
	"description",
	"termsOfService",
	"contact",
	"license",
}

// UnmarshalJSON decodes JSON.
func (i *Info) UnmarshalJSON(data []byte) error {
	var err error

	ii := marshalInfo(*i)

	err = json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	var m map[string]json.RawMessage

	err = json.Unmarshal(data, &m)
	if err != nil {
		m = nil
	}

	for _, key := range ignoreKeysInfo {
		delete(m, key)
	}

	for key, rawValue := range m {
		matched := false

		if regexXWD.MatchString(key) {
			matched = true

			if ii.MapOfAnything == nil {
				ii.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			ii.MapOfAnything[key] = val
		}

		if matched {
			delete(m, key)
		}
	}

	*i = Info(ii)

	return nil
}

// MarshalJSON encodes JSON.
func (i Info) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalInfo(i), i.MapOfAnything)
}

// Contact structure is generated from "#/definitions/contact".
//
// Contact information for the owners of the API.
type Contact struct {
	Name          string                 `json:"name,omitempty"`  // The identifying name of the contact person/organization.
	URL           string                 `json:"url,omitempty"`   // The URL pointing to the contact information.
	Email         string                 `json:"email,omitempty"` // The email address of the contact person/organization.
	MapOfAnything map[string]interface{} `json:"-"`               // Key must match pattern: ^x-[\w\d\.\-\_]+$
}

// WithName sets Name value.
func (v *Contact) WithName(val string) *Contact {
	v.Name = val
	return v
}

// WithURL sets URL value.
func (v *Contact) WithURL(val string) *Contact {
	v.URL = val
	return v
}

// WithEmail sets Email value.
func (v *Contact) WithEmail(val string) *Contact {
	v.Email = val
	return v
}

// WithMapOfAnything sets MapOfAnything value.
func (v *Contact) WithMapOfAnything(val map[string]interface{}) *Contact {
	v.MapOfAnything = val
	return v
}

type marshalContact Contact

var ignoreKeysContact = []string{
	"name",
	"url",
	"email",
}

// UnmarshalJSON decodes JSON.
func (i *Contact) UnmarshalJSON(data []byte) error {
	var err error

	ii := marshalContact(*i)

	err = json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	var m map[string]json.RawMessage

	err = json.Unmarshal(data, &m)
	if err != nil {
		m = nil
	}

	for _, key := range ignoreKeysContact {
		delete(m, key)
	}

	for key, rawValue := range m {
		matched := false

		if regexXWD.MatchString(key) {
			matched = true

			if ii.MapOfAnything == nil {
				ii.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			ii.MapOfAnything[key] = val
		}

		if matched {
			delete(m, key)
		}
	}

	*i = Contact(ii)

	return nil
}

// MarshalJSON encodes JSON.
func (i Contact) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalContact(i), i.MapOfAnything)
}

// License structure is generated from "#/definitions/license".
type License struct {
	Name          string                 `json:"name,omitempty"` // The name of the license type. It's encouraged to use an OSI compatible license.
	URL           string                 `json:"url,omitempty"`  // The URL pointing to the license.
	MapOfAnything map[string]interface{} `json:"-"`              // Key must match pattern: ^x-[\w\d\.\-\_]+$
}

// WithName sets Name value.
func (v *License) WithName(val string) *License {
	v.Name = val
	return v
}

// WithURL sets URL value.
func (v *License) WithURL(val string) *License {
	v.URL = val
	return v
}

// WithMapOfAnything sets MapOfAnything value.
func (v *License) WithMapOfAnything(val map[string]interface{}) *License {
	v.MapOfAnything = val
	return v
}

type marshalLicense License

var ignoreKeysLicense = []string{
	"name",
	"url",
}

// UnmarshalJSON decodes JSON.
func (i *License) UnmarshalJSON(data []byte) error {
	var err error

	ii := marshalLicense(*i)

	err = json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	var m map[string]json.RawMessage

	err = json.Unmarshal(data, &m)
	if err != nil {
		m = nil
	}

	for _, key := range ignoreKeysLicense {
		delete(m, key)
	}

	for key, rawValue := range m {
		matched := false

		if regexXWD.MatchString(key) {
			matched = true

			if ii.MapOfAnything == nil {
				ii.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			ii.MapOfAnything[key] = val
		}

		if matched {
			delete(m, key)
		}
	}

	*i = License(ii)

	return nil
}

// MarshalJSON encodes JSON.
func (i License) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalLicense(i), i.MapOfAnything)
}

// Server structure is generated from "#/definitions/server".
//
// An object representing a Server.
type Server struct {
	URL             string                    `json:"url,omitempty"`
	Description     string                    `json:"description,omitempty"`
	Protocol        string                    `json:"protocol,omitempty"` // The transfer protocol.
	ProtocolVersion string                    `json:"protocolVersion,omitempty"`
	Variables       map[string]ServerVariable `json:"variables,omitempty"`
	Security        []map[string][]string     `json:"security,omitempty"`
	Bindings        *ServerBindingsObject     `json:"bindings,omitempty"`
	MapOfAnything   map[string]interface{}    `json:"-"` // Key must match pattern: ^x-[\w\d\.\-\_]+$
}

// WithURL sets URL value.
func (v *Server) WithURL(val string) *Server {
	v.URL = val
	return v
}

// WithDescription sets Description value.
func (v *Server) WithDescription(val string) *Server {
	v.Description = val
	return v
}

// WithProtocol sets Protocol value.
func (v *Server) WithProtocol(val string) *Server {
	v.Protocol = val
	return v
}

// WithProtocolVersion sets ProtocolVersion value.
func (v *Server) WithProtocolVersion(val string) *Server {
	v.ProtocolVersion = val
	return v
}

// WithVariables sets Variables value.
func (v *Server) WithVariables(val map[string]ServerVariable) *Server {
	v.Variables = val
	return v
}

// WithSecurity sets Security value.
func (v *Server) WithSecurity(val ...map[string][]string) *Server {
	v.Security = val
	return v
}

// WithBindings sets Bindings value.
func (v *Server) WithBindings(val ServerBindingsObject) *Server {
	v.Bindings = &val
	return v
}

// WithMapOfAnything sets MapOfAnything value.
func (v *Server) WithMapOfAnything(val map[string]interface{}) *Server {
	v.MapOfAnything = val
	return v
}

type marshalServer Server

var ignoreKeysServer = []string{
	"url",
	"description",
	"protocol",
	"protocolVersion",
	"variables",
	"security",
	"bindings",
}

// UnmarshalJSON decodes JSON.
func (i *Server) UnmarshalJSON(data []byte) error {
	var err error

	ii := marshalServer(*i)

	err = json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	var m map[string]json.RawMessage

	err = json.Unmarshal(data, &m)
	if err != nil {
		m = nil
	}

	for _, key := range ignoreKeysServer {
		delete(m, key)
	}

	for key, rawValue := range m {
		matched := false

		if regexXWD.MatchString(key) {
			matched = true

			if ii.MapOfAnything == nil {
				ii.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			ii.MapOfAnything[key] = val
		}

		if matched {
			delete(m, key)
		}
	}

	*i = Server(ii)

	return nil
}

// MarshalJSON encodes JSON.
func (i Server) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalServer(i), i.MapOfAnything)
}

// ServerVariable structure is generated from "#/definitions/serverVariable".
//
// An object representing a Server Variable for server URL template substitution.
type ServerVariable struct {
	Enum          []string               `json:"enum,omitempty"`
	Default       string                 `json:"default,omitempty"`
	Description   string                 `json:"description,omitempty"`
	Examples      []string               `json:"examples,omitempty"`
	MapOfAnything map[string]interface{} `json:"-"` // Key must match pattern: ^x-[\w\d\.\-\_]+$
}

// WithEnum sets Enum value.
func (v *ServerVariable) WithEnum(val ...string) *ServerVariable {
	v.Enum = val
	return v
}

// WithDefault sets Default value.
func (v *ServerVariable) WithDefault(val string) *ServerVariable {
	v.Default = val
	return v
}

// WithDescription sets Description value.
func (v *ServerVariable) WithDescription(val string) *ServerVariable {
	v.Description = val
	return v
}

// WithExamples sets Examples value.
func (v *ServerVariable) WithExamples(val ...string) *ServerVariable {
	v.Examples = val
	return v
}

// WithMapOfAnything sets MapOfAnything value.
func (v *ServerVariable) WithMapOfAnything(val map[string]interface{}) *ServerVariable {
	v.MapOfAnything = val
	return v
}

type marshalServerVariable ServerVariable

var ignoreKeysServerVariable = []string{
	"enum",
	"default",
	"description",
	"examples",
}

// UnmarshalJSON decodes JSON.
func (i *ServerVariable) UnmarshalJSON(data []byte) error {
	var err error

	ii := marshalServerVariable(*i)

	err = json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	var m map[string]json.RawMessage

	err = json.Unmarshal(data, &m)
	if err != nil {
		m = nil
	}

	for _, key := range ignoreKeysServerVariable {
		delete(m, key)
	}

	for key, rawValue := range m {
		matched := false

		if regexXWD.MatchString(key) {
			matched = true

			if ii.MapOfAnything == nil {
				ii.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			ii.MapOfAnything[key] = val
		}

		if matched {
			delete(m, key)
		}
	}

	*i = ServerVariable(ii)

	return nil
}

// MarshalJSON encodes JSON.
func (i ServerVariable) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalServerVariable(i), i.MapOfAnything)
}

// ServerBindingsObject structure is generated from "#/definitions/serverBindingsObject".
type ServerBindingsObject struct {
	HTTP                 *interface{}           `json:"http,omitempty"`
	Ws                   *interface{}           `json:"ws,omitempty"`
	Amqp                 *interface{}           `json:"amqp,omitempty"`
	Amqp1                *interface{}           `json:"amqp1,omitempty"`
	Mqtt                 *interface{}           `json:"mqtt,omitempty"`
	Mqtt5                *interface{}           `json:"mqtt5,omitempty"`
	Kafka                *interface{}           `json:"kafka,omitempty"`
	Nats                 *interface{}           `json:"nats,omitempty"`
	Jms                  *interface{}           `json:"jms,omitempty"`
	Sns                  *interface{}           `json:"sns,omitempty"`
	Sqs                  *interface{}           `json:"sqs,omitempty"`
	Stomp                *interface{}           `json:"stomp,omitempty"`
	Redis                *interface{}           `json:"redis,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"` // All unmatched properties
}

// WithHTTP sets HTTP value.
func (v *ServerBindingsObject) WithHTTP(val interface{}) *ServerBindingsObject {
	v.HTTP = &val
	return v
}

// WithWs sets Ws value.
func (v *ServerBindingsObject) WithWs(val interface{}) *ServerBindingsObject {
	v.Ws = &val
	return v
}

// WithAmqp sets Amqp value.
func (v *ServerBindingsObject) WithAmqp(val interface{}) *ServerBindingsObject {
	v.Amqp = &val
	return v
}

// WithAmqp1 sets Amqp1 value.
func (v *ServerBindingsObject) WithAmqp1(val interface{}) *ServerBindingsObject {
	v.Amqp1 = &val
	return v
}

// WithMqtt sets Mqtt value.
func (v *ServerBindingsObject) WithMqtt(val interface{}) *ServerBindingsObject {
	v.Mqtt = &val
	return v
}

// WithMqtt5 sets Mqtt5 value.
func (v *ServerBindingsObject) WithMqtt5(val interface{}) *ServerBindingsObject {
	v.Mqtt5 = &val
	return v
}

// WithKafka sets Kafka value.
func (v *ServerBindingsObject) WithKafka(val interface{}) *ServerBindingsObject {
	v.Kafka = &val
	return v
}

// WithNats sets Nats value.
func (v *ServerBindingsObject) WithNats(val interface{}) *ServerBindingsObject {
	v.Nats = &val
	return v
}

// WithJms sets Jms value.
func (v *ServerBindingsObject) WithJms(val interface{}) *ServerBindingsObject {
	v.Jms = &val
	return v
}

// WithSns sets Sns value.
func (v *ServerBindingsObject) WithSns(val interface{}) *ServerBindingsObject {
	v.Sns = &val
	return v
}

// WithSqs sets Sqs value.
func (v *ServerBindingsObject) WithSqs(val interface{}) *ServerBindingsObject {
	v.Sqs = &val
	return v
}

// WithStomp sets Stomp value.
func (v *ServerBindingsObject) WithStomp(val interface{}) *ServerBindingsObject {
	v.Stomp = &val
	return v
}

// WithRedis sets Redis value.
func (v *ServerBindingsObject) WithRedis(val interface{}) *ServerBindingsObject {
	v.Redis = &val
	return v
}

// WithAdditionalProperties sets AdditionalProperties value.
func (v *ServerBindingsObject) WithAdditionalProperties(val map[string]interface{}) *ServerBindingsObject {
	v.AdditionalProperties = val
	return v
}

type marshalServerBindingsObject ServerBindingsObject

var ignoreKeysServerBindingsObject = []string{
	"http",
	"ws",
	"amqp",
	"amqp1",
	"mqtt",
	"mqtt5",
	"kafka",
	"nats",
	"jms",
	"sns",
	"sqs",
	"stomp",
	"redis",
}

// UnmarshalJSON decodes JSON.
func (i *ServerBindingsObject) UnmarshalJSON(data []byte) error {
	var err error

	ii := marshalServerBindingsObject(*i)

	err = json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	var m map[string]json.RawMessage

	err = json.Unmarshal(data, &m)
	if err != nil {
		m = nil
	}

	if ii.HTTP == nil {
		if _, ok := m["http"]; ok {
			var v interface{}
			ii.HTTP = &v
		}
	}

	if ii.Ws == nil {
		if _, ok := m["ws"]; ok {
			var v interface{}
			ii.Ws = &v
		}
	}

	if ii.Amqp == nil {
		if _, ok := m["amqp"]; ok {
			var v interface{}
			ii.Amqp = &v
		}
	}

	if ii.Amqp1 == nil {
		if _, ok := m["amqp1"]; ok {
			var v interface{}
			ii.Amqp1 = &v
		}
	}

	if ii.Mqtt == nil {
		if _, ok := m["mqtt"]; ok {
			var v interface{}
			ii.Mqtt = &v
		}
	}

	if ii.Mqtt5 == nil {
		if _, ok := m["mqtt5"]; ok {
			var v interface{}
			ii.Mqtt5 = &v
		}
	}

	if ii.Kafka == nil {
		if _, ok := m["kafka"]; ok {
			var v interface{}
			ii.Kafka = &v
		}
	}

	if ii.Nats == nil {
		if _, ok := m["nats"]; ok {
			var v interface{}
			ii.Nats = &v
		}
	}

	if ii.Jms == nil {
		if _, ok := m["jms"]; ok {
			var v interface{}
			ii.Jms = &v
		}
	}

	if ii.Sns == nil {
		if _, ok := m["sns"]; ok {
			var v interface{}
			ii.Sns = &v
		}
	}

	if ii.Sqs == nil {
		if _, ok := m["sqs"]; ok {
			var v interface{}
			ii.Sqs = &v
		}
	}

	if ii.Stomp == nil {
		if _, ok := m["stomp"]; ok {
			var v interface{}
			ii.Stomp = &v
		}
	}

	if ii.Redis == nil {
		if _, ok := m["redis"]; ok {
			var v interface{}
			ii.Redis = &v
		}
	}

	for _, key := range ignoreKeysServerBindingsObject {
		delete(m, key)
	}

	for key, rawValue := range m {
		if ii.AdditionalProperties == nil {
			ii.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ii.AdditionalProperties[key] = val
	}

	*i = ServerBindingsObject(ii)

	return nil
}

// MarshalJSON encodes JSON.
func (i ServerBindingsObject) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalServerBindingsObject(i), i.AdditionalProperties)
}

// ChannelItem structure is generated from "#/definitions/channelItem".
type ChannelItem struct {
	Ref           string                 `json:"$ref,omitempty"`
	Parameters    map[string]Parameter   `json:"parameters,omitempty"`
	Description   string                 `json:"description,omitempty"` // A description of the channel.
	Publish       *Operation             `json:"publish,omitempty"`
	Subscribe     *Operation             `json:"subscribe,omitempty"`
	Deprecated    bool                   `json:"deprecated,omitempty"`
	Bindings      *ChannelBindingsObject `json:"bindings,omitempty"`
	MapOfAnything map[string]interface{} `json:"-"` // Key must match pattern: ^x-[\w\d\.\-\_]+$
}

// WithRef sets Ref value.
func (v *ChannelItem) WithRef(val string) *ChannelItem {
	v.Ref = val
	return v
}

// WithParameters sets Parameters value.
func (v *ChannelItem) WithParameters(val map[string]Parameter) *ChannelItem {
	v.Parameters = val
	return v
}

// WithDescription sets Description value.
func (v *ChannelItem) WithDescription(val string) *ChannelItem {
	v.Description = val
	return v
}

// WithPublish sets Publish value.
func (v *ChannelItem) WithPublish(val Operation) *ChannelItem {
	v.Publish = &val
	return v
}

// WithSubscribe sets Subscribe value.
func (v *ChannelItem) WithSubscribe(val Operation) *ChannelItem {
	v.Subscribe = &val
	return v
}

// WithDeprecated sets Deprecated value.
func (v *ChannelItem) WithDeprecated(val bool) *ChannelItem {
	v.Deprecated = val
	return v
}

// WithBindings sets Bindings value.
func (v *ChannelItem) WithBindings(val ChannelBindingsObject) *ChannelItem {
	v.Bindings = &val
	return v
}

// WithMapOfAnything sets MapOfAnything value.
func (v *ChannelItem) WithMapOfAnything(val map[string]interface{}) *ChannelItem {
	v.MapOfAnything = val
	return v
}

type marshalChannelItem ChannelItem

var ignoreKeysChannelItem = []string{
	"$ref",
	"parameters",
	"description",
	"publish",
	"subscribe",
	"deprecated",
	"bindings",
}

// UnmarshalJSON decodes JSON.
func (i *ChannelItem) UnmarshalJSON(data []byte) error {
	var err error

	ii := marshalChannelItem(*i)

	err = json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	var m map[string]json.RawMessage

	err = json.Unmarshal(data, &m)
	if err != nil {
		m = nil
	}

	for _, key := range ignoreKeysChannelItem {
		delete(m, key)
	}

	for key, rawValue := range m {
		matched := false

		if regexXWD.MatchString(key) {
			matched = true

			if ii.MapOfAnything == nil {
				ii.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			ii.MapOfAnything[key] = val
		}

		if matched {
			delete(m, key)
		}
	}

	*i = ChannelItem(ii)

	return nil
}

// MarshalJSON encodes JSON.
func (i ChannelItem) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalChannelItem(i), i.MapOfAnything)
}

// Parameter structure is generated from "#/definitions/parameter".
type Parameter struct {
	Description   string                 `json:"description,omitempty"` // A brief description of the parameter. This could contain examples of use. GitHub Flavored Markdown is allowed.
	Schema        map[string]interface{} `json:"schema,omitempty"`
	Location      string                 `json:"location,omitempty"` // A runtime expression that specifies the location of the parameter value
	Ref           string                 `json:"$ref,omitempty"`
	MapOfAnything map[string]interface{} `json:"-"` // Key must match pattern: ^x-[\w\d\.\-\_]+$
}

// WithDescription sets Description value.
func (v *Parameter) WithDescription(val string) *Parameter {
	v.Description = val
	return v
}

// WithSchema sets Schema value.
func (v *Parameter) WithSchema(val map[string]interface{}) *Parameter {
	v.Schema = val
	return v
}

// WithLocation sets Location value.
func (v *Parameter) WithLocation(val string) *Parameter {
	v.Location = val
	return v
}

// WithRef sets Ref value.
func (v *Parameter) WithRef(val string) *Parameter {
	v.Ref = val
	return v
}

// WithMapOfAnything sets MapOfAnything value.
func (v *Parameter) WithMapOfAnything(val map[string]interface{}) *Parameter {
	v.MapOfAnything = val
	return v
}

type marshalParameter Parameter

var ignoreKeysParameter = []string{
	"description",
	"schema",
	"location",
	"$ref",
}

// UnmarshalJSON decodes JSON.
func (i *Parameter) UnmarshalJSON(data []byte) error {
	var err error

	ii := marshalParameter(*i)

	err = json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	var m map[string]json.RawMessage

	err = json.Unmarshal(data, &m)
	if err != nil {
		m = nil
	}

	for _, key := range ignoreKeysParameter {
		delete(m, key)
	}

	for key, rawValue := range m {
		matched := false

		if regexXWD.MatchString(key) {
			matched = true

			if ii.MapOfAnything == nil {
				ii.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			ii.MapOfAnything[key] = val
		}

		if matched {
			delete(m, key)
		}
	}

	*i = Parameter(ii)

	return nil
}

// MarshalJSON encodes JSON.
func (i Parameter) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalParameter(i), i.MapOfAnything)
}

// Operation structure is generated from "#/definitions/operation".
type Operation struct {
	Traits        []OperationTraitsItems   `json:"traits,omitempty"`
	Summary       string                   `json:"summary,omitempty"`
	Description   string                   `json:"description,omitempty"`
	Tags          []Tag                    `json:"tags,omitempty"`
	ExternalDocs  *ExternalDocs            `json:"externalDocs,omitempty"` // information about external documentation
	ID            string                   `json:"operationId,omitempty"`
	Bindings      *OperationBindingsObject `json:"bindings,omitempty"`
	Message       *Message                 `json:"message,omitempty"`
	MapOfAnything map[string]interface{}   `json:"-"` // Key must match pattern: ^x-[\w\d\.\-\_]+$
}

// WithTraits sets Traits value.
func (v *Operation) WithTraits(val ...OperationTraitsItems) *Operation {
	v.Traits = val
	return v
}

// WithSummary sets Summary value.
func (v *Operation) WithSummary(val string) *Operation {
	v.Summary = val
	return v
}

// WithDescription sets Description value.
func (v *Operation) WithDescription(val string) *Operation {
	v.Description = val
	return v
}

// WithTags sets Tags value.
func (v *Operation) WithTags(val ...Tag) *Operation {
	v.Tags = val
	return v
}

// WithExternalDocs sets ExternalDocs value.
func (v *Operation) WithExternalDocs(val ExternalDocs) *Operation {
	v.ExternalDocs = &val
	return v
}

// WithID sets ID value.
func (v *Operation) WithID(val string) *Operation {
	v.ID = val
	return v
}

// WithBindings sets Bindings value.
func (v *Operation) WithBindings(val OperationBindingsObject) *Operation {
	v.Bindings = &val
	return v
}

// WithMessage sets Message value.
func (v *Operation) WithMessage(val Message) *Operation {
	v.Message = &val
	return v
}

// WithMapOfAnything sets MapOfAnything value.
func (v *Operation) WithMapOfAnything(val map[string]interface{}) *Operation {
	v.MapOfAnything = val
	return v
}

type marshalOperation Operation

var ignoreKeysOperation = []string{
	"traits",
	"summary",
	"description",
	"tags",
	"externalDocs",
	"operationId",
	"bindings",
	"message",
}

// UnmarshalJSON decodes JSON.
func (i *Operation) UnmarshalJSON(data []byte) error {
	var err error

	ii := marshalOperation(*i)

	err = json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	var m map[string]json.RawMessage

	err = json.Unmarshal(data, &m)
	if err != nil {
		m = nil
	}

	for _, key := range ignoreKeysOperation {
		delete(m, key)
	}

	for key, rawValue := range m {
		matched := false

		if regexXWD.MatchString(key) {
			matched = true

			if ii.MapOfAnything == nil {
				ii.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			ii.MapOfAnything[key] = val
		}

		if matched {
			delete(m, key)
		}
	}

	*i = Operation(ii)

	return nil
}

// MarshalJSON encodes JSON.
func (i Operation) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalOperation(i), i.MapOfAnything)
}

// Reference structure is generated from "#/definitions/Reference".
type Reference struct {
	Ref string `json:"$ref,omitempty"`
}

// WithRef sets Ref value.
func (v *Reference) WithRef(val string) *Reference {
	v.Ref = val
	return v
}

// OperationTrait structure is generated from "#/definitions/operationTrait".
type OperationTrait struct {
	Summary       string                   `json:"summary,omitempty"`
	Description   string                   `json:"description,omitempty"`
	Tags          []Tag                    `json:"tags,omitempty"`
	ExternalDocs  *ExternalDocs            `json:"externalDocs,omitempty"` // information about external documentation
	OperationID   string                   `json:"operationId,omitempty"`
	Bindings      *OperationBindingsObject `json:"bindings,omitempty"`
	MapOfAnything map[string]interface{}   `json:"-"` // Key must match pattern: ^x-[\w\d\.\-\_]+$
}

// WithSummary sets Summary value.
func (v *OperationTrait) WithSummary(val string) *OperationTrait {
	v.Summary = val
	return v
}

// WithDescription sets Description value.
func (v *OperationTrait) WithDescription(val string) *OperationTrait {
	v.Description = val
	return v
}

// WithTags sets Tags value.
func (v *OperationTrait) WithTags(val ...Tag) *OperationTrait {
	v.Tags = val
	return v
}

// WithExternalDocs sets ExternalDocs value.
func (v *OperationTrait) WithExternalDocs(val ExternalDocs) *OperationTrait {
	v.ExternalDocs = &val
	return v
}

// WithOperationID sets OperationID value.
func (v *OperationTrait) WithOperationID(val string) *OperationTrait {
	v.OperationID = val
	return v
}

// WithBindings sets Bindings value.
func (v *OperationTrait) WithBindings(val OperationBindingsObject) *OperationTrait {
	v.Bindings = &val
	return v
}

// WithMapOfAnything sets MapOfAnything value.
func (v *OperationTrait) WithMapOfAnything(val map[string]interface{}) *OperationTrait {
	v.MapOfAnything = val
	return v
}

type marshalOperationTrait OperationTrait

var ignoreKeysOperationTrait = []string{
	"summary",
	"description",
	"tags",
	"externalDocs",
	"operationId",
	"bindings",
}

// UnmarshalJSON decodes JSON.
func (i *OperationTrait) UnmarshalJSON(data []byte) error {
	var err error

	ii := marshalOperationTrait(*i)

	err = json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	var m map[string]json.RawMessage

	err = json.Unmarshal(data, &m)
	if err != nil {
		m = nil
	}

	for _, key := range ignoreKeysOperationTrait {
		delete(m, key)
	}

	for key, rawValue := range m {
		matched := false

		if regexXWD.MatchString(key) {
			matched = true

			if ii.MapOfAnything == nil {
				ii.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			ii.MapOfAnything[key] = val
		}

		if matched {
			delete(m, key)
		}
	}

	*i = OperationTrait(ii)

	return nil
}

// MarshalJSON encodes JSON.
func (i OperationTrait) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalOperationTrait(i), i.MapOfAnything)
}

// Tag structure is generated from "#/definitions/tag".
type Tag struct {
	Name          string                 `json:"name,omitempty"`
	Description   string                 `json:"description,omitempty"`
	ExternalDocs  *ExternalDocs          `json:"externalDocs,omitempty"` // information about external documentation
	MapOfAnything map[string]interface{} `json:"-"`                      // Key must match pattern: ^x-[\w\d\.\-\_]+$
}

// WithName sets Name value.
func (v *Tag) WithName(val string) *Tag {
	v.Name = val
	return v
}

// WithDescription sets Description value.
func (v *Tag) WithDescription(val string) *Tag {
	v.Description = val
	return v
}

// WithExternalDocs sets ExternalDocs value.
func (v *Tag) WithExternalDocs(val ExternalDocs) *Tag {
	v.ExternalDocs = &val
	return v
}

// WithMapOfAnything sets MapOfAnything value.
func (v *Tag) WithMapOfAnything(val map[string]interface{}) *Tag {
	v.MapOfAnything = val
	return v
}

type marshalTag Tag

var ignoreKeysTag = []string{
	"name",
	"description",
	"externalDocs",
}

// UnmarshalJSON decodes JSON.
func (i *Tag) UnmarshalJSON(data []byte) error {
	var err error

	ii := marshalTag(*i)

	err = json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	var m map[string]json.RawMessage

	err = json.Unmarshal(data, &m)
	if err != nil {
		m = nil
	}

	for _, key := range ignoreKeysTag {
		delete(m, key)
	}

	for key, rawValue := range m {
		matched := false

		if regexXWD.MatchString(key) {
			matched = true

			if ii.MapOfAnything == nil {
				ii.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			ii.MapOfAnything[key] = val
		}

		if matched {
			delete(m, key)
		}
	}

	*i = Tag(ii)

	return nil
}

// MarshalJSON encodes JSON.
func (i Tag) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalTag(i), i.MapOfAnything)
}

// ExternalDocs structure is generated from "#/definitions/externalDocs".
//
// information about external documentation.
type ExternalDocs struct {
	Description   string                 `json:"description,omitempty"`
	URL           string                 `json:"url,omitempty"`
	MapOfAnything map[string]interface{} `json:"-"` // Key must match pattern: ^x-[\w\d\.\-\_]+$
}

// WithDescription sets Description value.
func (v *ExternalDocs) WithDescription(val string) *ExternalDocs {
	v.Description = val
	return v
}

// WithURL sets URL value.
func (v *ExternalDocs) WithURL(val string) *ExternalDocs {
	v.URL = val
	return v
}

// WithMapOfAnything sets MapOfAnything value.
func (v *ExternalDocs) WithMapOfAnything(val map[string]interface{}) *ExternalDocs {
	v.MapOfAnything = val
	return v
}

type marshalExternalDocs ExternalDocs

var ignoreKeysExternalDocs = []string{
	"description",
	"url",
}

// UnmarshalJSON decodes JSON.
func (i *ExternalDocs) UnmarshalJSON(data []byte) error {
	var err error

	ii := marshalExternalDocs(*i)

	err = json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	var m map[string]json.RawMessage

	err = json.Unmarshal(data, &m)
	if err != nil {
		m = nil
	}

	for _, key := range ignoreKeysExternalDocs {
		delete(m, key)
	}

	for key, rawValue := range m {
		matched := false

		if regexXWD.MatchString(key) {
			matched = true

			if ii.MapOfAnything == nil {
				ii.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			ii.MapOfAnything[key] = val
		}

		if matched {
			delete(m, key)
		}
	}

	*i = ExternalDocs(ii)

	return nil
}

// MarshalJSON encodes JSON.
func (i ExternalDocs) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalExternalDocs(i), i.MapOfAnything)
}

// OperationBindingsObject structure is generated from "#/definitions/operationBindingsObject".
type OperationBindingsObject struct {
	HTTP *interface{} `json:"http,omitempty"`
	Ws   *interface{} `json:"ws,omitempty"`
	// AMQP 0-9-1 Operation Binding Object
	// This object contains information about the operation representation in AMQP.
	// See https://github.com/asyncapi/bindings/tree/master/amqp#operation-binding-object.
	Amqp                 *AMQP091OperationBindingObject `json:"amqp,omitempty"`
	Amqp1                *interface{}                   `json:"amqp1,omitempty"`
	Mqtt                 *interface{}                   `json:"mqtt,omitempty"`
	Mqtt5                *interface{}                   `json:"mqtt5,omitempty"`
	Kafka                *interface{}                   `json:"kafka,omitempty"`
	Nats                 *interface{}                   `json:"nats,omitempty"`
	Jms                  *interface{}                   `json:"jms,omitempty"`
	Sns                  *interface{}                   `json:"sns,omitempty"`
	Sqs                  *interface{}                   `json:"sqs,omitempty"`
	Stomp                *interface{}                   `json:"stomp,omitempty"`
	Redis                *interface{}                   `json:"redis,omitempty"`
	AdditionalProperties map[string]interface{}         `json:"-"` // All unmatched properties
}

// WithHTTP sets HTTP value.
func (v *OperationBindingsObject) WithHTTP(val interface{}) *OperationBindingsObject {
	v.HTTP = &val
	return v
}

// WithWs sets Ws value.
func (v *OperationBindingsObject) WithWs(val interface{}) *OperationBindingsObject {
	v.Ws = &val
	return v
}

// WithAmqp sets Amqp value.
func (v *OperationBindingsObject) WithAmqp(val AMQP091OperationBindingObject) *OperationBindingsObject {
	v.Amqp = &val
	return v
}

// WithAmqp1 sets Amqp1 value.
func (v *OperationBindingsObject) WithAmqp1(val interface{}) *OperationBindingsObject {
	v.Amqp1 = &val
	return v
}

// WithMqtt sets Mqtt value.
func (v *OperationBindingsObject) WithMqtt(val interface{}) *OperationBindingsObject {
	v.Mqtt = &val
	return v
}

// WithMqtt5 sets Mqtt5 value.
func (v *OperationBindingsObject) WithMqtt5(val interface{}) *OperationBindingsObject {
	v.Mqtt5 = &val
	return v
}

// WithKafka sets Kafka value.
func (v *OperationBindingsObject) WithKafka(val interface{}) *OperationBindingsObject {
	v.Kafka = &val
	return v
}

// WithNats sets Nats value.
func (v *OperationBindingsObject) WithNats(val interface{}) *OperationBindingsObject {
	v.Nats = &val
	return v
}

// WithJms sets Jms value.
func (v *OperationBindingsObject) WithJms(val interface{}) *OperationBindingsObject {
	v.Jms = &val
	return v
}

// WithSns sets Sns value.
func (v *OperationBindingsObject) WithSns(val interface{}) *OperationBindingsObject {
	v.Sns = &val
	return v
}

// WithSqs sets Sqs value.
func (v *OperationBindingsObject) WithSqs(val interface{}) *OperationBindingsObject {
	v.Sqs = &val
	return v
}

// WithStomp sets Stomp value.
func (v *OperationBindingsObject) WithStomp(val interface{}) *OperationBindingsObject {
	v.Stomp = &val
	return v
}

// WithRedis sets Redis value.
func (v *OperationBindingsObject) WithRedis(val interface{}) *OperationBindingsObject {
	v.Redis = &val
	return v
}

// WithAdditionalProperties sets AdditionalProperties value.
func (v *OperationBindingsObject) WithAdditionalProperties(val map[string]interface{}) *OperationBindingsObject {
	v.AdditionalProperties = val
	return v
}

type marshalOperationBindingsObject OperationBindingsObject

var ignoreKeysOperationBindingsObject = []string{
	"http",
	"ws",
	"amqp",
	"amqp1",
	"mqtt",
	"mqtt5",
	"kafka",
	"nats",
	"jms",
	"sns",
	"sqs",
	"stomp",
	"redis",
}

// UnmarshalJSON decodes JSON.
func (i *OperationBindingsObject) UnmarshalJSON(data []byte) error {
	var err error

	ii := marshalOperationBindingsObject(*i)

	err = json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	var m map[string]json.RawMessage

	err = json.Unmarshal(data, &m)
	if err != nil {
		m = nil
	}

	if ii.HTTP == nil {
		if _, ok := m["http"]; ok {
			var v interface{}
			ii.HTTP = &v
		}
	}

	if ii.Ws == nil {
		if _, ok := m["ws"]; ok {
			var v interface{}
			ii.Ws = &v
		}
	}

	if ii.Amqp1 == nil {
		if _, ok := m["amqp1"]; ok {
			var v interface{}
			ii.Amqp1 = &v
		}
	}

	if ii.Mqtt == nil {
		if _, ok := m["mqtt"]; ok {
			var v interface{}
			ii.Mqtt = &v
		}
	}

	if ii.Mqtt5 == nil {
		if _, ok := m["mqtt5"]; ok {
			var v interface{}
			ii.Mqtt5 = &v
		}
	}

	if ii.Kafka == nil {
		if _, ok := m["kafka"]; ok {
			var v interface{}
			ii.Kafka = &v
		}
	}

	if ii.Nats == nil {
		if _, ok := m["nats"]; ok {
			var v interface{}
			ii.Nats = &v
		}
	}

	if ii.Jms == nil {
		if _, ok := m["jms"]; ok {
			var v interface{}
			ii.Jms = &v
		}
	}

	if ii.Sns == nil {
		if _, ok := m["sns"]; ok {
			var v interface{}
			ii.Sns = &v
		}
	}

	if ii.Sqs == nil {
		if _, ok := m["sqs"]; ok {
			var v interface{}
			ii.Sqs = &v
		}
	}

	if ii.Stomp == nil {
		if _, ok := m["stomp"]; ok {
			var v interface{}
			ii.Stomp = &v
		}
	}

	if ii.Redis == nil {
		if _, ok := m["redis"]; ok {
			var v interface{}
			ii.Redis = &v
		}
	}

	for _, key := range ignoreKeysOperationBindingsObject {
		delete(m, key)
	}

	for key, rawValue := range m {
		if ii.AdditionalProperties == nil {
			ii.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ii.AdditionalProperties[key] = val
	}

	*i = OperationBindingsObject(ii)

	return nil
}

// MarshalJSON encodes JSON.
func (i OperationBindingsObject) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalOperationBindingsObject(i), i.AdditionalProperties)
}

// AMQP091OperationBindingObject structure is generated from "amqp-operation-binding-object-0.1.0.json".
//
// AMQP 0-9-1 Operation Binding Object.
//
// This object contains information about the operation representation in AMQP.
// See https://github.com/asyncapi/bindings/tree/master/amqp#operation-binding-object.
type AMQP091OperationBindingObject struct {
	Expiration     int64                                       `json:"expiration,omitempty"`     // TTL (Time-To-Live) for the message. It MUST be greater than or equal to zero. Applies to Publish, Subscribe.
	UserID         string                                      `json:"userId,omitempty"`         // Identifies the user who has sent the message. Applies to Publish, Subscribe.
	Cc             []string                                    `json:"cc,omitempty"`             // The routing keys the message should be routed to at the time of publishing. Applies to Publish, Subscribe.
	Priority       int64                                       `json:"priority,omitempty"`       // A priority for the message. Applies to Publish, Subscribe.
	DeliveryMode   AMQP091OperationBindingObjectDeliveryMode   `json:"deliveryMode,omitempty"`   // Delivery mode of the message. Its value MUST be either 1 (transient) or 2 (persistent). Applies to Publish, Subscribe.
	Mandatory      bool                                        `json:"mandatory,omitempty"`      // Whether the message is mandatory or not. Applies to Publish.
	Bcc            []string                                    `json:"bcc,omitempty"`            // Like cc but consumers will not receive this information. Applies to Publish.
	ReplyTo        string                                      `json:"replyTo,omitempty"`        // Name of the queue where the consumer should send the response. Applies to Publish, Subscribe.
	Timestamp      bool                                        `json:"timestamp,omitempty"`      // Whether the message should include a timestamp or not. Applies to Publish, Subscribe.
	Ack            bool                                        `json:"ack,omitempty"`            // Whether the consumer should ack the message or not. Applies to Subscribe.
	BindingVersion AMQP091OperationBindingObjectBindingVersion `json:"bindingVersion,omitempty"` // The version of this binding. If omitted, "latest" MUST be assumed. Applies to Publish, Subscribe.
}

// WithExpiration sets Expiration value.
func (v *AMQP091OperationBindingObject) WithExpiration(val int64) *AMQP091OperationBindingObject {
	v.Expiration = val
	return v
}

// WithUserID sets UserID value.
func (v *AMQP091OperationBindingObject) WithUserID(val string) *AMQP091OperationBindingObject {
	v.UserID = val
	return v
}

// WithCc sets Cc value.
func (v *AMQP091OperationBindingObject) WithCc(val ...string) *AMQP091OperationBindingObject {
	v.Cc = val
	return v
}

// WithPriority sets Priority value.
func (v *AMQP091OperationBindingObject) WithPriority(val int64) *AMQP091OperationBindingObject {
	v.Priority = val
	return v
}

// WithDeliveryMode sets DeliveryMode value.
func (v *AMQP091OperationBindingObject) WithDeliveryMode(val AMQP091OperationBindingObjectDeliveryMode) *AMQP091OperationBindingObject {
	v.DeliveryMode = val
	return v
}

// WithMandatory sets Mandatory value.
func (v *AMQP091OperationBindingObject) WithMandatory(val bool) *AMQP091OperationBindingObject {
	v.Mandatory = val
	return v
}

// WithBcc sets Bcc value.
func (v *AMQP091OperationBindingObject) WithBcc(val ...string) *AMQP091OperationBindingObject {
	v.Bcc = val
	return v
}

// WithReplyTo sets ReplyTo value.
func (v *AMQP091OperationBindingObject) WithReplyTo(val string) *AMQP091OperationBindingObject {
	v.ReplyTo = val
	return v
}

// WithTimestamp sets Timestamp value.
func (v *AMQP091OperationBindingObject) WithTimestamp(val bool) *AMQP091OperationBindingObject {
	v.Timestamp = val
	return v
}

// WithAck sets Ack value.
func (v *AMQP091OperationBindingObject) WithAck(val bool) *AMQP091OperationBindingObject {
	v.Ack = val
	return v
}

// WithBindingVersion sets BindingVersion value.
func (v *AMQP091OperationBindingObject) WithBindingVersion(val AMQP091OperationBindingObjectBindingVersion) *AMQP091OperationBindingObject {
	v.BindingVersion = val
	return v
}

// OperationTraitsItems structure is generated from "#/definitions/operation->traits->items".
type OperationTraitsItems struct {
	Reference       *Reference      `json:"-"`
	OperationTrait  *OperationTrait `json:"-"`
	SliceOfAnything []interface{}   `json:"-"`
}

// WithReference sets Reference value.
func (v *OperationTraitsItems) WithReference(val Reference) *OperationTraitsItems {
	v.Reference = &val
	return v
}

// WithOperationTrait sets OperationTrait value.
func (v *OperationTraitsItems) WithOperationTrait(val OperationTrait) *OperationTraitsItems {
	v.OperationTrait = &val
	return v
}

// WithSliceOfAnything sets SliceOfAnything value.
func (v *OperationTraitsItems) WithSliceOfAnything(val ...interface{}) *OperationTraitsItems {
	v.SliceOfAnything = val
	return v
}

// UnmarshalJSON decodes JSON.
func (i *OperationTraitsItems) UnmarshalJSON(data []byte) error {
	var err error

	err = json.Unmarshal(data, &i.Reference)
	if err != nil {
		i.Reference = nil
	}

	err = json.Unmarshal(data, &i.OperationTrait)
	if err != nil {
		i.OperationTrait = nil
	}

	err = json.Unmarshal(data, &i.SliceOfAnything)
	if err != nil {
		i.SliceOfAnything = nil
	}

	return nil
}

// MarshalJSON encodes JSON.
func (i OperationTraitsItems) MarshalJSON() ([]byte, error) {
	return marshalUnion(i.Reference, i.OperationTrait, i.SliceOfAnything)
}

// MessageEntities structure is generated from "#/definitions/messageEntities".
type MessageEntities struct {
	OneOf []Message `json:"oneOf,omitempty"`
}

// WithOneOf sets OneOf value.
func (v *MessageEntities) WithOneOf(val ...Message) *MessageEntities {
	v.OneOf = val
	return v
}

// MessageEntity structure is generated from "#/definitions/messageEntity".
type MessageEntity struct {
	SchemaFormat  string                      `json:"schemaFormat,omitempty"`
	ContentType   string                      `json:"contentType,omitempty"`
	Headers       map[string]interface{}      `json:"headers,omitempty"`
	Payload       map[string]interface{}      `json:"payload,omitempty"`
	CorrelationID *MessageEntityCorrelationID `json:"correlationId,omitempty"`
	Tags          []Tag                       `json:"tags,omitempty"`
	Summary       string                      `json:"summary,omitempty"`      // A brief summary of the message.
	Name          string                      `json:"name,omitempty"`         // Name of the message.
	Title         string                      `json:"title,omitempty"`        // A human-friendly title for the message.
	Description   string                      `json:"description,omitempty"`  // A longer description of the message. CommonMark is allowed.
	ExternalDocs  *ExternalDocs               `json:"externalDocs,omitempty"` // information about external documentation
	Deprecated    bool                        `json:"deprecated,omitempty"`
	Examples      []map[string]interface{}    `json:"examples,omitempty"`
	Bindings      *MessageBindingsObject      `json:"bindings,omitempty"`
	Traits        []MessageEntityTraitsItems  `json:"traits,omitempty"`
	MapOfAnything map[string]interface{}      `json:"-"` // Key must match pattern: ^x-[\w\d\.\-\_]+$
}

// WithSchemaFormat sets SchemaFormat value.
func (v *MessageEntity) WithSchemaFormat(val string) *MessageEntity {
	v.SchemaFormat = val
	return v
}

// WithContentType sets ContentType value.
func (v *MessageEntity) WithContentType(val string) *MessageEntity {
	v.ContentType = val
	return v
}

// WithHeaders sets Headers value.
func (v *MessageEntity) WithHeaders(val map[string]interface{}) *MessageEntity {
	v.Headers = val
	return v
}

// WithPayload sets Payload value.
func (v *MessageEntity) WithPayload(val map[string]interface{}) *MessageEntity {
	v.Payload = val
	return v
}

// WithCorrelationID sets CorrelationID value.
func (v *MessageEntity) WithCorrelationID(val MessageEntityCorrelationID) *MessageEntity {
	v.CorrelationID = &val
	return v
}

// WithTags sets Tags value.
func (v *MessageEntity) WithTags(val ...Tag) *MessageEntity {
	v.Tags = val
	return v
}

// WithSummary sets Summary value.
func (v *MessageEntity) WithSummary(val string) *MessageEntity {
	v.Summary = val
	return v
}

// WithName sets Name value.
func (v *MessageEntity) WithName(val string) *MessageEntity {
	v.Name = val
	return v
}

// WithTitle sets Title value.
func (v *MessageEntity) WithTitle(val string) *MessageEntity {
	v.Title = val
	return v
}

// WithDescription sets Description value.
func (v *MessageEntity) WithDescription(val string) *MessageEntity {
	v.Description = val
	return v
}

// WithExternalDocs sets ExternalDocs value.
func (v *MessageEntity) WithExternalDocs(val ExternalDocs) *MessageEntity {
	v.ExternalDocs = &val
	return v
}

// WithDeprecated sets Deprecated value.
func (v *MessageEntity) WithDeprecated(val bool) *MessageEntity {
	v.Deprecated = val
	return v
}

// WithExamples sets Examples value.
func (v *MessageEntity) WithExamples(val ...map[string]interface{}) *MessageEntity {
	v.Examples = val
	return v
}

// WithBindings sets Bindings value.
func (v *MessageEntity) WithBindings(val MessageBindingsObject) *MessageEntity {
	v.Bindings = &val
	return v
}

// WithTraits sets Traits value.
func (v *MessageEntity) WithTraits(val ...MessageEntityTraitsItems) *MessageEntity {
	v.Traits = val
	return v
}

// WithMapOfAnything sets MapOfAnything value.
func (v *MessageEntity) WithMapOfAnything(val map[string]interface{}) *MessageEntity {
	v.MapOfAnything = val
	return v
}

type marshalMessageEntity MessageEntity

var ignoreKeysMessageEntity = []string{
	"schemaFormat",
	"contentType",
	"headers",
	"payload",
	"correlationId",
	"tags",
	"summary",
	"name",
	"title",
	"description",
	"externalDocs",
	"deprecated",
	"examples",
	"bindings",
	"traits",
}

// UnmarshalJSON decodes JSON.
func (i *MessageEntity) UnmarshalJSON(data []byte) error {
	var err error

	ii := marshalMessageEntity(*i)

	err = json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	var m map[string]json.RawMessage

	err = json.Unmarshal(data, &m)
	if err != nil {
		m = nil
	}

	for _, key := range ignoreKeysMessageEntity {
		delete(m, key)
	}

	for key, rawValue := range m {
		matched := false

		if regexXWD.MatchString(key) {
			matched = true

			if ii.MapOfAnything == nil {
				ii.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			ii.MapOfAnything[key] = val
		}

		if matched {
			delete(m, key)
		}
	}

	*i = MessageEntity(ii)

	return nil
}

// MarshalJSON encodes JSON.
func (i MessageEntity) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalMessageEntity(i), i.MapOfAnything)
}

// CorrelationID structure is generated from "#/definitions/correlationId".
type CorrelationID struct {
	Description   string                 `json:"description,omitempty"` // A optional description of the correlation ID. GitHub Flavored Markdown is allowed.
	Location      string                 `json:"location,omitempty"`    // A runtime expression that specifies the location of the correlation ID
	MapOfAnything map[string]interface{} `json:"-"`                     // Key must match pattern: ^x-[\w\d\.\-\_]+$
}

// WithDescription sets Description value.
func (v *CorrelationID) WithDescription(val string) *CorrelationID {
	v.Description = val
	return v
}

// WithLocation sets Location value.
func (v *CorrelationID) WithLocation(val string) *CorrelationID {
	v.Location = val
	return v
}

// WithMapOfAnything sets MapOfAnything value.
func (v *CorrelationID) WithMapOfAnything(val map[string]interface{}) *CorrelationID {
	v.MapOfAnything = val
	return v
}

type marshalCorrelationID CorrelationID

var ignoreKeysCorrelationID = []string{
	"description",
	"location",
}

// UnmarshalJSON decodes JSON.
func (i *CorrelationID) UnmarshalJSON(data []byte) error {
	var err error

	ii := marshalCorrelationID(*i)

	err = json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	var m map[string]json.RawMessage

	err = json.Unmarshal(data, &m)
	if err != nil {
		m = nil
	}

	for _, key := range ignoreKeysCorrelationID {
		delete(m, key)
	}

	for key, rawValue := range m {
		matched := false

		if regexXWD.MatchString(key) {
			matched = true

			if ii.MapOfAnything == nil {
				ii.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			ii.MapOfAnything[key] = val
		}

		if matched {
			delete(m, key)
		}
	}

	*i = CorrelationID(ii)

	return nil
}

// MarshalJSON encodes JSON.
func (i CorrelationID) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalCorrelationID(i), i.MapOfAnything)
}

// MessageEntityCorrelationID structure is generated from "#/definitions/messageEntity->correlationId".
type MessageEntityCorrelationID struct {
	Reference     *Reference     `json:"-"`
	CorrelationID *CorrelationID `json:"-"`
}

// WithReference sets Reference value.
func (v *MessageEntityCorrelationID) WithReference(val Reference) *MessageEntityCorrelationID {
	v.Reference = &val
	return v
}

// WithCorrelationID sets CorrelationID value.
func (v *MessageEntityCorrelationID) WithCorrelationID(val CorrelationID) *MessageEntityCorrelationID {
	v.CorrelationID = &val
	return v
}

// UnmarshalJSON decodes JSON.
func (i *MessageEntityCorrelationID) UnmarshalJSON(data []byte) error {
	var err error

	err = json.Unmarshal(data, &i.Reference)
	if err != nil {
		i.Reference = nil
	}

	err = json.Unmarshal(data, &i.CorrelationID)
	if err != nil {
		i.CorrelationID = nil
	}

	return nil
}

// MarshalJSON encodes JSON.
func (i MessageEntityCorrelationID) MarshalJSON() ([]byte, error) {
	return marshalUnion(i.Reference, i.CorrelationID)
}

// MessageBindingsObject structure is generated from "#/definitions/messageBindingsObject".
type MessageBindingsObject struct {
	HTTP *interface{} `json:"http,omitempty"`
	Ws   *interface{} `json:"ws,omitempty"`
	// AMQP 0-9-1 Message Binding Object
	// This object contains information about the message representation in AMQP.
	// See https://github.com/asyncapi/bindings/tree/master/amqp#message-binding-object.
	Amqp                 *AMQP091MessageBindingObject `json:"amqp,omitempty"`
	Amqp1                *interface{}                 `json:"amqp1,omitempty"`
	Mqtt                 *interface{}                 `json:"mqtt,omitempty"`
	Mqtt5                *interface{}                 `json:"mqtt5,omitempty"`
	Kafka                *interface{}                 `json:"kafka,omitempty"`
	Nats                 *interface{}                 `json:"nats,omitempty"`
	Jms                  *interface{}                 `json:"jms,omitempty"`
	Sns                  *interface{}                 `json:"sns,omitempty"`
	Sqs                  *interface{}                 `json:"sqs,omitempty"`
	Stomp                *interface{}                 `json:"stomp,omitempty"`
	Redis                *interface{}                 `json:"redis,omitempty"`
	AdditionalProperties map[string]interface{}       `json:"-"` // All unmatched properties
}

// WithHTTP sets HTTP value.
func (v *MessageBindingsObject) WithHTTP(val interface{}) *MessageBindingsObject {
	v.HTTP = &val
	return v
}

// WithWs sets Ws value.
func (v *MessageBindingsObject) WithWs(val interface{}) *MessageBindingsObject {
	v.Ws = &val
	return v
}

// WithAmqp sets Amqp value.
func (v *MessageBindingsObject) WithAmqp(val AMQP091MessageBindingObject) *MessageBindingsObject {
	v.Amqp = &val
	return v
}

// WithAmqp1 sets Amqp1 value.
func (v *MessageBindingsObject) WithAmqp1(val interface{}) *MessageBindingsObject {
	v.Amqp1 = &val
	return v
}

// WithMqtt sets Mqtt value.
func (v *MessageBindingsObject) WithMqtt(val interface{}) *MessageBindingsObject {
	v.Mqtt = &val
	return v
}

// WithMqtt5 sets Mqtt5 value.
func (v *MessageBindingsObject) WithMqtt5(val interface{}) *MessageBindingsObject {
	v.Mqtt5 = &val
	return v
}

// WithKafka sets Kafka value.
func (v *MessageBindingsObject) WithKafka(val interface{}) *MessageBindingsObject {
	v.Kafka = &val
	return v
}

// WithNats sets Nats value.
func (v *MessageBindingsObject) WithNats(val interface{}) *MessageBindingsObject {
	v.Nats = &val
	return v
}

// WithJms sets Jms value.
func (v *MessageBindingsObject) WithJms(val interface{}) *MessageBindingsObject {
	v.Jms = &val
	return v
}

// WithSns sets Sns value.
func (v *MessageBindingsObject) WithSns(val interface{}) *MessageBindingsObject {
	v.Sns = &val
	return v
}

// WithSqs sets Sqs value.
func (v *MessageBindingsObject) WithSqs(val interface{}) *MessageBindingsObject {
	v.Sqs = &val
	return v
}

// WithStomp sets Stomp value.
func (v *MessageBindingsObject) WithStomp(val interface{}) *MessageBindingsObject {
	v.Stomp = &val
	return v
}

// WithRedis sets Redis value.
func (v *MessageBindingsObject) WithRedis(val interface{}) *MessageBindingsObject {
	v.Redis = &val
	return v
}

// WithAdditionalProperties sets AdditionalProperties value.
func (v *MessageBindingsObject) WithAdditionalProperties(val map[string]interface{}) *MessageBindingsObject {
	v.AdditionalProperties = val
	return v
}

type marshalMessageBindingsObject MessageBindingsObject

var ignoreKeysMessageBindingsObject = []string{
	"http",
	"ws",
	"amqp",
	"amqp1",
	"mqtt",
	"mqtt5",
	"kafka",
	"nats",
	"jms",
	"sns",
	"sqs",
	"stomp",
	"redis",
}

// UnmarshalJSON decodes JSON.
func (i *MessageBindingsObject) UnmarshalJSON(data []byte) error {
	var err error

	ii := marshalMessageBindingsObject(*i)

	err = json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	var m map[string]json.RawMessage

	err = json.Unmarshal(data, &m)
	if err != nil {
		m = nil
	}

	if ii.HTTP == nil {
		if _, ok := m["http"]; ok {
			var v interface{}
			ii.HTTP = &v
		}
	}

	if ii.Ws == nil {
		if _, ok := m["ws"]; ok {
			var v interface{}
			ii.Ws = &v
		}
	}

	if ii.Amqp1 == nil {
		if _, ok := m["amqp1"]; ok {
			var v interface{}
			ii.Amqp1 = &v
		}
	}

	if ii.Mqtt == nil {
		if _, ok := m["mqtt"]; ok {
			var v interface{}
			ii.Mqtt = &v
		}
	}

	if ii.Mqtt5 == nil {
		if _, ok := m["mqtt5"]; ok {
			var v interface{}
			ii.Mqtt5 = &v
		}
	}

	if ii.Kafka == nil {
		if _, ok := m["kafka"]; ok {
			var v interface{}
			ii.Kafka = &v
		}
	}

	if ii.Nats == nil {
		if _, ok := m["nats"]; ok {
			var v interface{}
			ii.Nats = &v
		}
	}

	if ii.Jms == nil {
		if _, ok := m["jms"]; ok {
			var v interface{}
			ii.Jms = &v
		}
	}

	if ii.Sns == nil {
		if _, ok := m["sns"]; ok {
			var v interface{}
			ii.Sns = &v
		}
	}

	if ii.Sqs == nil {
		if _, ok := m["sqs"]; ok {
			var v interface{}
			ii.Sqs = &v
		}
	}

	if ii.Stomp == nil {
		if _, ok := m["stomp"]; ok {
			var v interface{}
			ii.Stomp = &v
		}
	}

	if ii.Redis == nil {
		if _, ok := m["redis"]; ok {
			var v interface{}
			ii.Redis = &v
		}
	}

	for _, key := range ignoreKeysMessageBindingsObject {
		delete(m, key)
	}

	for key, rawValue := range m {
		if ii.AdditionalProperties == nil {
			ii.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ii.AdditionalProperties[key] = val
	}

	*i = MessageBindingsObject(ii)

	return nil
}

// MarshalJSON encodes JSON.
func (i MessageBindingsObject) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalMessageBindingsObject(i), i.AdditionalProperties)
}

// AMQP091MessageBindingObject structure is generated from "amqp-message-binding-object-0.1.0.json".
//
// AMQP 0-9-1 Message Binding Object.
//
// This object contains information about the message representation in AMQP.
// See https://github.com/asyncapi/bindings/tree/master/amqp#message-binding-object.
type AMQP091MessageBindingObject struct {
	ContentEncoding string                                    `json:"contentEncoding,omitempty"` // A MIME encoding for the message content.
	MessageType     string                                    `json:"messageType,omitempty"`     // Application-specific message type.
	BindingVersion  AMQP091MessageBindingObjectBindingVersion `json:"bindingVersion,omitempty"`  // The version of this binding. If omitted, "latest" MUST be assumed.
}

// WithContentEncoding sets ContentEncoding value.
func (v *AMQP091MessageBindingObject) WithContentEncoding(val string) *AMQP091MessageBindingObject {
	v.ContentEncoding = val
	return v
}

// WithMessageType sets MessageType value.
func (v *AMQP091MessageBindingObject) WithMessageType(val string) *AMQP091MessageBindingObject {
	v.MessageType = val
	return v
}

// WithBindingVersion sets BindingVersion value.
func (v *AMQP091MessageBindingObject) WithBindingVersion(val AMQP091MessageBindingObjectBindingVersion) *AMQP091MessageBindingObject {
	v.BindingVersion = val
	return v
}

// MessageTrait structure is generated from "#/definitions/messageTrait".
type MessageTrait struct {
	SchemaFormat  string                     `json:"schemaFormat,omitempty"`
	ContentType   string                     `json:"contentType,omitempty"`
	Headers       *MessageTraitHeaders       `json:"headers,omitempty"`
	CorrelationID *MessageTraitCorrelationID `json:"correlationId,omitempty"`
	Tags          []Tag                      `json:"tags,omitempty"`
	Summary       string                     `json:"summary,omitempty"`      // A brief summary of the message.
	Name          string                     `json:"name,omitempty"`         // Name of the message.
	Title         string                     `json:"title,omitempty"`        // A human-friendly title for the message.
	Description   string                     `json:"description,omitempty"`  // A longer description of the message. CommonMark is allowed.
	ExternalDocs  *ExternalDocs              `json:"externalDocs,omitempty"` // information about external documentation
	Deprecated    bool                       `json:"deprecated,omitempty"`
	Examples      []map[string]interface{}   `json:"examples,omitempty"`
	Bindings      *MessageBindingsObject     `json:"bindings,omitempty"`
	MapOfAnything map[string]interface{}     `json:"-"` // Key must match pattern: ^x-[\w\d\.\-\_]+$
}

// WithSchemaFormat sets SchemaFormat value.
func (v *MessageTrait) WithSchemaFormat(val string) *MessageTrait {
	v.SchemaFormat = val
	return v
}

// WithContentType sets ContentType value.
func (v *MessageTrait) WithContentType(val string) *MessageTrait {
	v.ContentType = val
	return v
}

// WithHeaders sets Headers value.
func (v *MessageTrait) WithHeaders(val MessageTraitHeaders) *MessageTrait {
	v.Headers = &val
	return v
}

// WithCorrelationID sets CorrelationID value.
func (v *MessageTrait) WithCorrelationID(val MessageTraitCorrelationID) *MessageTrait {
	v.CorrelationID = &val
	return v
}

// WithTags sets Tags value.
func (v *MessageTrait) WithTags(val ...Tag) *MessageTrait {
	v.Tags = val
	return v
}

// WithSummary sets Summary value.
func (v *MessageTrait) WithSummary(val string) *MessageTrait {
	v.Summary = val
	return v
}

// WithName sets Name value.
func (v *MessageTrait) WithName(val string) *MessageTrait {
	v.Name = val
	return v
}

// WithTitle sets Title value.
func (v *MessageTrait) WithTitle(val string) *MessageTrait {
	v.Title = val
	return v
}

// WithDescription sets Description value.
func (v *MessageTrait) WithDescription(val string) *MessageTrait {
	v.Description = val
	return v
}

// WithExternalDocs sets ExternalDocs value.
func (v *MessageTrait) WithExternalDocs(val ExternalDocs) *MessageTrait {
	v.ExternalDocs = &val
	return v
}

// WithDeprecated sets Deprecated value.
func (v *MessageTrait) WithDeprecated(val bool) *MessageTrait {
	v.Deprecated = val
	return v
}

// WithExamples sets Examples value.
func (v *MessageTrait) WithExamples(val ...map[string]interface{}) *MessageTrait {
	v.Examples = val
	return v
}

// WithBindings sets Bindings value.
func (v *MessageTrait) WithBindings(val MessageBindingsObject) *MessageTrait {
	v.Bindings = &val
	return v
}

// WithMapOfAnything sets MapOfAnything value.
func (v *MessageTrait) WithMapOfAnything(val map[string]interface{}) *MessageTrait {
	v.MapOfAnything = val
	return v
}

type marshalMessageTrait MessageTrait

var ignoreKeysMessageTrait = []string{
	"schemaFormat",
	"contentType",
	"headers",
	"correlationId",
	"tags",
	"summary",
	"name",
	"title",
	"description",
	"externalDocs",
	"deprecated",
	"examples",
	"bindings",
}

// UnmarshalJSON decodes JSON.
func (i *MessageTrait) UnmarshalJSON(data []byte) error {
	var err error

	ii := marshalMessageTrait(*i)

	err = json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	var m map[string]json.RawMessage

	err = json.Unmarshal(data, &m)
	if err != nil {
		m = nil
	}

	for _, key := range ignoreKeysMessageTrait {
		delete(m, key)
	}

	for key, rawValue := range m {
		matched := false

		if regexXWD.MatchString(key) {
			matched = true

			if ii.MapOfAnything == nil {
				ii.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			ii.MapOfAnything[key] = val
		}

		if matched {
			delete(m, key)
		}
	}

	*i = MessageTrait(ii)

	return nil
}

// MarshalJSON encodes JSON.
func (i MessageTrait) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalMessageTrait(i), i.MapOfAnything)
}

// MessageTraitHeaders structure is generated from "#/definitions/messageTrait->headers".
type MessageTraitHeaders struct {
	Reference *Reference             `json:"-"`
	Schema    map[string]interface{} `json:"-"`
}

// WithReference sets Reference value.
func (v *MessageTraitHeaders) WithReference(val Reference) *MessageTraitHeaders {
	v.Reference = &val
	return v
}

// WithSchema sets Schema value.
func (v *MessageTraitHeaders) WithSchema(val map[string]interface{}) *MessageTraitHeaders {
	v.Schema = val
	return v
}

// UnmarshalJSON decodes JSON.
func (i *MessageTraitHeaders) UnmarshalJSON(data []byte) error {
	var err error

	err = json.Unmarshal(data, &i.Reference)
	if err != nil {
		i.Reference = nil
	}

	err = json.Unmarshal(data, &i.Schema)
	if err != nil {
		i.Schema = nil
	}

	return nil
}

// MarshalJSON encodes JSON.
func (i MessageTraitHeaders) MarshalJSON() ([]byte, error) {
	return marshalUnion(i.Reference, i.Schema)
}

// MessageTraitCorrelationID structure is generated from "#/definitions/messageTrait->correlationId".
type MessageTraitCorrelationID struct {
	Reference     *Reference     `json:"-"`
	CorrelationID *CorrelationID `json:"-"`
}

// WithReference sets Reference value.
func (v *MessageTraitCorrelationID) WithReference(val Reference) *MessageTraitCorrelationID {
	v.Reference = &val
	return v
}

// WithCorrelationID sets CorrelationID value.
func (v *MessageTraitCorrelationID) WithCorrelationID(val CorrelationID) *MessageTraitCorrelationID {
	v.CorrelationID = &val
	return v
}

// UnmarshalJSON decodes JSON.
func (i *MessageTraitCorrelationID) UnmarshalJSON(data []byte) error {
	var err error

	err = json.Unmarshal(data, &i.Reference)
	if err != nil {
		i.Reference = nil
	}

	err = json.Unmarshal(data, &i.CorrelationID)
	if err != nil {
		i.CorrelationID = nil
	}

	return nil
}

// MarshalJSON encodes JSON.
func (i MessageTraitCorrelationID) MarshalJSON() ([]byte, error) {
	return marshalUnion(i.Reference, i.CorrelationID)
}

// MessageEntityTraitsItems structure is generated from "#/definitions/messageEntity->traits->items".
type MessageEntityTraitsItems struct {
	Reference       *Reference    `json:"-"`
	MessageTrait    *MessageTrait `json:"-"`
	SliceOfAnything []interface{} `json:"-"`
}

// WithReference sets Reference value.
func (v *MessageEntityTraitsItems) WithReference(val Reference) *MessageEntityTraitsItems {
	v.Reference = &val
	return v
}

// WithMessageTrait sets MessageTrait value.
func (v *MessageEntityTraitsItems) WithMessageTrait(val MessageTrait) *MessageEntityTraitsItems {
	v.MessageTrait = &val
	return v
}

// WithSliceOfAnything sets SliceOfAnything value.
func (v *MessageEntityTraitsItems) WithSliceOfAnything(val ...interface{}) *MessageEntityTraitsItems {
	v.SliceOfAnything = val
	return v
}

// UnmarshalJSON decodes JSON.
func (i *MessageEntityTraitsItems) UnmarshalJSON(data []byte) error {
	var err error

	err = json.Unmarshal(data, &i.Reference)
	if err != nil {
		i.Reference = nil
	}

	err = json.Unmarshal(data, &i.MessageTrait)
	if err != nil {
		i.MessageTrait = nil
	}

	err = json.Unmarshal(data, &i.SliceOfAnything)
	if err != nil {
		i.SliceOfAnything = nil
	}

	return nil
}

// MarshalJSON encodes JSON.
func (i MessageEntityTraitsItems) MarshalJSON() ([]byte, error) {
	return marshalUnion(i.Reference, i.MessageTrait, i.SliceOfAnything)
}

// Message structure is generated from "#/definitions/message".
type Message struct {
	Reference *Reference       `json:"-"`
	Entities  *MessageEntities `json:"-"`
	Entity    *MessageEntity   `json:"-"`
}

// WithReference sets Reference value.
func (v *Message) WithReference(val Reference) *Message {
	v.Reference = &val
	return v
}

// WithEntities sets Entities value.
func (v *Message) WithEntities(val MessageEntities) *Message {
	v.Entities = &val
	return v
}

// WithEntity sets Entity value.
func (v *Message) WithEntity(val MessageEntity) *Message {
	v.Entity = &val
	return v
}

// UnmarshalJSON decodes JSON.
func (i *Message) UnmarshalJSON(data []byte) error {
	var err error

	err = json.Unmarshal(data, &i.Reference)
	if err != nil {
		i.Reference = nil
	}

	err = json.Unmarshal(data, &i.Entities)
	if err != nil {
		i.Entities = nil
	}

	err = json.Unmarshal(data, &i.Entity)
	if err != nil {
		i.Entity = nil
	}

	return nil
}

// MarshalJSON encodes JSON.
func (i Message) MarshalJSON() ([]byte, error) {
	return marshalUnion(i.Reference, i.Entities, i.Entity)
}

// ChannelBindingsObject structure is generated from "#/definitions/channelBindingsObject".
type ChannelBindingsObject struct {
	HTTP *interface{} `json:"http,omitempty"`
	Ws   *interface{} `json:"ws,omitempty"`
	// AMQP 0-9-1 Channel Binding Object
	// This object contains information about the channel representation in AMQP.
	// See https://github.com/asyncapi/bindings/tree/master/amqp#channel-binding-object.
	Amqp                 *AMQP091ChannelBindingObject `json:"amqp,omitempty"`
	Amqp1                *interface{}                 `json:"amqp1,omitempty"`
	Mqtt                 *interface{}                 `json:"mqtt,omitempty"`
	Mqtt5                *interface{}                 `json:"mqtt5,omitempty"`
	Kafka                *interface{}                 `json:"kafka,omitempty"`
	Nats                 *interface{}                 `json:"nats,omitempty"`
	Jms                  *interface{}                 `json:"jms,omitempty"`
	Sns                  *interface{}                 `json:"sns,omitempty"`
	Sqs                  *interface{}                 `json:"sqs,omitempty"`
	Stomp                *interface{}                 `json:"stomp,omitempty"`
	Redis                *interface{}                 `json:"redis,omitempty"`
	AdditionalProperties map[string]interface{}       `json:"-"` // All unmatched properties
}

// WithHTTP sets HTTP value.
func (v *ChannelBindingsObject) WithHTTP(val interface{}) *ChannelBindingsObject {
	v.HTTP = &val
	return v
}

// WithWs sets Ws value.
func (v *ChannelBindingsObject) WithWs(val interface{}) *ChannelBindingsObject {
	v.Ws = &val
	return v
}

// WithAmqp sets Amqp value.
func (v *ChannelBindingsObject) WithAmqp(val AMQP091ChannelBindingObject) *ChannelBindingsObject {
	v.Amqp = &val
	return v
}

// WithAmqp1 sets Amqp1 value.
func (v *ChannelBindingsObject) WithAmqp1(val interface{}) *ChannelBindingsObject {
	v.Amqp1 = &val
	return v
}

// WithMqtt sets Mqtt value.
func (v *ChannelBindingsObject) WithMqtt(val interface{}) *ChannelBindingsObject {
	v.Mqtt = &val
	return v
}

// WithMqtt5 sets Mqtt5 value.
func (v *ChannelBindingsObject) WithMqtt5(val interface{}) *ChannelBindingsObject {
	v.Mqtt5 = &val
	return v
}

// WithKafka sets Kafka value.
func (v *ChannelBindingsObject) WithKafka(val interface{}) *ChannelBindingsObject {
	v.Kafka = &val
	return v
}

// WithNats sets Nats value.
func (v *ChannelBindingsObject) WithNats(val interface{}) *ChannelBindingsObject {
	v.Nats = &val
	return v
}

// WithJms sets Jms value.
func (v *ChannelBindingsObject) WithJms(val interface{}) *ChannelBindingsObject {
	v.Jms = &val
	return v
}

// WithSns sets Sns value.
func (v *ChannelBindingsObject) WithSns(val interface{}) *ChannelBindingsObject {
	v.Sns = &val
	return v
}

// WithSqs sets Sqs value.
func (v *ChannelBindingsObject) WithSqs(val interface{}) *ChannelBindingsObject {
	v.Sqs = &val
	return v
}

// WithStomp sets Stomp value.
func (v *ChannelBindingsObject) WithStomp(val interface{}) *ChannelBindingsObject {
	v.Stomp = &val
	return v
}

// WithRedis sets Redis value.
func (v *ChannelBindingsObject) WithRedis(val interface{}) *ChannelBindingsObject {
	v.Redis = &val
	return v
}

// WithAdditionalProperties sets AdditionalProperties value.
func (v *ChannelBindingsObject) WithAdditionalProperties(val map[string]interface{}) *ChannelBindingsObject {
	v.AdditionalProperties = val
	return v
}

type marshalChannelBindingsObject ChannelBindingsObject

var ignoreKeysChannelBindingsObject = []string{
	"http",
	"ws",
	"amqp",
	"amqp1",
	"mqtt",
	"mqtt5",
	"kafka",
	"nats",
	"jms",
	"sns",
	"sqs",
	"stomp",
	"redis",
}

// UnmarshalJSON decodes JSON.
func (i *ChannelBindingsObject) UnmarshalJSON(data []byte) error {
	var err error

	ii := marshalChannelBindingsObject(*i)

	err = json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	var m map[string]json.RawMessage

	err = json.Unmarshal(data, &m)
	if err != nil {
		m = nil
	}

	if ii.HTTP == nil {
		if _, ok := m["http"]; ok {
			var v interface{}
			ii.HTTP = &v
		}
	}

	if ii.Ws == nil {
		if _, ok := m["ws"]; ok {
			var v interface{}
			ii.Ws = &v
		}
	}

	if ii.Amqp1 == nil {
		if _, ok := m["amqp1"]; ok {
			var v interface{}
			ii.Amqp1 = &v
		}
	}

	if ii.Mqtt == nil {
		if _, ok := m["mqtt"]; ok {
			var v interface{}
			ii.Mqtt = &v
		}
	}

	if ii.Mqtt5 == nil {
		if _, ok := m["mqtt5"]; ok {
			var v interface{}
			ii.Mqtt5 = &v
		}
	}

	if ii.Kafka == nil {
		if _, ok := m["kafka"]; ok {
			var v interface{}
			ii.Kafka = &v
		}
	}

	if ii.Nats == nil {
		if _, ok := m["nats"]; ok {
			var v interface{}
			ii.Nats = &v
		}
	}

	if ii.Jms == nil {
		if _, ok := m["jms"]; ok {
			var v interface{}
			ii.Jms = &v
		}
	}

	if ii.Sns == nil {
		if _, ok := m["sns"]; ok {
			var v interface{}
			ii.Sns = &v
		}
	}

	if ii.Sqs == nil {
		if _, ok := m["sqs"]; ok {
			var v interface{}
			ii.Sqs = &v
		}
	}

	if ii.Stomp == nil {
		if _, ok := m["stomp"]; ok {
			var v interface{}
			ii.Stomp = &v
		}
	}

	if ii.Redis == nil {
		if _, ok := m["redis"]; ok {
			var v interface{}
			ii.Redis = &v
		}
	}

	for _, key := range ignoreKeysChannelBindingsObject {
		delete(m, key)
	}

	for key, rawValue := range m {
		if ii.AdditionalProperties == nil {
			ii.AdditionalProperties = make(map[string]interface{}, 1)
		}

		var val interface{}

		err = json.Unmarshal(rawValue, &val)
		if err != nil {
			return err
		}

		ii.AdditionalProperties[key] = val
	}

	*i = ChannelBindingsObject(ii)

	return nil
}

// MarshalJSON encodes JSON.
func (i ChannelBindingsObject) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalChannelBindingsObject(i), i.AdditionalProperties)
}

// AMQP091ChannelBindingObject structure is generated from "amqp-channel-binding-object-0.1.0.json".
//
// AMQP 0-9-1 Channel Binding Object.
//
// This object contains information about the channel representation in AMQP.
// See https://github.com/asyncapi/bindings/tree/master/amqp#channel-binding-object.
type AMQP091ChannelBindingObject struct {
	Is             AMQP091ChannelBindingObjectIs             `json:"is,omitempty"`             // Defines what type of channel is it. Can be either `queue` or `routingKey` (default).
	Exchange       *Exchange                                 `json:"exchange,omitempty"`       // When `is`=`routingKey`, this object defines the exchange properties.
	Queue          *Queue                                    `json:"queue,omitempty"`          // When `is`=`queue`, this object defines the queue properties.
	BindingVersion AMQP091ChannelBindingObjectBindingVersion `json:"bindingVersion,omitempty"` // The version of this binding. If omitted, "latest" MUST be assumed.
}

// WithIs sets Is value.
func (v *AMQP091ChannelBindingObject) WithIs(val AMQP091ChannelBindingObjectIs) *AMQP091ChannelBindingObject {
	v.Is = val
	return v
}

// WithExchange sets Exchange value.
func (v *AMQP091ChannelBindingObject) WithExchange(val Exchange) *AMQP091ChannelBindingObject {
	v.Exchange = &val
	return v
}

// WithQueue sets Queue value.
func (v *AMQP091ChannelBindingObject) WithQueue(val Queue) *AMQP091ChannelBindingObject {
	v.Queue = &val
	return v
}

// WithBindingVersion sets BindingVersion value.
func (v *AMQP091ChannelBindingObject) WithBindingVersion(val AMQP091ChannelBindingObjectBindingVersion) *AMQP091ChannelBindingObject {
	v.BindingVersion = val
	return v
}

// Exchange structure is generated from "#/definitions/exchange".
//
// When `is`=`routingKey`, this object defines the exchange properties.
type Exchange struct {
	Name       string       `json:"name,omitempty"`       // The name of the exchange. It MUST NOT exceed 255 characters long.
	Type       ExchangeType `json:"type,omitempty"`       // The type of the exchange. Can be either `topic`, `direct`, `fanout`, `default` or `headers`.
	Durable    bool         `json:"durable,omitempty"`    // Whether the exchange should survive broker restarts or not.
	AutoDelete bool         `json:"autoDelete,omitempty"` // Whether the exchange should be deleted when the last queue is unbound from it.
	Vhost      string       `json:"vhost,omitempty"`      // The virtual host of the queue. Defaults to /.
}

// WithName sets Name value.
func (v *Exchange) WithName(val string) *Exchange {
	v.Name = val
	return v
}

// WithType sets Type value.
func (v *Exchange) WithType(val ExchangeType) *Exchange {
	v.Type = val
	return v
}

// WithDurable sets Durable value.
func (v *Exchange) WithDurable(val bool) *Exchange {
	v.Durable = val
	return v
}

// WithAutoDelete sets AutoDelete value.
func (v *Exchange) WithAutoDelete(val bool) *Exchange {
	v.AutoDelete = val
	return v
}

// WithVhost sets Vhost value.
func (v *Exchange) WithVhost(val string) *Exchange {
	v.Vhost = val
	return v
}

// Queue structure is generated from "#/definitions/queue".
//
// When `is`=`queue`, this object defines the queue properties.
type Queue struct {
	Name       string `json:"name,omitempty"`       // The name of the queue. It MUST NOT exceed 255 characters long.
	Durable    bool   `json:"durable,omitempty"`    // Whether the queue should survive broker restarts or not.
	Exclusive  bool   `json:"exclusive,omitempty"`  // Whether the queue should be used only by one connection or not.
	AutoDelete bool   `json:"autoDelete,omitempty"` // Whether the queue should be deleted when the last consumer unsubscribes.
	Vhost      string `json:"vhost,omitempty"`      // The virtual host of the queue. Defaults to /.
}

// WithName sets Name value.
func (v *Queue) WithName(val string) *Queue {
	v.Name = val
	return v
}

// WithDurable sets Durable value.
func (v *Queue) WithDurable(val bool) *Queue {
	v.Durable = val
	return v
}

// WithExclusive sets Exclusive value.
func (v *Queue) WithExclusive(val bool) *Queue {
	v.Exclusive = val
	return v
}

// WithAutoDelete sets AutoDelete value.
func (v *Queue) WithAutoDelete(val bool) *Queue {
	v.AutoDelete = val
	return v
}

// WithVhost sets Vhost value.
func (v *Queue) WithVhost(val string) *Queue {
	v.Vhost = val
	return v
}

// Components structure is generated from "#/definitions/components".
//
// An object to hold a set of reusable objects for different aspects of the AsyncAPI Specification.
type Components struct {
	Schemas           map[string]map[string]interface{}  `json:"schemas,omitempty"`  // JSON objects describing schemas the API uses.
	Messages          map[string]Message                 `json:"messages,omitempty"` // JSON objects describing the messages being consumed and produced by the API.
	SecuritySchemes   *ComponentsSecuritySchemes         `json:"securitySchemes,omitempty"`
	Parameters        map[string]Parameter               `json:"parameters,omitempty"` // JSON objects describing re-usable channel parameters.
	CorrelationIds    *ComponentsCorrelationIds          `json:"correlationIds,omitempty"`
	OperationTraits   map[string]OperationTrait          `json:"operationTraits,omitempty"`
	MessageTraits     map[string]MessageTrait            `json:"messageTraits,omitempty"`
	ServerBindings    map[string]ServerBindingsObject    `json:"serverBindings,omitempty"`
	ChannelBindings   map[string]ChannelBindingsObject   `json:"channelBindings,omitempty"`
	OperationBindings map[string]OperationBindingsObject `json:"operationBindings,omitempty"`
	MessageBindings   map[string]MessageBindingsObject   `json:"messageBindings,omitempty"`
}

// WithSchemas sets Schemas value.
func (v *Components) WithSchemas(val map[string]map[string]interface{}) *Components {
	v.Schemas = val
	return v
}

// WithMessages sets Messages value.
func (v *Components) WithMessages(val map[string]Message) *Components {
	v.Messages = val
	return v
}

// WithSecuritySchemes sets SecuritySchemes value.
func (v *Components) WithSecuritySchemes(val ComponentsSecuritySchemes) *Components {
	v.SecuritySchemes = &val
	return v
}

// WithParameters sets Parameters value.
func (v *Components) WithParameters(val map[string]Parameter) *Components {
	v.Parameters = val
	return v
}

// WithCorrelationIds sets CorrelationIds value.
func (v *Components) WithCorrelationIds(val ComponentsCorrelationIds) *Components {
	v.CorrelationIds = &val
	return v
}

// WithOperationTraits sets OperationTraits value.
func (v *Components) WithOperationTraits(val map[string]OperationTrait) *Components {
	v.OperationTraits = val
	return v
}

// WithMessageTraits sets MessageTraits value.
func (v *Components) WithMessageTraits(val map[string]MessageTrait) *Components {
	v.MessageTraits = val
	return v
}

// WithServerBindings sets ServerBindings value.
func (v *Components) WithServerBindings(val map[string]ServerBindingsObject) *Components {
	v.ServerBindings = val
	return v
}

// WithChannelBindings sets ChannelBindings value.
func (v *Components) WithChannelBindings(val map[string]ChannelBindingsObject) *Components {
	v.ChannelBindings = val
	return v
}

// WithOperationBindings sets OperationBindings value.
func (v *Components) WithOperationBindings(val map[string]OperationBindingsObject) *Components {
	v.OperationBindings = val
	return v
}

// WithMessageBindings sets MessageBindings value.
func (v *Components) WithMessageBindings(val map[string]MessageBindingsObject) *Components {
	v.MessageBindings = val
	return v
}

// UserPassword structure is generated from "#/definitions/userPassword".
type UserPassword struct {
	Description   string                 `json:"description,omitempty"`
	MapOfAnything map[string]interface{} `json:"-"` // Key must match pattern: ^x-[\w\d\.\-\_]+$
}

// WithDescription sets Description value.
func (v *UserPassword) WithDescription(val string) *UserPassword {
	v.Description = val
	return v
}

// WithMapOfAnything sets MapOfAnything value.
func (v *UserPassword) WithMapOfAnything(val map[string]interface{}) *UserPassword {
	v.MapOfAnything = val
	return v
}

type marshalUserPassword UserPassword

var ignoreKeysUserPassword = []string{
	"description",
	"type",
}

// UnmarshalJSON decodes JSON.
func (i *UserPassword) UnmarshalJSON(data []byte) error {
	var err error

	ii := marshalUserPassword(*i)

	err = json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	var m map[string]json.RawMessage

	err = json.Unmarshal(data, &m)
	if err != nil {
		m = nil
	}

	if v, ok := m["type"]; !ok || string(v) != `"userPassword"` {
		return fmt.Errorf(`bad or missing const value for "type" ("userPassword" expected, %s received)`, v)
	}

	delete(m, "type")

	for _, key := range ignoreKeysUserPassword {
		delete(m, key)
	}

	for key, rawValue := range m {
		matched := false

		if regexXWD.MatchString(key) {
			matched = true

			if ii.MapOfAnything == nil {
				ii.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			ii.MapOfAnything[key] = val
		}

		if matched {
			delete(m, key)
		}
	}

	*i = UserPassword(ii)

	return nil
}

var (
	// constUserPassword is unconditionally added to JSON.
	constUserPassword = json.RawMessage(`{"type":"userPassword"}`)
)

// MarshalJSON encodes JSON.
func (i UserPassword) MarshalJSON() ([]byte, error) {
	return marshalUnion(constUserPassword, marshalUserPassword(i), i.MapOfAnything)
}

// APIKey structure is generated from "#/definitions/apiKey".
type APIKey struct {
	In            APIKeyIn               `json:"in,omitempty"`
	Description   string                 `json:"description,omitempty"`
	MapOfAnything map[string]interface{} `json:"-"` // Key must match pattern: ^x-[\w\d\.\-\_]+$
}

// WithIn sets In value.
func (v *APIKey) WithIn(val APIKeyIn) *APIKey {
	v.In = val
	return v
}

// WithDescription sets Description value.
func (v *APIKey) WithDescription(val string) *APIKey {
	v.Description = val
	return v
}

// WithMapOfAnything sets MapOfAnything value.
func (v *APIKey) WithMapOfAnything(val map[string]interface{}) *APIKey {
	v.MapOfAnything = val
	return v
}

type marshalAPIKey APIKey

var ignoreKeysAPIKey = []string{
	"in",
	"description",
	"type",
}

// UnmarshalJSON decodes JSON.
func (i *APIKey) UnmarshalJSON(data []byte) error {
	var err error

	ii := marshalAPIKey(*i)

	err = json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	var m map[string]json.RawMessage

	err = json.Unmarshal(data, &m)
	if err != nil {
		m = nil
	}

	if v, ok := m["type"]; !ok || string(v) != `"apiKey"` {
		return fmt.Errorf(`bad or missing const value for "type" ("apiKey" expected, %s received)`, v)
	}

	delete(m, "type")

	for _, key := range ignoreKeysAPIKey {
		delete(m, key)
	}

	for key, rawValue := range m {
		matched := false

		if regexXWD.MatchString(key) {
			matched = true

			if ii.MapOfAnything == nil {
				ii.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			ii.MapOfAnything[key] = val
		}

		if matched {
			delete(m, key)
		}
	}

	*i = APIKey(ii)

	return nil
}

var (
	// constAPIKey is unconditionally added to JSON.
	constAPIKey = json.RawMessage(`{"type":"apiKey"}`)
)

// MarshalJSON encodes JSON.
func (i APIKey) MarshalJSON() ([]byte, error) {
	return marshalUnion(constAPIKey, marshalAPIKey(i), i.MapOfAnything)
}

// X509 structure is generated from "#/definitions/X509".
type X509 struct {
	Description   string                 `json:"description,omitempty"`
	MapOfAnything map[string]interface{} `json:"-"` // Key must match pattern: ^x-[\w\d\.\-\_]+$
}

// WithDescription sets Description value.
func (v *X509) WithDescription(val string) *X509 {
	v.Description = val
	return v
}

// WithMapOfAnything sets MapOfAnything value.
func (v *X509) WithMapOfAnything(val map[string]interface{}) *X509 {
	v.MapOfAnything = val
	return v
}

type marshalX509 X509

var ignoreKeysX509 = []string{
	"description",
	"type",
}

// UnmarshalJSON decodes JSON.
func (i *X509) UnmarshalJSON(data []byte) error {
	var err error

	ii := marshalX509(*i)

	err = json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	var m map[string]json.RawMessage

	err = json.Unmarshal(data, &m)
	if err != nil {
		m = nil
	}

	if v, ok := m["type"]; !ok || string(v) != `"X509"` {
		return fmt.Errorf(`bad or missing const value for "type" ("X509" expected, %s received)`, v)
	}

	delete(m, "type")

	for _, key := range ignoreKeysX509 {
		delete(m, key)
	}

	for key, rawValue := range m {
		matched := false

		if regexXWD.MatchString(key) {
			matched = true

			if ii.MapOfAnything == nil {
				ii.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			ii.MapOfAnything[key] = val
		}

		if matched {
			delete(m, key)
		}
	}

	*i = X509(ii)

	return nil
}

var (
	// constX509 is unconditionally added to JSON.
	constX509 = json.RawMessage(`{"type":"X509"}`)
)

// MarshalJSON encodes JSON.
func (i X509) MarshalJSON() ([]byte, error) {
	return marshalUnion(constX509, marshalX509(i), i.MapOfAnything)
}

// SymmetricEncryption structure is generated from "#/definitions/symmetricEncryption".
type SymmetricEncryption struct {
	Description   string                 `json:"description,omitempty"`
	MapOfAnything map[string]interface{} `json:"-"` // Key must match pattern: ^x-[\w\d\.\-\_]+$
}

// WithDescription sets Description value.
func (v *SymmetricEncryption) WithDescription(val string) *SymmetricEncryption {
	v.Description = val
	return v
}

// WithMapOfAnything sets MapOfAnything value.
func (v *SymmetricEncryption) WithMapOfAnything(val map[string]interface{}) *SymmetricEncryption {
	v.MapOfAnything = val
	return v
}

type marshalSymmetricEncryption SymmetricEncryption

var ignoreKeysSymmetricEncryption = []string{
	"description",
	"type",
}

// UnmarshalJSON decodes JSON.
func (i *SymmetricEncryption) UnmarshalJSON(data []byte) error {
	var err error

	ii := marshalSymmetricEncryption(*i)

	err = json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	var m map[string]json.RawMessage

	err = json.Unmarshal(data, &m)
	if err != nil {
		m = nil
	}

	if v, ok := m["type"]; !ok || string(v) != `"symmetricEncryption"` {
		return fmt.Errorf(`bad or missing const value for "type" ("symmetricEncryption" expected, %s received)`, v)
	}

	delete(m, "type")

	for _, key := range ignoreKeysSymmetricEncryption {
		delete(m, key)
	}

	for key, rawValue := range m {
		matched := false

		if regexXWD.MatchString(key) {
			matched = true

			if ii.MapOfAnything == nil {
				ii.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			ii.MapOfAnything[key] = val
		}

		if matched {
			delete(m, key)
		}
	}

	*i = SymmetricEncryption(ii)

	return nil
}

var (
	// constSymmetricEncryption is unconditionally added to JSON.
	constSymmetricEncryption = json.RawMessage(`{"type":"symmetricEncryption"}`)
)

// MarshalJSON encodes JSON.
func (i SymmetricEncryption) MarshalJSON() ([]byte, error) {
	return marshalUnion(constSymmetricEncryption, marshalSymmetricEncryption(i), i.MapOfAnything)
}

// AsymmetricEncryption structure is generated from "#/definitions/asymmetricEncryption".
type AsymmetricEncryption struct {
	Description   string                 `json:"description,omitempty"`
	MapOfAnything map[string]interface{} `json:"-"` // Key must match pattern: ^x-[\w\d\.\-\_]+$
}

// WithDescription sets Description value.
func (v *AsymmetricEncryption) WithDescription(val string) *AsymmetricEncryption {
	v.Description = val
	return v
}

// WithMapOfAnything sets MapOfAnything value.
func (v *AsymmetricEncryption) WithMapOfAnything(val map[string]interface{}) *AsymmetricEncryption {
	v.MapOfAnything = val
	return v
}

type marshalAsymmetricEncryption AsymmetricEncryption

var ignoreKeysAsymmetricEncryption = []string{
	"description",
	"type",
}

// UnmarshalJSON decodes JSON.
func (i *AsymmetricEncryption) UnmarshalJSON(data []byte) error {
	var err error

	ii := marshalAsymmetricEncryption(*i)

	err = json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	var m map[string]json.RawMessage

	err = json.Unmarshal(data, &m)
	if err != nil {
		m = nil
	}

	if v, ok := m["type"]; !ok || string(v) != `"asymmetricEncryption"` {
		return fmt.Errorf(`bad or missing const value for "type" ("asymmetricEncryption" expected, %s received)`, v)
	}

	delete(m, "type")

	for _, key := range ignoreKeysAsymmetricEncryption {
		delete(m, key)
	}

	for key, rawValue := range m {
		matched := false

		if regexXWD.MatchString(key) {
			matched = true

			if ii.MapOfAnything == nil {
				ii.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			ii.MapOfAnything[key] = val
		}

		if matched {
			delete(m, key)
		}
	}

	*i = AsymmetricEncryption(ii)

	return nil
}

var (
	// constAsymmetricEncryption is unconditionally added to JSON.
	constAsymmetricEncryption = json.RawMessage(`{"type":"asymmetricEncryption"}`)
)

// MarshalJSON encodes JSON.
func (i AsymmetricEncryption) MarshalJSON() ([]byte, error) {
	return marshalUnion(constAsymmetricEncryption, marshalAsymmetricEncryption(i), i.MapOfAnything)
}

// NonBearerHTTPSecurityScheme structure is generated from "#/definitions/NonBearerHTTPSecurityScheme".
type NonBearerHTTPSecurityScheme struct {
	Scheme        string                 `json:"scheme,omitempty"`
	Description   string                 `json:"description,omitempty"`
	MapOfAnything map[string]interface{} `json:"-"` // Key must match pattern: ^x-[\w\d\.\-\_]+$
}

// WithScheme sets Scheme value.
func (v *NonBearerHTTPSecurityScheme) WithScheme(val string) *NonBearerHTTPSecurityScheme {
	v.Scheme = val
	return v
}

// WithDescription sets Description value.
func (v *NonBearerHTTPSecurityScheme) WithDescription(val string) *NonBearerHTTPSecurityScheme {
	v.Description = val
	return v
}

// WithMapOfAnything sets MapOfAnything value.
func (v *NonBearerHTTPSecurityScheme) WithMapOfAnything(val map[string]interface{}) *NonBearerHTTPSecurityScheme {
	v.MapOfAnything = val
	return v
}

type marshalNonBearerHTTPSecurityScheme NonBearerHTTPSecurityScheme

var ignoreKeysNonBearerHTTPSecurityScheme = []string{
	"scheme",
	"description",
	"type",
}

// UnmarshalJSON decodes JSON.
func (i *NonBearerHTTPSecurityScheme) UnmarshalJSON(data []byte) error {
	var err error

	ii := marshalNonBearerHTTPSecurityScheme(*i)

	err = json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	var m map[string]json.RawMessage

	err = json.Unmarshal(data, &m)
	if err != nil {
		m = nil
	}

	if v, ok := m["type"]; !ok || string(v) != `"http"` {
		return fmt.Errorf(`bad or missing const value for "type" ("http" expected, %s received)`, v)
	}

	delete(m, "type")

	for _, key := range ignoreKeysNonBearerHTTPSecurityScheme {
		delete(m, key)
	}

	for key, rawValue := range m {
		matched := false

		if regexXWD.MatchString(key) {
			matched = true

			if ii.MapOfAnything == nil {
				ii.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			ii.MapOfAnything[key] = val
		}

		if matched {
			delete(m, key)
		}
	}

	*i = NonBearerHTTPSecurityScheme(ii)

	return nil
}

var (
	// constNonBearerHTTPSecurityScheme is unconditionally added to JSON.
	constNonBearerHTTPSecurityScheme = json.RawMessage(`{"type":"http"}`)
)

// MarshalJSON encodes JSON.
func (i NonBearerHTTPSecurityScheme) MarshalJSON() ([]byte, error) {
	return marshalUnion(constNonBearerHTTPSecurityScheme, marshalNonBearerHTTPSecurityScheme(i), i.MapOfAnything)
}

// BearerHTTPSecurityScheme structure is generated from "#/definitions/BearerHTTPSecurityScheme".
type BearerHTTPSecurityScheme struct {
	BearerFormat  string                 `json:"bearerFormat,omitempty"`
	Description   string                 `json:"description,omitempty"`
	MapOfAnything map[string]interface{} `json:"-"` // Key must match pattern: ^x-[\w\d\.\-\_]+$
}

// WithBearerFormat sets BearerFormat value.
func (v *BearerHTTPSecurityScheme) WithBearerFormat(val string) *BearerHTTPSecurityScheme {
	v.BearerFormat = val
	return v
}

// WithDescription sets Description value.
func (v *BearerHTTPSecurityScheme) WithDescription(val string) *BearerHTTPSecurityScheme {
	v.Description = val
	return v
}

// WithMapOfAnything sets MapOfAnything value.
func (v *BearerHTTPSecurityScheme) WithMapOfAnything(val map[string]interface{}) *BearerHTTPSecurityScheme {
	v.MapOfAnything = val
	return v
}

type marshalBearerHTTPSecurityScheme BearerHTTPSecurityScheme

var ignoreKeysBearerHTTPSecurityScheme = []string{
	"bearerFormat",
	"description",
	"scheme",
	"type",
}

// UnmarshalJSON decodes JSON.
func (i *BearerHTTPSecurityScheme) UnmarshalJSON(data []byte) error {
	var err error

	ii := marshalBearerHTTPSecurityScheme(*i)

	err = json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	var m map[string]json.RawMessage

	err = json.Unmarshal(data, &m)
	if err != nil {
		m = nil
	}

	if v, ok := m["scheme"]; !ok || string(v) != `"bearer"` {
		return fmt.Errorf(`bad or missing const value for "scheme" ("bearer" expected, %s received)`, v)
	}

	delete(m, "scheme")

	if v, ok := m["type"]; !ok || string(v) != `"http"` {
		return fmt.Errorf(`bad or missing const value for "type" ("http" expected, %s received)`, v)
	}

	delete(m, "type")

	for _, key := range ignoreKeysBearerHTTPSecurityScheme {
		delete(m, key)
	}

	for key, rawValue := range m {
		matched := false

		if regexXWD.MatchString(key) {
			matched = true

			if ii.MapOfAnything == nil {
				ii.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			ii.MapOfAnything[key] = val
		}

		if matched {
			delete(m, key)
		}
	}

	*i = BearerHTTPSecurityScheme(ii)

	return nil
}

var (
	// constBearerHTTPSecurityScheme is unconditionally added to JSON.
	constBearerHTTPSecurityScheme = json.RawMessage(`{"scheme":"bearer","type":"http"}`)
)

// MarshalJSON encodes JSON.
func (i BearerHTTPSecurityScheme) MarshalJSON() ([]byte, error) {
	return marshalUnion(constBearerHTTPSecurityScheme, marshalBearerHTTPSecurityScheme(i), i.MapOfAnything)
}

// APIKeyHTTPSecurityScheme structure is generated from "#/definitions/APIKeyHTTPSecurityScheme".
type APIKeyHTTPSecurityScheme struct {
	Name          string                     `json:"name,omitempty"`
	In            APIKeyHTTPSecuritySchemeIn `json:"in,omitempty"`
	Description   string                     `json:"description,omitempty"`
	MapOfAnything map[string]interface{}     `json:"-"` // Key must match pattern: ^x-[\w\d\.\-\_]+$
}

// WithName sets Name value.
func (v *APIKeyHTTPSecurityScheme) WithName(val string) *APIKeyHTTPSecurityScheme {
	v.Name = val
	return v
}

// WithIn sets In value.
func (v *APIKeyHTTPSecurityScheme) WithIn(val APIKeyHTTPSecuritySchemeIn) *APIKeyHTTPSecurityScheme {
	v.In = val
	return v
}

// WithDescription sets Description value.
func (v *APIKeyHTTPSecurityScheme) WithDescription(val string) *APIKeyHTTPSecurityScheme {
	v.Description = val
	return v
}

// WithMapOfAnything sets MapOfAnything value.
func (v *APIKeyHTTPSecurityScheme) WithMapOfAnything(val map[string]interface{}) *APIKeyHTTPSecurityScheme {
	v.MapOfAnything = val
	return v
}

type marshalAPIKeyHTTPSecurityScheme APIKeyHTTPSecurityScheme

var ignoreKeysAPIKeyHTTPSecurityScheme = []string{
	"name",
	"in",
	"description",
	"type",
}

// UnmarshalJSON decodes JSON.
func (i *APIKeyHTTPSecurityScheme) UnmarshalJSON(data []byte) error {
	var err error

	ii := marshalAPIKeyHTTPSecurityScheme(*i)

	err = json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	var m map[string]json.RawMessage

	err = json.Unmarshal(data, &m)
	if err != nil {
		m = nil
	}

	if v, ok := m["type"]; !ok || string(v) != `"httpApiKey"` {
		return fmt.Errorf(`bad or missing const value for "type" ("httpApiKey" expected, %s received)`, v)
	}

	delete(m, "type")

	for _, key := range ignoreKeysAPIKeyHTTPSecurityScheme {
		delete(m, key)
	}

	for key, rawValue := range m {
		matched := false

		if regexXWD.MatchString(key) {
			matched = true

			if ii.MapOfAnything == nil {
				ii.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			ii.MapOfAnything[key] = val
		}

		if matched {
			delete(m, key)
		}
	}

	*i = APIKeyHTTPSecurityScheme(ii)

	return nil
}

var (
	// constAPIKeyHTTPSecurityScheme is unconditionally added to JSON.
	constAPIKeyHTTPSecurityScheme = json.RawMessage(`{"type":"httpApiKey"}`)
)

// MarshalJSON encodes JSON.
func (i APIKeyHTTPSecurityScheme) MarshalJSON() ([]byte, error) {
	return marshalUnion(constAPIKeyHTTPSecurityScheme, marshalAPIKeyHTTPSecurityScheme(i), i.MapOfAnything)
}

// HTTPSecurityScheme structure is generated from "#/definitions/HTTPSecurityScheme".
type HTTPSecurityScheme struct {
	NonBearerHTTPSecurityScheme *NonBearerHTTPSecurityScheme `json:"-"`
	BearerHTTPSecurityScheme    *BearerHTTPSecurityScheme    `json:"-"`
	APIKeyHTTPSecurityScheme    *APIKeyHTTPSecurityScheme    `json:"-"`
}

// WithNonBearerHTTPSecurityScheme sets NonBearerHTTPSecurityScheme value.
func (v *HTTPSecurityScheme) WithNonBearerHTTPSecurityScheme(val NonBearerHTTPSecurityScheme) *HTTPSecurityScheme {
	v.NonBearerHTTPSecurityScheme = &val
	return v
}

// WithBearerHTTPSecurityScheme sets BearerHTTPSecurityScheme value.
func (v *HTTPSecurityScheme) WithBearerHTTPSecurityScheme(val BearerHTTPSecurityScheme) *HTTPSecurityScheme {
	v.BearerHTTPSecurityScheme = &val
	return v
}

// WithAPIKeyHTTPSecurityScheme sets APIKeyHTTPSecurityScheme value.
func (v *HTTPSecurityScheme) WithAPIKeyHTTPSecurityScheme(val APIKeyHTTPSecurityScheme) *HTTPSecurityScheme {
	v.APIKeyHTTPSecurityScheme = &val
	return v
}

// UnmarshalJSON decodes JSON.
func (i *HTTPSecurityScheme) UnmarshalJSON(data []byte) error {
	var err error

	err = json.Unmarshal(data, &i.NonBearerHTTPSecurityScheme)
	if err != nil {
		i.NonBearerHTTPSecurityScheme = nil
	}

	err = json.Unmarshal(data, &i.BearerHTTPSecurityScheme)
	if err != nil {
		i.BearerHTTPSecurityScheme = nil
	}

	err = json.Unmarshal(data, &i.APIKeyHTTPSecurityScheme)
	if err != nil {
		i.APIKeyHTTPSecurityScheme = nil
	}

	return nil
}

// MarshalJSON encodes JSON.
func (i HTTPSecurityScheme) MarshalJSON() ([]byte, error) {
	return marshalUnion(i.NonBearerHTTPSecurityScheme, i.BearerHTTPSecurityScheme, i.APIKeyHTTPSecurityScheme)
}

// Oauth2Flows structure is generated from "#/definitions/oauth2Flows".
type Oauth2Flows struct {
	Description   string                 `json:"description,omitempty"`
	Flows         *Oauth2FlowsFlows      `json:"flows,omitempty"`
	MapOfAnything map[string]interface{} `json:"-"` // Key must match pattern: ^x-[\w\d\.\-\_]+$
}

// WithDescription sets Description value.
func (v *Oauth2Flows) WithDescription(val string) *Oauth2Flows {
	v.Description = val
	return v
}

// WithFlows sets Flows value.
func (v *Oauth2Flows) WithFlows(val Oauth2FlowsFlows) *Oauth2Flows {
	v.Flows = &val
	return v
}

// WithMapOfAnything sets MapOfAnything value.
func (v *Oauth2Flows) WithMapOfAnything(val map[string]interface{}) *Oauth2Flows {
	v.MapOfAnything = val
	return v
}

type marshalOauth2Flows Oauth2Flows

var ignoreKeysOauth2Flows = []string{
	"description",
	"flows",
	"type",
}

// UnmarshalJSON decodes JSON.
func (i *Oauth2Flows) UnmarshalJSON(data []byte) error {
	var err error

	ii := marshalOauth2Flows(*i)

	err = json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	var m map[string]json.RawMessage

	err = json.Unmarshal(data, &m)
	if err != nil {
		m = nil
	}

	if v, ok := m["type"]; !ok || string(v) != `"oauth2"` {
		return fmt.Errorf(`bad or missing const value for "type" ("oauth2" expected, %s received)`, v)
	}

	delete(m, "type")

	for _, key := range ignoreKeysOauth2Flows {
		delete(m, key)
	}

	for key, rawValue := range m {
		matched := false

		if regexXWD.MatchString(key) {
			matched = true

			if ii.MapOfAnything == nil {
				ii.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			ii.MapOfAnything[key] = val
		}

		if matched {
			delete(m, key)
		}
	}

	*i = Oauth2Flows(ii)

	return nil
}

var (
	// constOauth2Flows is unconditionally added to JSON.
	constOauth2Flows = json.RawMessage(`{"type":"oauth2"}`)
)

// MarshalJSON encodes JSON.
func (i Oauth2Flows) MarshalJSON() ([]byte, error) {
	return marshalUnion(constOauth2Flows, marshalOauth2Flows(i), i.MapOfAnything)
}

// Oauth2FlowsFlows structure is generated from "#/definitions/oauth2Flows->flows".
type Oauth2FlowsFlows struct {
	Implicit          Oauth2Flow `json:"implicit,omitempty"`
	Password          Oauth2Flow `json:"password,omitempty"`
	ClientCredentials Oauth2Flow `json:"clientCredentials,omitempty"`
	AuthorizationCode Oauth2Flow `json:"authorizationCode,omitempty"`
}

// WithImplicit sets Implicit value.
func (v *Oauth2FlowsFlows) WithImplicit(val Oauth2Flow) *Oauth2FlowsFlows {
	v.Implicit = val
	return v
}

// WithPassword sets Password value.
func (v *Oauth2FlowsFlows) WithPassword(val Oauth2Flow) *Oauth2FlowsFlows {
	v.Password = val
	return v
}

// WithClientCredentials sets ClientCredentials value.
func (v *Oauth2FlowsFlows) WithClientCredentials(val Oauth2Flow) *Oauth2FlowsFlows {
	v.ClientCredentials = val
	return v
}

// WithAuthorizationCode sets AuthorizationCode value.
func (v *Oauth2FlowsFlows) WithAuthorizationCode(val Oauth2Flow) *Oauth2FlowsFlows {
	v.AuthorizationCode = val
	return v
}

// Oauth2Flow structure is generated from "#/definitions/oauth2Flow".
type Oauth2Flow struct {
	AuthorizationURL string                 `json:"authorizationUrl,omitempty"`
	TokenURL         string                 `json:"tokenUrl,omitempty"`
	RefreshURL       string                 `json:"refreshUrl,omitempty"`
	Scopes           map[string]string      `json:"scopes,omitempty"`
	MapOfAnything    map[string]interface{} `json:"-"` // Key must match pattern: ^x-[\w\d\.\-\_]+$
}

// WithAuthorizationURL sets AuthorizationURL value.
func (v *Oauth2Flow) WithAuthorizationURL(val string) *Oauth2Flow {
	v.AuthorizationURL = val
	return v
}

// WithTokenURL sets TokenURL value.
func (v *Oauth2Flow) WithTokenURL(val string) *Oauth2Flow {
	v.TokenURL = val
	return v
}

// WithRefreshURL sets RefreshURL value.
func (v *Oauth2Flow) WithRefreshURL(val string) *Oauth2Flow {
	v.RefreshURL = val
	return v
}

// WithScopes sets Scopes value.
func (v *Oauth2Flow) WithScopes(val map[string]string) *Oauth2Flow {
	v.Scopes = val
	return v
}

// WithMapOfAnything sets MapOfAnything value.
func (v *Oauth2Flow) WithMapOfAnything(val map[string]interface{}) *Oauth2Flow {
	v.MapOfAnything = val
	return v
}

type marshalOauth2Flow Oauth2Flow

var ignoreKeysOauth2Flow = []string{
	"authorizationUrl",
	"tokenUrl",
	"refreshUrl",
	"scopes",
}

// UnmarshalJSON decodes JSON.
func (i *Oauth2Flow) UnmarshalJSON(data []byte) error {
	var err error

	ii := marshalOauth2Flow(*i)

	err = json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	var m map[string]json.RawMessage

	err = json.Unmarshal(data, &m)
	if err != nil {
		m = nil
	}

	for _, key := range ignoreKeysOauth2Flow {
		delete(m, key)
	}

	for key, rawValue := range m {
		matched := false

		if regexXWD.MatchString(key) {
			matched = true

			if ii.MapOfAnything == nil {
				ii.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			ii.MapOfAnything[key] = val
		}

		if matched {
			delete(m, key)
		}
	}

	*i = Oauth2Flow(ii)

	return nil
}

// MarshalJSON encodes JSON.
func (i Oauth2Flow) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalOauth2Flow(i), i.MapOfAnything)
}

// OpenIDConnect structure is generated from "#/definitions/openIdConnect".
type OpenIDConnect struct {
	Description   string                 `json:"description,omitempty"`
	URL           string                 `json:"openIdConnectUrl,omitempty"`
	MapOfAnything map[string]interface{} `json:"-"` // Key must match pattern: ^x-[\w\d\.\-\_]+$
}

// WithDescription sets Description value.
func (v *OpenIDConnect) WithDescription(val string) *OpenIDConnect {
	v.Description = val
	return v
}

// WithURL sets URL value.
func (v *OpenIDConnect) WithURL(val string) *OpenIDConnect {
	v.URL = val
	return v
}

// WithMapOfAnything sets MapOfAnything value.
func (v *OpenIDConnect) WithMapOfAnything(val map[string]interface{}) *OpenIDConnect {
	v.MapOfAnything = val
	return v
}

type marshalOpenIDConnect OpenIDConnect

var ignoreKeysOpenIDConnect = []string{
	"description",
	"openIdConnectUrl",
	"type",
}

// UnmarshalJSON decodes JSON.
func (i *OpenIDConnect) UnmarshalJSON(data []byte) error {
	var err error

	ii := marshalOpenIDConnect(*i)

	err = json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	var m map[string]json.RawMessage

	err = json.Unmarshal(data, &m)
	if err != nil {
		m = nil
	}

	if v, ok := m["type"]; !ok || string(v) != `"openIdConnect"` {
		return fmt.Errorf(`bad or missing const value for "type" ("openIdConnect" expected, %s received)`, v)
	}

	delete(m, "type")

	for _, key := range ignoreKeysOpenIDConnect {
		delete(m, key)
	}

	for key, rawValue := range m {
		matched := false

		if regexXWD.MatchString(key) {
			matched = true

			if ii.MapOfAnything == nil {
				ii.MapOfAnything = make(map[string]interface{}, 1)
			}

			var val interface{}

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			ii.MapOfAnything[key] = val
		}

		if matched {
			delete(m, key)
		}
	}

	*i = OpenIDConnect(ii)

	return nil
}

var (
	// constOpenIDConnect is unconditionally added to JSON.
	constOpenIDConnect = json.RawMessage(`{"type":"openIdConnect"}`)
)

// MarshalJSON encodes JSON.
func (i OpenIDConnect) MarshalJSON() ([]byte, error) {
	return marshalUnion(constOpenIDConnect, marshalOpenIDConnect(i), i.MapOfAnything)
}

// SecurityScheme structure is generated from "#/definitions/SecurityScheme".
type SecurityScheme struct {
	UserPassword         *UserPassword         `json:"-"`
	APIKey               *APIKey               `json:"-"`
	X509                 *X509                 `json:"-"`
	SymmetricEncryption  *SymmetricEncryption  `json:"-"`
	AsymmetricEncryption *AsymmetricEncryption `json:"-"`
	HTTPSecurityScheme   *HTTPSecurityScheme   `json:"-"`
	Oauth2Flows          *Oauth2Flows          `json:"-"`
	OpenIDConnect        *OpenIDConnect        `json:"-"`
}

// WithUserPassword sets UserPassword value.
func (v *SecurityScheme) WithUserPassword(val UserPassword) *SecurityScheme {
	v.UserPassword = &val
	return v
}

// WithAPIKey sets APIKey value.
func (v *SecurityScheme) WithAPIKey(val APIKey) *SecurityScheme {
	v.APIKey = &val
	return v
}

// WithX509 sets X509 value.
func (v *SecurityScheme) WithX509(val X509) *SecurityScheme {
	v.X509 = &val
	return v
}

// WithSymmetricEncryption sets SymmetricEncryption value.
func (v *SecurityScheme) WithSymmetricEncryption(val SymmetricEncryption) *SecurityScheme {
	v.SymmetricEncryption = &val
	return v
}

// WithAsymmetricEncryption sets AsymmetricEncryption value.
func (v *SecurityScheme) WithAsymmetricEncryption(val AsymmetricEncryption) *SecurityScheme {
	v.AsymmetricEncryption = &val
	return v
}

// WithHTTPSecurityScheme sets HTTPSecurityScheme value.
func (v *SecurityScheme) WithHTTPSecurityScheme(val HTTPSecurityScheme) *SecurityScheme {
	v.HTTPSecurityScheme = &val
	return v
}

// WithOauth2Flows sets Oauth2Flows value.
func (v *SecurityScheme) WithOauth2Flows(val Oauth2Flows) *SecurityScheme {
	v.Oauth2Flows = &val
	return v
}

// WithOpenIDConnect sets OpenIDConnect value.
func (v *SecurityScheme) WithOpenIDConnect(val OpenIDConnect) *SecurityScheme {
	v.OpenIDConnect = &val
	return v
}

// UnmarshalJSON decodes JSON.
func (i *SecurityScheme) UnmarshalJSON(data []byte) error {
	var err error

	err = json.Unmarshal(data, &i.UserPassword)
	if err != nil {
		i.UserPassword = nil
	}

	err = json.Unmarshal(data, &i.APIKey)
	if err != nil {
		i.APIKey = nil
	}

	err = json.Unmarshal(data, &i.X509)
	if err != nil {
		i.X509 = nil
	}

	err = json.Unmarshal(data, &i.SymmetricEncryption)
	if err != nil {
		i.SymmetricEncryption = nil
	}

	err = json.Unmarshal(data, &i.AsymmetricEncryption)
	if err != nil {
		i.AsymmetricEncryption = nil
	}

	err = json.Unmarshal(data, &i.HTTPSecurityScheme)
	if err != nil {
		i.HTTPSecurityScheme = nil
	}

	err = json.Unmarshal(data, &i.Oauth2Flows)
	if err != nil {
		i.Oauth2Flows = nil
	}

	err = json.Unmarshal(data, &i.OpenIDConnect)
	if err != nil {
		i.OpenIDConnect = nil
	}

	return nil
}

// MarshalJSON encodes JSON.
func (i SecurityScheme) MarshalJSON() ([]byte, error) {
	return marshalUnion(i.UserPassword, i.APIKey, i.X509, i.SymmetricEncryption, i.AsymmetricEncryption, i.HTTPSecurityScheme, i.Oauth2Flows, i.OpenIDConnect)
}

// ComponentsSecuritySchemesWD structure is generated from "#/definitions/components->securitySchemes->^[\w\d\.\-_]+$".
type ComponentsSecuritySchemesWD struct {
	Reference      *Reference      `json:"-"`
	SecurityScheme *SecurityScheme `json:"-"`
}

// WithReference sets Reference value.
func (v *ComponentsSecuritySchemesWD) WithReference(val Reference) *ComponentsSecuritySchemesWD {
	v.Reference = &val
	return v
}

// WithSecurityScheme sets SecurityScheme value.
func (v *ComponentsSecuritySchemesWD) WithSecurityScheme(val SecurityScheme) *ComponentsSecuritySchemesWD {
	v.SecurityScheme = &val
	return v
}

// UnmarshalJSON decodes JSON.
func (i *ComponentsSecuritySchemesWD) UnmarshalJSON(data []byte) error {
	var err error

	err = json.Unmarshal(data, &i.Reference)
	if err != nil {
		i.Reference = nil
	}

	err = json.Unmarshal(data, &i.SecurityScheme)
	if err != nil {
		i.SecurityScheme = nil
	}

	return nil
}

// MarshalJSON encodes JSON.
func (i ComponentsSecuritySchemesWD) MarshalJSON() ([]byte, error) {
	return marshalUnion(i.Reference, i.SecurityScheme)
}

// ComponentsSecuritySchemes structure is generated from "#/definitions/components->securitySchemes".
type ComponentsSecuritySchemes struct {
	MapOfComponentsSecuritySchemesWDValues map[string]ComponentsSecuritySchemesWD `json:"-"` // Key must match pattern: ^[\w\d\.\-_]+$
}

// WithMapOfComponentsSecuritySchemesWDValues sets MapOfComponentsSecuritySchemesWDValues value.
func (v *ComponentsSecuritySchemes) WithMapOfComponentsSecuritySchemesWDValues(val map[string]ComponentsSecuritySchemesWD) *ComponentsSecuritySchemes {
	v.MapOfComponentsSecuritySchemesWDValues = val
	return v
}

// UnmarshalJSON decodes JSON.
func (i *ComponentsSecuritySchemes) UnmarshalJSON(data []byte) error {
	var err error

	var m map[string]json.RawMessage

	err = json.Unmarshal(data, &m)
	if err != nil {
		m = nil
	}

	for key, rawValue := range m {
		matched := false

		if regexWD.MatchString(key) {
			matched = true

			if i.MapOfComponentsSecuritySchemesWDValues == nil {
				i.MapOfComponentsSecuritySchemesWDValues = make(map[string]ComponentsSecuritySchemesWD, 1)
			}

			var val ComponentsSecuritySchemesWD

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			i.MapOfComponentsSecuritySchemesWDValues[key] = val
		}

		if matched {
			delete(m, key)
		}
	}

	return nil
}

// MarshalJSON encodes JSON.
func (i ComponentsSecuritySchemes) MarshalJSON() ([]byte, error) {
	return marshalUnion(i.MapOfComponentsSecuritySchemesWDValues)
}

// ComponentsCorrelationIdsWD structure is generated from "#/definitions/components->correlationIds->^[\w\d\.\-_]+$".
type ComponentsCorrelationIdsWD struct {
	Reference     *Reference     `json:"-"`
	CorrelationID *CorrelationID `json:"-"`
}

// WithReference sets Reference value.
func (v *ComponentsCorrelationIdsWD) WithReference(val Reference) *ComponentsCorrelationIdsWD {
	v.Reference = &val
	return v
}

// WithCorrelationID sets CorrelationID value.
func (v *ComponentsCorrelationIdsWD) WithCorrelationID(val CorrelationID) *ComponentsCorrelationIdsWD {
	v.CorrelationID = &val
	return v
}

// UnmarshalJSON decodes JSON.
func (i *ComponentsCorrelationIdsWD) UnmarshalJSON(data []byte) error {
	var err error

	err = json.Unmarshal(data, &i.Reference)
	if err != nil {
		i.Reference = nil
	}

	err = json.Unmarshal(data, &i.CorrelationID)
	if err != nil {
		i.CorrelationID = nil
	}

	return nil
}

// MarshalJSON encodes JSON.
func (i ComponentsCorrelationIdsWD) MarshalJSON() ([]byte, error) {
	return marshalUnion(i.Reference, i.CorrelationID)
}

// ComponentsCorrelationIds structure is generated from "#/definitions/components->correlationIds".
type ComponentsCorrelationIds struct {
	MapOfComponentsCorrelationIdsWDValues map[string]ComponentsCorrelationIdsWD `json:"-"` // Key must match pattern: ^[\w\d\.\-_]+$
}

// WithMapOfComponentsCorrelationIdsWDValues sets MapOfComponentsCorrelationIdsWDValues value.
func (v *ComponentsCorrelationIds) WithMapOfComponentsCorrelationIdsWDValues(val map[string]ComponentsCorrelationIdsWD) *ComponentsCorrelationIds {
	v.MapOfComponentsCorrelationIdsWDValues = val
	return v
}

// UnmarshalJSON decodes JSON.
func (i *ComponentsCorrelationIds) UnmarshalJSON(data []byte) error {
	var err error

	var m map[string]json.RawMessage

	err = json.Unmarshal(data, &m)
	if err != nil {
		m = nil
	}

	for key, rawValue := range m {
		matched := false

		if regexWD.MatchString(key) {
			matched = true

			if i.MapOfComponentsCorrelationIdsWDValues == nil {
				i.MapOfComponentsCorrelationIdsWDValues = make(map[string]ComponentsCorrelationIdsWD, 1)
			}

			var val ComponentsCorrelationIdsWD

			err = json.Unmarshal(rawValue, &val)
			if err != nil {
				return err
			}

			i.MapOfComponentsCorrelationIdsWDValues[key] = val
		}

		if matched {
			delete(m, key)
		}
	}

	return nil
}

// MarshalJSON encodes JSON.
func (i ComponentsCorrelationIds) MarshalJSON() ([]byte, error) {
	return marshalUnion(i.MapOfComponentsCorrelationIdsWDValues)
}

// AMQP091OperationBindingObjectDeliveryMode is an enum type.
type AMQP091OperationBindingObjectDeliveryMode int64

// AMQP091OperationBindingObjectDeliveryMode values enumeration.
const (
	AMQP091OperationBindingObjectDeliveryModeTransient  = AMQP091OperationBindingObjectDeliveryMode(1)
	AMQP091OperationBindingObjectDeliveryModePersistent = AMQP091OperationBindingObjectDeliveryMode(2)
)

// MarshalJSON encodes JSON.
func (i AMQP091OperationBindingObjectDeliveryMode) MarshalJSON() ([]byte, error) {
	switch i {
	case AMQP091OperationBindingObjectDeliveryModeTransient:
	case AMQP091OperationBindingObjectDeliveryModePersistent:

	default:
		return nil, fmt.Errorf("unexpected AMQP091OperationBindingObjectDeliveryMode value: %v", i)
	}

	return json.Marshal(int64(i))
}

// UnmarshalJSON decodes JSON.
func (i *AMQP091OperationBindingObjectDeliveryMode) UnmarshalJSON(data []byte) error {
	var ii int64

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := AMQP091OperationBindingObjectDeliveryMode(ii)

	switch v {
	case AMQP091OperationBindingObjectDeliveryModeTransient:
	case AMQP091OperationBindingObjectDeliveryModePersistent:

	default:
		return fmt.Errorf("unexpected AMQP091OperationBindingObjectDeliveryMode value: %v", v)
	}

	*i = v

	return nil
}

// AMQP091OperationBindingObjectBindingVersion is an enum type.
type AMQP091OperationBindingObjectBindingVersion string

// AMQP091OperationBindingObjectBindingVersion values enumeration.
const (
	AMQP091OperationBindingObjectBindingVersion010    = AMQP091OperationBindingObjectBindingVersion("0.1.0")
	AMQP091OperationBindingObjectBindingVersionLatest = AMQP091OperationBindingObjectBindingVersion("latest")
)

// MarshalJSON encodes JSON.
func (i AMQP091OperationBindingObjectBindingVersion) MarshalJSON() ([]byte, error) {
	switch i {
	case AMQP091OperationBindingObjectBindingVersion010:
	case AMQP091OperationBindingObjectBindingVersionLatest:

	default:
		return nil, fmt.Errorf("unexpected AMQP091OperationBindingObjectBindingVersion value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *AMQP091OperationBindingObjectBindingVersion) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := AMQP091OperationBindingObjectBindingVersion(ii)

	switch v {
	case AMQP091OperationBindingObjectBindingVersion010:
	case AMQP091OperationBindingObjectBindingVersionLatest:

	default:
		return fmt.Errorf("unexpected AMQP091OperationBindingObjectBindingVersion value: %v", v)
	}

	*i = v

	return nil
}

// AMQP091MessageBindingObjectBindingVersion is an enum type.
type AMQP091MessageBindingObjectBindingVersion string

// AMQP091MessageBindingObjectBindingVersion values enumeration.
const (
	AMQP091MessageBindingObjectBindingVersion010    = AMQP091MessageBindingObjectBindingVersion("0.1.0")
	AMQP091MessageBindingObjectBindingVersionLatest = AMQP091MessageBindingObjectBindingVersion("latest")
)

// MarshalJSON encodes JSON.
func (i AMQP091MessageBindingObjectBindingVersion) MarshalJSON() ([]byte, error) {
	switch i {
	case AMQP091MessageBindingObjectBindingVersion010:
	case AMQP091MessageBindingObjectBindingVersionLatest:

	default:
		return nil, fmt.Errorf("unexpected AMQP091MessageBindingObjectBindingVersion value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *AMQP091MessageBindingObjectBindingVersion) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := AMQP091MessageBindingObjectBindingVersion(ii)

	switch v {
	case AMQP091MessageBindingObjectBindingVersion010:
	case AMQP091MessageBindingObjectBindingVersionLatest:

	default:
		return fmt.Errorf("unexpected AMQP091MessageBindingObjectBindingVersion value: %v", v)
	}

	*i = v

	return nil
}

// AMQP091ChannelBindingObjectIs is an enum type.
type AMQP091ChannelBindingObjectIs string

// AMQP091ChannelBindingObjectIs values enumeration.
const (
	AMQP091ChannelBindingObjectIsRoutingKey = AMQP091ChannelBindingObjectIs("routingKey")
	AMQP091ChannelBindingObjectIsQueue      = AMQP091ChannelBindingObjectIs("queue")
)

// MarshalJSON encodes JSON.
func (i AMQP091ChannelBindingObjectIs) MarshalJSON() ([]byte, error) {
	switch i {
	case AMQP091ChannelBindingObjectIsRoutingKey:
	case AMQP091ChannelBindingObjectIsQueue:

	default:
		return nil, fmt.Errorf("unexpected AMQP091ChannelBindingObjectIs value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *AMQP091ChannelBindingObjectIs) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := AMQP091ChannelBindingObjectIs(ii)

	switch v {
	case AMQP091ChannelBindingObjectIsRoutingKey:
	case AMQP091ChannelBindingObjectIsQueue:

	default:
		return fmt.Errorf("unexpected AMQP091ChannelBindingObjectIs value: %v", v)
	}

	*i = v

	return nil
}

// ExchangeType is an enum type.
type ExchangeType string

// ExchangeType values enumeration.
const (
	ExchangeTypeTopic   = ExchangeType("topic")
	ExchangeTypeDirect  = ExchangeType("direct")
	ExchangeTypeFanout  = ExchangeType("fanout")
	ExchangeTypeDefault = ExchangeType("default")
	ExchangeTypeHeaders = ExchangeType("headers")
)

// MarshalJSON encodes JSON.
func (i ExchangeType) MarshalJSON() ([]byte, error) {
	switch i {
	case ExchangeTypeTopic:
	case ExchangeTypeDirect:
	case ExchangeTypeFanout:
	case ExchangeTypeDefault:
	case ExchangeTypeHeaders:

	default:
		return nil, fmt.Errorf("unexpected ExchangeType value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *ExchangeType) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := ExchangeType(ii)

	switch v {
	case ExchangeTypeTopic:
	case ExchangeTypeDirect:
	case ExchangeTypeFanout:
	case ExchangeTypeDefault:
	case ExchangeTypeHeaders:

	default:
		return fmt.Errorf("unexpected ExchangeType value: %v", v)
	}

	*i = v

	return nil
}

// AMQP091ChannelBindingObjectBindingVersion is an enum type.
type AMQP091ChannelBindingObjectBindingVersion string

// AMQP091ChannelBindingObjectBindingVersion values enumeration.
const (
	AMQP091ChannelBindingObjectBindingVersion010    = AMQP091ChannelBindingObjectBindingVersion("0.1.0")
	AMQP091ChannelBindingObjectBindingVersionLatest = AMQP091ChannelBindingObjectBindingVersion("latest")
)

// MarshalJSON encodes JSON.
func (i AMQP091ChannelBindingObjectBindingVersion) MarshalJSON() ([]byte, error) {
	switch i {
	case AMQP091ChannelBindingObjectBindingVersion010:
	case AMQP091ChannelBindingObjectBindingVersionLatest:

	default:
		return nil, fmt.Errorf("unexpected AMQP091ChannelBindingObjectBindingVersion value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *AMQP091ChannelBindingObjectBindingVersion) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := AMQP091ChannelBindingObjectBindingVersion(ii)

	switch v {
	case AMQP091ChannelBindingObjectBindingVersion010:
	case AMQP091ChannelBindingObjectBindingVersionLatest:

	default:
		return fmt.Errorf("unexpected AMQP091ChannelBindingObjectBindingVersion value: %v", v)
	}

	*i = v

	return nil
}

// APIKeyIn is an enum type.
type APIKeyIn string

// APIKeyIn values enumeration.
const (
	APIKeyInUser     = APIKeyIn("user")
	APIKeyInPassword = APIKeyIn("password")
)

// MarshalJSON encodes JSON.
func (i APIKeyIn) MarshalJSON() ([]byte, error) {
	switch i {
	case APIKeyInUser:
	case APIKeyInPassword:

	default:
		return nil, fmt.Errorf("unexpected APIKeyIn value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *APIKeyIn) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := APIKeyIn(ii)

	switch v {
	case APIKeyInUser:
	case APIKeyInPassword:

	default:
		return fmt.Errorf("unexpected APIKeyIn value: %v", v)
	}

	*i = v

	return nil
}

// APIKeyHTTPSecuritySchemeIn is an enum type.
type APIKeyHTTPSecuritySchemeIn string

// APIKeyHTTPSecuritySchemeIn values enumeration.
const (
	APIKeyHTTPSecuritySchemeInHeader = APIKeyHTTPSecuritySchemeIn("header")
	APIKeyHTTPSecuritySchemeInQuery  = APIKeyHTTPSecuritySchemeIn("query")
	APIKeyHTTPSecuritySchemeInCookie = APIKeyHTTPSecuritySchemeIn("cookie")
)

// MarshalJSON encodes JSON.
func (i APIKeyHTTPSecuritySchemeIn) MarshalJSON() ([]byte, error) {
	switch i {
	case APIKeyHTTPSecuritySchemeInHeader:
	case APIKeyHTTPSecuritySchemeInQuery:
	case APIKeyHTTPSecuritySchemeInCookie:

	default:
		return nil, fmt.Errorf("unexpected APIKeyHTTPSecuritySchemeIn value: %v", i)
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *APIKeyHTTPSecuritySchemeIn) UnmarshalJSON(data []byte) error {
	var ii string

	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}

	v := APIKeyHTTPSecuritySchemeIn(ii)

	switch v {
	case APIKeyHTTPSecuritySchemeInHeader:
	case APIKeyHTTPSecuritySchemeInQuery:
	case APIKeyHTTPSecuritySchemeInCookie:

	default:
		return fmt.Errorf("unexpected APIKeyHTTPSecuritySchemeIn value: %v", v)
	}

	*i = v

	return nil
}

func marshalUnion(maps ...interface{}) ([]byte, error) {
	result := make([]byte, 1, 100)
	result[0] = '{'
	isObject := true

	for _, m := range maps {
		j, err := json.Marshal(m)
		if err != nil {
			return nil, err
		}

		if string(j) == "{}" {
			continue
		}

		if string(j) == "null" {
			continue
		}

		if j[0] != '{' {
			if len(result) == 1 && (isObject || bytes.Equal(result, j)) {
				result = j
				isObject = false

				continue
			}

			return nil, errors.New("failed to union map: object expected, " + string(j) + " received")
		}

		if !isObject {
			return nil, errors.New("failed to union " + string(result) + " and " + string(j))
		}

		if len(result) > 1 {
			result[len(result)-1] = ','
		}

		result = append(result, j[1:]...)
	}

	// Close empty result.
	if isObject && len(result) == 1 {
		result = append(result, '}')
	}

	return result, nil
}

// Regular expressions for pattern properties.
var (
	regexXWD = regexp.MustCompile(`^x-[\w\d\.\-\_]+$`)
	regexWD  = regexp.MustCompile(`^[\w\d\.\-_]+$`)
)
